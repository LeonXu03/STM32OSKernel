
ece350_start.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053e4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08005584  08005584  00006584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800570c  0800570c  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  0800570c  0800570c  0000670c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005714  08005714  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005714  08005714  00006714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005718  08005718  00006718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800571c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a8  20000068  08005784  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00008000  20000810  08005784  00007810  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a66f  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000257d  00000000  00000000  00011707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  00013c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000758  00000000  00000000  00014660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001863d  00000000  00000000  00014db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d39d  00000000  00000000  0002d3f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087e81  00000000  00000000  0003a792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000c2613  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e40  00000000  00000000  000c269c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000c54dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800556c 	.word	0x0800556c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800556c 	.word	0x0800556c

080001e0 <SVC_Handler>:
.global PSP

.thumb_func
.global SVC_Handler
SVC_Handler: 
	TST lr, #4
 80001e0:	f01e 0f04 	tst.w	lr, #4
	ITE EQ
 80001e4:	bf0c      	ite	eq
	MRSEQ r0, MSP
 80001e6:	f3ef 8008 	mrseq	r0, MSP
	MRSNE r0, PSP
 80001ea:	f3ef 8009 	mrsne	r0, PSP
	B SVC_Handler_Main
 80001ee:	f001 bd81 	b.w	8001cf4 <SVC_Handler_Main>

080001f2 <PendSV_Handler>:

.thumb_func
.global PendSV_Handler
PendSV_Handler:
	MRS R0, PSP
 80001f2:	f3ef 8009 	mrs	r0, PSP
	STMDB R0!, {R4-R11}
 80001f6:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	MSR PSP, R0
 80001fa:	f380 8809 	msr	PSP, r0
	BL Context_Switch
 80001fe:	f001 fdd1 	bl	8001da4 <Context_Switch>
	MRS R0, PSP
 8000202:	f3ef 8009 	mrs	r0, PSP
	LDMIA R0!, {R4-R11}
 8000206:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	MSR PSP, R0
 800020a:	f380 8809 	msr	PSP, r0
	LDR LR, =0xFFFFFFFD
 800020e:	f06f 0e02 	mvn.w	lr, #2
    BX LR
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	f000 b96a 	b.w	8000d98 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d14e      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000ae8:	4694      	mov	ip, r2
 8000aea:	458c      	cmp	ip, r1
 8000aec:	4686      	mov	lr, r0
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	d962      	bls.n	8000bba <__udivmoddi4+0xde>
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	4091      	lsls	r1, r2
 8000afc:	fa20 f303 	lsr.w	r3, r0, r3
 8000b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b04:	4319      	orrs	r1, r3
 8000b06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f f68c 	uxth.w	r6, ip
 8000b12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb04 f106 	mul.w	r1, r4, r6
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b32:	f080 8112 	bcs.w	8000d5a <__udivmoddi4+0x27e>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 810f 	bls.w	8000d5a <__udivmoddi4+0x27e>
 8000b3c:	3c02      	subs	r4, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb00 f606 	mul.w	r6, r0, r6
 8000b56:	429e      	cmp	r6, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x94>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b62:	f080 80fc 	bcs.w	8000d5e <__udivmoddi4+0x282>
 8000b66:	429e      	cmp	r6, r3
 8000b68:	f240 80f9 	bls.w	8000d5e <__udivmoddi4+0x282>
 8000b6c:	4463      	add	r3, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	1b9b      	subs	r3, r3, r6
 8000b72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11d      	cbz	r5, 8000b82 <__udivmoddi4+0xa6>
 8000b7a:	40d3      	lsrs	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d905      	bls.n	8000b96 <__udivmoddi4+0xba>
 8000b8a:	b10d      	cbz	r5, 8000b90 <__udivmoddi4+0xb4>
 8000b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b90:	2100      	movs	r1, #0
 8000b92:	4608      	mov	r0, r1
 8000b94:	e7f5      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000b96:	fab3 f183 	clz	r1, r3
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d146      	bne.n	8000c2c <__udivmoddi4+0x150>
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xcc>
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	f0c0 80f0 	bcc.w	8000d88 <__udivmoddi4+0x2ac>
 8000ba8:	1a86      	subs	r6, r0, r2
 8000baa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e6      	beq.n	8000b82 <__udivmoddi4+0xa6>
 8000bb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb8:	e7e3      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x204>
 8000bc0:	eba1 040c 	sub.w	r4, r1, ip
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	fa1f f78c 	uxth.w	r7, ip
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bde:	fb07 f006 	mul.w	r0, r7, r6
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x11c>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x11a>
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	f200 80cd 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bf6:	4626      	mov	r6, r4
 8000bf8:	1a1c      	subs	r4, r3, r0
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c02:	fb08 4410 	mls	r4, r8, r0, r4
 8000c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0a:	fb00 f707 	mul.w	r7, r0, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x148>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x146>
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	f200 80b0 	bhi.w	8000d82 <__udivmoddi4+0x2a6>
 8000c22:	4620      	mov	r0, r4
 8000c24:	1bdb      	subs	r3, r3, r7
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	e7a5      	b.n	8000b78 <__udivmoddi4+0x9c>
 8000c2c:	f1c1 0620 	rsb	r6, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 f706 	lsr.w	r7, r2, r6
 8000c36:	431f      	orrs	r7, r3
 8000c38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c40:	ea43 030c 	orr.w	r3, r3, ip
 8000c44:	40f4      	lsrs	r4, r6
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	0c38      	lsrs	r0, r7, #16
 8000c4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c50:	fbb4 fef0 	udiv	lr, r4, r0
 8000c54:	fa1f fc87 	uxth.w	ip, r7
 8000c58:	fb00 441e 	mls	r4, r0, lr, r4
 8000c5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c60:	fb0e f90c 	mul.w	r9, lr, ip
 8000c64:	45a1      	cmp	r9, r4
 8000c66:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x1a6>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c72:	f080 8084 	bcs.w	8000d7e <__udivmoddi4+0x2a2>
 8000c76:	45a1      	cmp	r9, r4
 8000c78:	f240 8081 	bls.w	8000d7e <__udivmoddi4+0x2a2>
 8000c7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c80:	443c      	add	r4, r7
 8000c82:	eba4 0409 	sub.w	r4, r4, r9
 8000c86:	fa1f f983 	uxth.w	r9, r3
 8000c8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x1d2>
 8000c9e:	193c      	adds	r4, r7, r4
 8000ca0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ca4:	d267      	bcs.n	8000d76 <__udivmoddi4+0x29a>
 8000ca6:	45a4      	cmp	ip, r4
 8000ca8:	d965      	bls.n	8000d76 <__udivmoddi4+0x29a>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	443c      	add	r4, r7
 8000cae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cb6:	eba4 040c 	sub.w	r4, r4, ip
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	46ce      	mov	lr, r9
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	d351      	bcc.n	8000d66 <__udivmoddi4+0x28a>
 8000cc2:	d04e      	beq.n	8000d62 <__udivmoddi4+0x286>
 8000cc4:	b155      	cbz	r5, 8000cdc <__udivmoddi4+0x200>
 8000cc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cca:	eb64 040c 	sbc.w	r4, r4, ip
 8000cce:	fa04 f606 	lsl.w	r6, r4, r6
 8000cd2:	40cb      	lsrs	r3, r1
 8000cd4:	431e      	orrs	r6, r3
 8000cd6:	40cc      	lsrs	r4, r1
 8000cd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e750      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3110 	mls	r1, r8, r0, r3
 8000d08:	0c23      	lsrs	r3, r4, #16
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f107 	mul.w	r1, r0, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x24c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d1e:	d22c      	bcs.n	8000d7a <__udivmoddi4+0x29e>
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d92a      	bls.n	8000d7a <__udivmoddi4+0x29e>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d30:	fb08 3311 	mls	r3, r8, r1, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb01 f307 	mul.w	r3, r1, r7
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x276>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d48:	d213      	bcs.n	8000d72 <__udivmoddi4+0x296>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d911      	bls.n	8000d72 <__udivmoddi4+0x296>
 8000d4e:	3902      	subs	r1, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d58:	e739      	b.n	8000bce <__udivmoddi4+0xf2>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	e6f0      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e706      	b.n	8000b70 <__udivmoddi4+0x94>
 8000d62:	45c8      	cmp	r8, r9
 8000d64:	d2ae      	bcs.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d6e:	3801      	subs	r0, #1
 8000d70:	e7a8      	b.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d72:	4631      	mov	r1, r6
 8000d74:	e7ed      	b.n	8000d52 <__udivmoddi4+0x276>
 8000d76:	4603      	mov	r3, r0
 8000d78:	e799      	b.n	8000cae <__udivmoddi4+0x1d2>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e7d4      	b.n	8000d28 <__udivmoddi4+0x24c>
 8000d7e:	46d6      	mov	lr, sl
 8000d80:	e77f      	b.n	8000c82 <__udivmoddi4+0x1a6>
 8000d82:	4463      	add	r3, ip
 8000d84:	3802      	subs	r0, #2
 8000d86:	e74d      	b.n	8000c24 <__udivmoddi4+0x148>
 8000d88:	4606      	mov	r6, r0
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e70f      	b.n	8000bb0 <__udivmoddi4+0xd4>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	e730      	b.n	8000bf8 <__udivmoddi4+0x11c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <k_mem_init>:
#include "k_mem.h"
#include "main.h"
#include "bit_array.h"
#include <stdio.h>

int k_mem_init() {
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
//	printf("End of Image:%x\r\n", (uint32_t)&_img_end); // Start of heap
//	printf("End of heap:%x\r\n", (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size); // End of heap
	if (kernelInitialized == false) {
 8000da2:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <k_mem_init+0x6c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <k_mem_init+0x12>
		return RTX_ERR;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e026      	b.n	8000dfc <k_mem_init+0x60>
	}

	if (memoryInitialized) {
 8000dae:	4b17      	ldr	r3, [pc, #92]	@ (8000e0c <k_mem_init+0x70>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <k_mem_init+0x1e>
//		printf("Memory already initialized\r\n");
		return RTX_ERR;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e020      	b.n	8000dfc <k_mem_init+0x60>
	}

//	initBitArray();

	uint32_t initial_block_address = (uint32_t)&_img_end; // + (uint32_t)MEMORY_POOL;
 8000dba:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <k_mem_init+0x74>)
 8000dbc:	60fb      	str	r3, [r7, #12]
//	printf("initial_block_address is %x\r\n", initial_block_address);
	uint32_t* heap_ptr = initial_block_address;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	60bb      	str	r3, [r7, #8]
	Block* initial_block = (Block*)heap_ptr;
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	607b      	str	r3, [r7, #4]
	// Set up initial memory block of 32KB
	initial_block->size = (int32_t)MEMORY_POOL;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000dcc:	601a      	str	r2, [r3, #0]
	initial_block->tid = 0;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	605a      	str	r2, [r3, #4]
	initial_block->magicNumber = -1;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000dda:	609a      	str	r2, [r3, #8]
	initial_block->status = FREE;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
	initial_block->next = NULL;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
	initial_block->prev = NULL;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	615a      	str	r2, [r3, #20]

	freeListArray[0] = initial_block;
 8000dee:	4a09      	ldr	r2, [pc, #36]	@ (8000e14 <k_mem_init+0x78>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6013      	str	r3, [r2, #0]
	memoryInitialized = 1;
 8000df4:	4b05      	ldr	r3, [pc, #20]	@ (8000e0c <k_mem_init+0x70>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	601a      	str	r2, [r3, #0]

	return RTX_OK;
 8000dfa:	2301      	movs	r3, #1
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	200000b0 	.word	0x200000b0
 8000e0c:	200000c4 	.word	0x200000c4
 8000e10:	20008810 	.word	0x20008810
 8000e14:	20000084 	.word	0x20000084

08000e18 <k_mem_alloc>:
	uint32_t ptr = freeListArray[0];
	assert(ptr > (uint32_t)&_img_end);
	assert(ptr < ((uint32_t)&_estack - (uint32_t)&_Min_Stack_Size));
}

void* k_mem_alloc(size_t size) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08c      	sub	sp, #48	@ 0x30
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	if (memoryInitialized == false) {
 8000e20:	4b6b      	ldr	r3, [pc, #428]	@ (8000fd0 <k_mem_alloc+0x1b8>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d101      	bne.n	8000e2c <k_mem_alloc+0x14>
		return RTX_ERR;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	e0cc      	b.n	8000fc6 <k_mem_alloc+0x1ae>
	}

	if (size == 0) {
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d101      	bne.n	8000e36 <k_mem_alloc+0x1e>
		return RTX_ERR;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e0c7      	b.n	8000fc6 <k_mem_alloc+0x1ae>
	}

	if(size + sizeof(Block) > 32768){
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3318      	adds	r3, #24
 8000e3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000e3e:	d901      	bls.n	8000e44 <k_mem_alloc+0x2c>
		return RTX_ERR;
 8000e40:	2300      	movs	r3, #0
 8000e42:	e0c0      	b.n	8000fc6 <k_mem_alloc+0x1ae>
	}

	// level k
	int level = findStartingLevel(size);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f000 fa13 	bl	8001270 <findStartingLevel>
 8000e4a:	6238      	str	r0, [r7, #32]
	// should check if the requested size is bigger than the max size we have which is 32KB
	// also should check if we have a free node for the requested size
	int currentLevel = -1;
 8000e4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
	// go up until it has the free list node
	for(int i = level; i >= 0; i--) {
 8000e52:	6a3b      	ldr	r3, [r7, #32]
 8000e54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e56:	e00b      	b.n	8000e70 <k_mem_alloc+0x58>
		if (freeListArray[i] != NULL){
 8000e58:	4a5e      	ldr	r2, [pc, #376]	@ (8000fd4 <k_mem_alloc+0x1bc>)
 8000e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d002      	beq.n	8000e6a <k_mem_alloc+0x52>
			currentLevel = i;
 8000e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
			break;
 8000e68:	e005      	b.n	8000e76 <k_mem_alloc+0x5e>
	for(int i = level; i >= 0; i--) {
 8000e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	daf0      	bge.n	8000e58 <k_mem_alloc+0x40>
		}
	}

	if (currentLevel == -1) {
 8000e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e7c:	d101      	bne.n	8000e82 <k_mem_alloc+0x6a>
		return RTX_ERR;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e0a1      	b.n	8000fc6 <k_mem_alloc+0x1ae>
	}

	// have to split until current level matches the desired level (only runs if no free node in original level)
	for(int i = currentLevel; i < level; i++) {
 8000e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e86:	e06c      	b.n	8000f62 <k_mem_alloc+0x14a>
		//2. set bit array index to 1 (for the deleted head node)
		Block* splitBlock = freeListArray[i];
 8000e88:	4a52      	ldr	r2, [pc, #328]	@ (8000fd4 <k_mem_alloc+0x1bc>)
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e90:	61bb      	str	r3, [r7, #24]

		//1. delete the head node of free list
		if (freeListArray[i]->next != NULL){
 8000e92:	4a50      	ldr	r2, [pc, #320]	@ (8000fd4 <k_mem_alloc+0x1bc>)
 8000e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9a:	691b      	ldr	r3, [r3, #16]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d006      	beq.n	8000eae <k_mem_alloc+0x96>
			freeListArray[i]->next->prev = NULL;
 8000ea0:	4a4c      	ldr	r2, [pc, #304]	@ (8000fd4 <k_mem_alloc+0x1bc>)
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	615a      	str	r2, [r3, #20]
		}
		freeListArray[i] = splitBlock->next;
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	691a      	ldr	r2, [r3, #16]
 8000eb2:	4948      	ldr	r1, [pc, #288]	@ (8000fd4 <k_mem_alloc+0x1bc>)
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3. create 2 child nodes (head of the doubly linked list)
		uint32_t newSize = splitBlock->size / 2;
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	085b      	lsrs	r3, r3, #1
 8000ec0:	617b      	str	r3, [r7, #20]

		Block* block1 = (Block*)((uint32_t)splitBlock);
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	613b      	str	r3, [r7, #16]
		block1->size = newSize;
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	601a      	str	r2, [r3, #0]
		block1->tid = 0;
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	605a      	str	r2, [r3, #4]
		block1->magicNumber = -1;
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ed8:	609a      	str	r2, [r3, #8]
		block1->status = FREE;
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
		block1->next = NULL;
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]
		block1->prev = NULL;
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	615a      	str	r2, [r3, #20]

		Block* block2 = (Block*)((uint32_t)splitBlock + newSize);
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]
		block2->size = newSize;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	601a      	str	r2, [r3, #0]
		block2->tid = 0;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
		block2->magicNumber = -1;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f06:	609a      	str	r2, [r3, #8]
		block2->status = FREE;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
		block2->next = NULL;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
		block2->prev = NULL;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2200      	movs	r2, #0
 8000f18:	615a      	str	r2, [r3, #20]

		// Pointer orientation
		block1->next = block2;
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
		block2->prev = block1;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	615a      	str	r2, [r3, #20]
		block2->next = freeListArray[i + 1];
 8000f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f28:	3301      	adds	r3, #1
 8000f2a:	4a2a      	ldr	r2, [pc, #168]	@ (8000fd4 <k_mem_alloc+0x1bc>)
 8000f2c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	611a      	str	r2, [r3, #16]

		if (freeListArray[i + 1] != NULL) {
 8000f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f36:	3301      	adds	r3, #1
 8000f38:	4a26      	ldr	r2, [pc, #152]	@ (8000fd4 <k_mem_alloc+0x1bc>)
 8000f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d006      	beq.n	8000f50 <k_mem_alloc+0x138>
			freeListArray[i + 1]->prev = block2;
 8000f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f44:	3301      	adds	r3, #1
 8000f46:	4a23      	ldr	r2, [pc, #140]	@ (8000fd4 <k_mem_alloc+0x1bc>)
 8000f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	615a      	str	r2, [r3, #20]
		}
		freeListArray[i + 1] = block1;
 8000f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f52:	3301      	adds	r3, #1
 8000f54:	491f      	ldr	r1, [pc, #124]	@ (8000fd4 <k_mem_alloc+0x1bc>)
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = currentLevel; i < level; i++) {
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f5e:	3301      	adds	r3, #1
 8000f60:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f64:	6a3b      	ldr	r3, [r7, #32]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	db8e      	blt.n	8000e88 <k_mem_alloc+0x70>
		// recursive (by going down the level)

	}
	//4. if i equals to the desired level, set bit array index to 1, remove the node in the free list
	Block* allocationBlock = freeListArray[level];
 8000f6a:	4a1a      	ldr	r2, [pc, #104]	@ (8000fd4 <k_mem_alloc+0x1bc>)
 8000f6c:	6a3b      	ldr	r3, [r7, #32]
 8000f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f72:	61fb      	str	r3, [r7, #28]
	allocationBlock->status = ALLOCATED;
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	2201      	movs	r2, #1
 8000f78:	60da      	str	r2, [r3, #12]
	allocationBlock->tid = runningTask ? runningTask->tid : 0;
 8000f7a:	4b17      	ldr	r3, [pc, #92]	@ (8000fd8 <k_mem_alloc+0x1c0>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <k_mem_alloc+0x172>
 8000f82:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <k_mem_alloc+0x1c0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	e000      	b.n	8000f8c <k_mem_alloc+0x174>
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	69fa      	ldr	r2, [r7, #28]
 8000f8e:	6053      	str	r3, [r2, #4]
	allocationBlock->magicNumber = -1;
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f96:	609a      	str	r2, [r3, #8]
	freeListArray[level] = freeListArray[level]->next;
 8000f98:	4a0e      	ldr	r2, [pc, #56]	@ (8000fd4 <k_mem_alloc+0x1bc>)
 8000f9a:	6a3b      	ldr	r3, [r7, #32]
 8000f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa0:	691a      	ldr	r2, [r3, #16]
 8000fa2:	490c      	ldr	r1, [pc, #48]	@ (8000fd4 <k_mem_alloc+0x1bc>)
 8000fa4:	6a3b      	ldr	r3, [r7, #32]
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (freeListArray[level] != NULL) {
 8000faa:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd4 <k_mem_alloc+0x1bc>)
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d005      	beq.n	8000fc2 <k_mem_alloc+0x1aa>
		freeListArray[level]->prev = NULL;
 8000fb6:	4a07      	ldr	r2, [pc, #28]	@ (8000fd4 <k_mem_alloc+0x1bc>)
 8000fb8:	6a3b      	ldr	r3, [r7, #32]
 8000fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	615a      	str	r2, [r3, #20]
	}

	return (void*)((uint32_t)allocationBlock + sizeof(Block));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3318      	adds	r3, #24
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3730      	adds	r7, #48	@ 0x30
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200000c4 	.word	0x200000c4
 8000fd4:	20000084 	.word	0x20000084
 8000fd8:	200000b8 	.word	0x200000b8

08000fdc <k_mem_dealloc>:
	assert(ptr2 == (uint32_t)&_img_end + (uint32_t)MEMORY_POOL / 2 + sizeof(Block)); // Location of first block, without metadata
	printf("Completed k_mem_alloc unit test successfully \r\n");
}


int k_mem_dealloc(void* ptr) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	// Step 0: Check for invalid inputs
	if (memoryInitialized == false) return RTX_ERR;
 8000fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8001094 <k_mem_dealloc+0xb8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d101      	bne.n	8000ff0 <k_mem_dealloc+0x14>
 8000fec:	2300      	movs	r3, #0
 8000fee:	e04c      	b.n	800108a <k_mem_dealloc+0xae>
	if (ptr == NULL) return RTX_ERR;  // if provided ptr to memory region is NULL, return error
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <k_mem_dealloc+0x1e>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e047      	b.n	800108a <k_mem_dealloc+0xae>

	// Step 1: Obtain and check block metadata
	Block *metadata = (Block *)ptr - 1;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3b18      	subs	r3, #24
 8000ffe:	617b      	str	r3, [r7, #20]
	if (runningTask != NULL) { // if dealloc requested by user task, make sure running user task owns the memory region
 8001000:	4b25      	ldr	r3, [pc, #148]	@ (8001098 <k_mem_dealloc+0xbc>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d008      	beq.n	800101a <k_mem_dealloc+0x3e>
		if ((uint32_t)(runningTask->tid) != (uint32_t)(metadata->tid)) return RTX_ERR;
 8001008:	4b23      	ldr	r3, [pc, #140]	@ (8001098 <k_mem_dealloc+0xbc>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	429a      	cmp	r2, r3
 8001014:	d001      	beq.n	800101a <k_mem_dealloc+0x3e>
 8001016:	2300      	movs	r3, #0
 8001018:	e037      	b.n	800108a <k_mem_dealloc+0xae>
	}
	if (metadata->status == FREE) return RTX_ERR; // if memory region is not allocated, return error
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <k_mem_dealloc+0x4a>
 8001022:	2300      	movs	r3, #0
 8001024:	e031      	b.n	800108a <k_mem_dealloc+0xae>
	if (metadata->magicNumber != -1) return RTX_ERR; // check if memory region has been corrupted
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800102e:	d001      	beq.n	8001034 <k_mem_dealloc+0x58>
 8001030:	2300      	movs	r3, #0
 8001032:	e02a      	b.n	800108a <k_mem_dealloc+0xae>

	// Step 2: Clear metadata of cleared memory region
	uint32_t size = metadata->size;
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	613b      	str	r3, [r7, #16]
	int level = findStartingLevel(size - sizeof(Block));
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	3b18      	subs	r3, #24
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f916 	bl	8001270 <findStartingLevel>
 8001044:	60f8      	str	r0, [r7, #12]
	metadata->status = FREE;
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	2200      	movs	r2, #0
 800104a:	60da      	str	r2, [r3, #12]
	metadata->tid = 0;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	2200      	movs	r2, #0
 8001050:	605a      	str	r2, [r3, #4]

	// Step 3: Add a free list node since this memory region is now cleared
	metadata->prev = NULL;
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	2200      	movs	r2, #0
 8001056:	615a      	str	r2, [r3, #20]
	metadata->next = freeListArray[level];
 8001058:	4a10      	ldr	r2, [pc, #64]	@ (800109c <k_mem_dealloc+0xc0>)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	611a      	str	r2, [r3, #16]
	if (metadata->next != NULL) {
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <k_mem_dealloc+0x98>
		metadata->next->prev = metadata;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	615a      	str	r2, [r3, #20]
	}
	freeListArray[level] = metadata;
 8001074:	4909      	ldr	r1, [pc, #36]	@ (800109c <k_mem_dealloc+0xc0>)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return coalesce(metadata, level);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4619      	mov	r1, r3
 8001082:	6978      	ldr	r0, [r7, #20]
 8001084:	f000 f80c 	bl	80010a0 <coalesce>
 8001088:	4603      	mov	r3, r0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200000c4 	.word	0x200000c4
 8001098:	200000b8 	.word	0x200000b8
 800109c:	20000084 	.word	0x20000084

080010a0 <coalesce>:

// Coalesces memory blocks if applicable
// Block* block should be a pointer to a free memory block which is also the head of the free list at that level
int coalesce(Block* block, uint32_t level) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08c      	sub	sp, #48	@ 0x30
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]

	// if root node, cannot coalesce so return early
	if (block->size == MEMORY_POOL) return RTX_OK;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80010b2:	d101      	bne.n	80010b8 <coalesce+0x18>
 80010b4:	2301      	movs	r3, #1
 80010b6:	e09f      	b.n	80011f8 <coalesce+0x158>

	for(int lvl = level; lvl > 0; lvl--) {
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010bc:	e097      	b.n	80011ee <coalesce+0x14e>
		// Searches for and captures a pair of free buddy memory regions if it exists
		Block* buddyBlockAddress = getBuddyBlockAddress(block);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 f8a0 	bl	8001204 <getBuddyBlockAddress>
 80010c4:	4603      	mov	r3, r0
 80010c6:	623b      	str	r3, [r7, #32]
		uint32_t foundFreeBuddyBlock = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62bb      	str	r3, [r7, #40]	@ 0x28

		Block* freeList = freeListArray[lvl];
 80010cc:	4a4c      	ldr	r2, [pc, #304]	@ (8001200 <coalesce+0x160>)
 80010ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d4:	627b      	str	r3, [r7, #36]	@ 0x24
		while(freeList != NULL) {
 80010d6:	e01c      	b.n	8001112 <coalesce+0x72>
			uint32_t status = freeList->status;
 80010d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	61fb      	str	r3, [r7, #28]
			uint32_t magicNumber = freeList->magicNumber;
 80010de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	61bb      	str	r3, [r7, #24]

			if ((uint32_t)freeList == (uint32_t)buddyBlockAddress) {
 80010e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010e6:	6a3b      	ldr	r3, [r7, #32]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d10c      	bne.n	8001106 <coalesce+0x66>
				if (status != FREE) return RTX_ERR; // why is buddy on free list if it's not free
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <coalesce+0x56>
 80010f2:	2300      	movs	r3, #0
 80010f4:	e080      	b.n	80011f8 <coalesce+0x158>
				if (magicNumber != -1) return RTX_ERR; // free buddy is corrupted
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010fc:	d001      	beq.n	8001102 <coalesce+0x62>
 80010fe:	2300      	movs	r3, #0
 8001100:	e07a      	b.n	80011f8 <coalesce+0x158>
				foundFreeBuddyBlock = 1; // successfully found free buddy block
 8001102:	2301      	movs	r3, #1
 8001104:	62bb      	str	r3, [r7, #40]	@ 0x28
			}

			if (foundFreeBuddyBlock) break;
 8001106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001108:	2b00      	cmp	r3, #0
 800110a:	d106      	bne.n	800111a <coalesce+0x7a>

			freeList = freeList->next;
 800110c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
		while(freeList != NULL) {
 8001112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1df      	bne.n	80010d8 <coalesce+0x38>
 8001118:	e000      	b.n	800111c <coalesce+0x7c>
			if (foundFreeBuddyBlock) break;
 800111a:	bf00      	nop
		}

		// If we did NOT find any free buddy memory regions, we return early as we CANNOT coalesce
		// This is a valid case if we don't have a free buddy. Only return RTX_ERR if our free buddy was corrupted
		if (!foundFreeBuddyBlock) return RTX_OK;
 800111c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <coalesce+0x86>
 8001122:	2301      	movs	r3, #1
 8001124:	e068      	b.n	80011f8 <coalesce+0x158>

		// START COALESCE FLOW
		// Step 1: remove 2 free nodes from the current level
		block->next->prev = NULL;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	2200      	movs	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
		freeListArray[lvl] = block->next;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	691a      	ldr	r2, [r3, #16]
 8001132:	4933      	ldr	r1, [pc, #204]	@ (8001200 <coalesce+0x160>)
 8001134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		block->next = NULL;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]

		if (buddyBlockAddress->prev == NULL) { // if free list node is head of the free list (need to update the pointer to head of free list)
 8001140:	6a3b      	ldr	r3, [r7, #32]
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d10d      	bne.n	8001164 <coalesce+0xc4>
			buddyBlockAddress->next->prev = NULL;
 8001148:	6a3b      	ldr	r3, [r7, #32]
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	2200      	movs	r2, #0
 800114e:	615a      	str	r2, [r3, #20]
			freeListArray[lvl] = buddyBlockAddress->next;
 8001150:	6a3b      	ldr	r3, [r7, #32]
 8001152:	691a      	ldr	r2, [r3, #16]
 8001154:	492a      	ldr	r1, [pc, #168]	@ (8001200 <coalesce+0x160>)
 8001156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			buddyBlockAddress->next = NULL;
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
 8001162:	e017      	b.n	8001194 <coalesce+0xf4>
		} else { // if free list node is in the middle of the free list (don't need to update the pointer to head of free list)
			Block* prevFreeNode = buddyBlockAddress->prev;
 8001164:	6a3b      	ldr	r3, [r7, #32]
 8001166:	695b      	ldr	r3, [r3, #20]
 8001168:	617b      	str	r3, [r7, #20]
			Block* nextNode = buddyBlockAddress->next;
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	613b      	str	r3, [r7, #16]
			prevFreeNode->next = nextNode;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	611a      	str	r2, [r3, #16]
			nextNode->prev = prevFreeNode;
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	615a      	str	r2, [r3, #20]

			buddyBlockAddress->prev = NULL;
 800117c:	6a3b      	ldr	r3, [r7, #32]
 800117e:	2200      	movs	r2, #0
 8001180:	615a      	str	r2, [r3, #20]
			buddyBlockAddress->next = NULL;
 8001182:	6a3b      	ldr	r3, [r7, #32]
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
			buddyBlockAddress->status = FREE;
 8001188:	6a3b      	ldr	r3, [r7, #32]
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
			buddyBlockAddress->tid = 0;
 800118e:	6a3b      	ldr	r3, [r7, #32]
 8001190:	2200      	movs	r2, #0
 8001192:	605a      	str	r2, [r3, #4]
		}

		// Step 2: add a free node to the level above, as we have coalesced two buddies and now we have a new combined memory region at the parent
		Block *parentMemoryBlock = getLowerAddressMemoryBlock(block, buddyBlockAddress);
 8001194:	6a39      	ldr	r1, [r7, #32]
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f858 	bl	800124c <getLowerAddressMemoryBlock>
 800119c:	60f8      	str	r0, [r7, #12]
		parentMemoryBlock->status = FREE;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
		parentMemoryBlock->tid = 0;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2200      	movs	r2, #0
 80011a8:	605a      	str	r2, [r3, #4]
		parentMemoryBlock->size = parentMemoryBlock->size * 2;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	005a      	lsls	r2, r3, #1
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	601a      	str	r2, [r3, #0]

		parentMemoryBlock->prev = NULL;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2200      	movs	r2, #0
 80011b8:	615a      	str	r2, [r3, #20]
		parentMemoryBlock->next = freeListArray[lvl - 1];
 80011ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011bc:	3b01      	subs	r3, #1
 80011be:	4a10      	ldr	r2, [pc, #64]	@ (8001200 <coalesce+0x160>)
 80011c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	611a      	str	r2, [r3, #16]
		if (parentMemoryBlock->next != NULL) {
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <coalesce+0x138>
			parentMemoryBlock->next->prev = parentMemoryBlock;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	615a      	str	r2, [r3, #20]
		}
		freeListArray[lvl - 1] = parentMemoryBlock;
 80011d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011da:	3b01      	subs	r3, #1
 80011dc:	4908      	ldr	r1, [pc, #32]	@ (8001200 <coalesce+0x160>)
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// recurse to see if we can coalesce at the level above now
		block = parentMemoryBlock;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	607b      	str	r3, [r7, #4]
	for(int lvl = level; lvl > 0; lvl--) {
 80011e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ea:	3b01      	subs	r3, #1
 80011ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f73f af64 	bgt.w	80010be <coalesce+0x1e>
	}

	return RTX_OK;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3730      	adds	r7, #48	@ 0x30
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000084 	.word	0x20000084

08001204 <getBuddyBlockAddress>:

uint32_t getBuddyBlockAddress(Block* block) {
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	uint32_t bottom_address = (uint32_t)&_img_end;
 800120c:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <getBuddyBlockAddress+0x44>)
 800120e:	60fb      	str	r3, [r7, #12]
	uint32_t xNode = ((uint32_t)block - bottom_address)/(block->size);
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	1ad2      	subs	r2, r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	fbb2 f3f3 	udiv	r3, r2, r3
 800121e:	60bb      	str	r3, [r7, #8]

	if(xNode % 2 == 0) {
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b00      	cmp	r3, #0
 8001228:	d104      	bne.n	8001234 <getBuddyBlockAddress+0x30>
		return (uint32_t)block + (uint32_t)(block->size);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	e003      	b.n	800123c <getBuddyBlockAddress+0x38>
	}

	return (uint32_t)block - (uint32_t)(block->size);
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	1ad3      	subs	r3, r2, r3
}
 800123c:	4618      	mov	r0, r3
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	20008810 	.word	0x20008810

0800124c <getLowerAddressMemoryBlock>:

Block* getLowerAddressMemoryBlock(Block* memoryBlock1, Block* memoryBlock2) {
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
	if ((uint32_t)memoryBlock1 < (uint32_t)memoryBlock2) {
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	429a      	cmp	r2, r3
 800125c:	d201      	bcs.n	8001262 <getLowerAddressMemoryBlock+0x16>
		return memoryBlock1;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	e000      	b.n	8001264 <getLowerAddressMemoryBlock+0x18>
	}

	return memoryBlock2;
 8001262:	683b      	ldr	r3, [r7, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <findStartingLevel>:
	assert(sizeOfAllocation((uint32_t)MEMORY_POOL) == (uint32_t)MEMORY_POOL);
	printf("Completed sizeOfAllocation unit test successfully \r\n");
}

// Find level to start checking for free blocks during allocation
int findStartingLevel(size_t size) {
 8001270:	b480      	push	{r7}
 8001272:	b087      	sub	sp, #28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	int bytes = sizeof(Block) + size;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3318      	adds	r3, #24
 800127c:	60fb      	str	r3, [r7, #12]
	int level = MAX_ORDER;
 800127e:	230a      	movs	r3, #10
 8001280:	617b      	str	r3, [r7, #20]
	for (int i = 32; i <= (uint32_t)MEMORY_POOL; i *= 2) {
 8001282:	2320      	movs	r3, #32
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	e00b      	b.n	80012a0 <findStartingLevel+0x30>
		if (bytes <= i) {
 8001288:	68fa      	ldr	r2, [r7, #12]
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	429a      	cmp	r2, r3
 800128e:	dc01      	bgt.n	8001294 <findStartingLevel+0x24>
			return level;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	e00a      	b.n	80012aa <findStartingLevel+0x3a>
		}
		level--;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	3b01      	subs	r3, #1
 8001298:	617b      	str	r3, [r7, #20]
	for (int i = 32; i <= (uint32_t)MEMORY_POOL; i *= 2) {
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80012a6:	d9ef      	bls.n	8001288 <findStartingLevel+0x18>
	}
	return 0;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	371c      	adds	r7, #28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <numOfAvailableTIDs>:
} TIDdispenser;

TIDdispenser kernelTIDdispenser;
Queue kernelTIDdispenserQueue;

int numOfAvailableTIDs(TIDdispenser* self){
 80012b6:	b480      	push	{r7}
 80012b8:	b087      	sub	sp, #28
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
	int maxSize = self->queue->maxSize;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	617b      	str	r3, [r7, #20]
	int head = self->queue->head;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	613b      	str	r3, [r7, #16]
	int tail = self->queue->tail;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	60fb      	str	r3, [r7, #12]

	int size = (maxSize - head + tail) % maxSize;
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad2      	subs	r2, r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4413      	add	r3, r2
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	fb93 f2f2 	sdiv	r2, r3, r2
 80012e6:	6979      	ldr	r1, [r7, #20]
 80012e8:	fb01 f202 	mul.w	r2, r1, r2
 80012ec:	1a9b      	subs	r3, r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
	return size;
 80012f0:	68bb      	ldr	r3, [r7, #8]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	371c      	adds	r7, #28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <outOfTIDs>:

bool outOfTIDs(TIDdispenser* self) {
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
	return numOfAvailableTIDs(self) == 0;
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ffd5 	bl	80012b6 <numOfAvailableTIDs>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	bf0c      	ite	eq
 8001312:	2301      	moveq	r3, #1
 8001314:	2300      	movne	r3, #0
 8001316:	b2db      	uxtb	r3, r3
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <dequeueTID>:

int dequeueTID(TIDdispenser* self) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	if (outOfTIDs(self)) {
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ffe8 	bl	80012fe <outOfTIDs>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <dequeueTID+0x18>
		return NULL;
 8001334:	2300      	movs	r3, #0
 8001336:	e021      	b.n	800137c <dequeueTID+0x5c>
	}

	int head = self->queue->head;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	617b      	str	r3, [r7, #20]
	int maxSize = self->queue->maxSize;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	613b      	str	r3, [r7, #16]

	int TID = self->array[head];
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	60fb      	str	r3, [r7, #12]
	self->array[head] = -1;
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001360:	605a      	str	r2, [r3, #4]
	self->queue->head = (head + 1) % maxSize;
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	3301      	adds	r3, #1
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	6812      	ldr	r2, [r2, #0]
 800136a:	6939      	ldr	r1, [r7, #16]
 800136c:	fb93 f1f1 	sdiv	r1, r3, r1
 8001370:	6938      	ldr	r0, [r7, #16]
 8001372:	fb00 f101 	mul.w	r1, r0, r1
 8001376:	1a5b      	subs	r3, r3, r1
 8001378:	6013      	str	r3, [r2, #0]

	return TID;
 800137a:	68fb      	ldr	r3, [r7, #12]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <enqueueTID>:

bool enqueueTID(TIDdispenser* self, int tid) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
	int maxSize = self->queue->maxSize;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	60fb      	str	r3, [r7, #12]

	if (numOfAvailableTIDs(self) == maxSize - 1) {
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ff8d 	bl	80012b6 <numOfAvailableTIDs>
 800139c:	4602      	mov	r2, r0
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d101      	bne.n	80013aa <enqueueTID+0x26>
		return false;
 80013a6:	2300      	movs	r3, #0
 80013a8:	e016      	b.n	80013d8 <enqueueTID+0x54>
	}

	int tail = self->queue->tail;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	60bb      	str	r3, [r7, #8]

	self->array[tail] = tid;
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	605a      	str	r2, [r3, #4]
	self->queue->tail = (tail + 1) % maxSize;
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	3301      	adds	r3, #1
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	6812      	ldr	r2, [r2, #0]
 80013c6:	68f9      	ldr	r1, [r7, #12]
 80013c8:	fb93 f1f1 	sdiv	r1, r3, r1
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	fb00 f101 	mul.w	r1, r0, r1
 80013d2:	1a5b      	subs	r3, r3, r1
 80013d4:	6053      	str	r3, [r2, #4]
	return true;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <initTIDdispenser>:

// Initialize TID dispenser data structure
void initTIDdispenser(TIDdispenser* self) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	kernelTIDdispenserQueue.head = 0;
 80013e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <initTIDdispenser+0x44>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
	kernelTIDdispenserQueue.tail = 0;
 80013ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <initTIDdispenser+0x44>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	605a      	str	r2, [r3, #4]
	kernelTIDdispenserQueue.maxSize = MAX_TASKS + 1; // in a circular queue, we sacrifice one extra space to differentiate between full and empty
 80013f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <initTIDdispenser+0x44>)
 80013f6:	2211      	movs	r2, #17
 80013f8:	609a      	str	r2, [r3, #8]
												  // 16 TIDs total
	self->queue = &kernelTIDdispenserQueue;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a09      	ldr	r2, [pc, #36]	@ (8001424 <initTIDdispenser+0x44>)
 80013fe:	601a      	str	r2, [r3, #0]

	// initialize queue to NULL values
	for(int i = 0; i < MAX_TASKS; i++) {
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	e006      	b.n	8001414 <initTIDdispenser+0x34>
		enqueueTID(&kernelTIDdispenser, i);
 8001406:	68f9      	ldr	r1, [r7, #12]
 8001408:	4807      	ldr	r0, [pc, #28]	@ (8001428 <initTIDdispenser+0x48>)
 800140a:	f7ff ffbb 	bl	8001384 <enqueueTID>
	for(int i = 0; i < MAX_TASKS; i++) {
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	3301      	adds	r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2b0f      	cmp	r3, #15
 8001418:	ddf5      	ble.n	8001406 <initTIDdispenser+0x26>
	}
}
 800141a:	bf00      	nop
 800141c:	bf00      	nop
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000110 	.word	0x20000110
 8001428:	200000c8 	.word	0x200000c8

0800142c <do_nothing>:
}

// from osSleep function definition in lab manual
// "if no tasks are available to run (that is, all tasks are sleeping), the expected behaviour"
// "is for the NULL task to run until a task emerges from sleep"
void do_nothing(void) {
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
	while(1) {
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <do_nothing+0x4>

08001434 <osKernelInit>:

// osKernelInit function initializes the following kernel-level data structures
// TaskScheduler (queue) -> holds tasks ready to be run
// TCBarray (array) -> holds created tasks that exist in our main stack. Includes both active and dormant tasks
// TIDdispenser (queue) -> helps assign TIDs when tasks are created
void osKernelInit(void) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
	//Interrupt setting
	SHPR3 = (SHPR3 & ~(0xFFU << 24)) | (0xF0U << 24);//SysTick is lowest priority (highest number)
 800143a:	4b21      	ldr	r3, [pc, #132]	@ (80014c0 <osKernelInit+0x8c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001442:	4a1f      	ldr	r2, [pc, #124]	@ (80014c0 <osKernelInit+0x8c>)
 8001444:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8001448:	6013      	str	r3, [r2, #0]
	SHPR3 = (SHPR3 & ~(0xFFU << 16)) | (0xE0U << 16);//PendSV is in the middle
 800144a:	4b1d      	ldr	r3, [pc, #116]	@ (80014c0 <osKernelInit+0x8c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001452:	4a1b      	ldr	r2, [pc, #108]	@ (80014c0 <osKernelInit+0x8c>)
 8001454:	f443 0360 	orr.w	r3, r3, #14680064	@ 0xe00000
 8001458:	6013      	str	r3, [r2, #0]

	SHPR2 = (SHPR2 & ~(0xFFU << 24)) | (0xD0U << 24);//SVC is highest priority (lowest number)
 800145a:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <osKernelInit+0x90>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001462:	4a18      	ldr	r2, [pc, #96]	@ (80014c4 <osKernelInit+0x90>)
 8001464:	f043 4350 	orr.w	r3, r3, #3489660928	@ 0xd0000000
 8001468:	6013      	str	r3, [r2, #0]

	initTaskScheduler(&kernelTaskScheduler);
 800146a:	4817      	ldr	r0, [pc, #92]	@ (80014c8 <osKernelInit+0x94>)
 800146c:	f000 fdd8 	bl	8002020 <initTaskScheduler>
	initSleepTaskScheduler(&kernelSleepTaskScheduler);
 8001470:	4816      	ldr	r0, [pc, #88]	@ (80014cc <osKernelInit+0x98>)
 8001472:	f000 fdfd 	bl	8002070 <initSleepTaskScheduler>
	initTCBarray(&kernelTCBarray);
 8001476:	4816      	ldr	r0, [pc, #88]	@ (80014d0 <osKernelInit+0x9c>)
 8001478:	f001 f832 	bl	80024e0 <initTCBarray>
	initTIDdispenser(&kernelTIDdispenser);
 800147c:	4815      	ldr	r0, [pc, #84]	@ (80014d4 <osKernelInit+0xa0>)
 800147e:	f7ff ffaf 	bl	80013e0 <initTIDdispenser>

	// Setup the null task
	TCB nullTask;
	nullTask.ptask = (uint32_t)do_nothing;
 8001482:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <osKernelInit+0xa4>)
 8001484:	603b      	str	r3, [r7, #0]
	nullTask.stack_size = STACK_SIZE;
 8001486:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800148a:	81fb      	strh	r3, [r7, #14]
	osCreateTask(&nullTask); //Maximum integer size deadline
 800148c:	463b      	mov	r3, r7
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f82a 	bl	80014e8 <osCreateTask>

	stackPointer = *(uint32_t**)0x0;
 8001494:	2300      	movs	r3, #0
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a10      	ldr	r2, [pc, #64]	@ (80014dc <osKernelInit+0xa8>)
 800149a:	6013      	str	r3, [r2, #0]
	stackPointer = stackPointer - (uint32_t)MAIN_STACK_SIZE;
 800149c:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <osKernelInit+0xa8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 80014a4:	4a0d      	ldr	r2, [pc, #52]	@ (80014dc <osKernelInit+0xa8>)
 80014a6:	6013      	str	r3, [r2, #0]
	runningTask = NULL;
 80014a8:	4b0d      	ldr	r3, [pc, #52]	@ (80014e0 <osKernelInit+0xac>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
	kernelInitialized = true;
 80014ae:	4b0d      	ldr	r3, [pc, #52]	@ (80014e4 <osKernelInit+0xb0>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

	k_mem_init();
 80014b4:	f7ff fc72 	bl	8000d9c <k_mem_init>
}
 80014b8:	bf00      	nop
 80014ba:	3720      	adds	r7, #32
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	e000ed20 	.word	0xe000ed20
 80014c4:	e000ed1c 	.word	0xe000ed1c
 80014c8:	20000124 	.word	0x20000124
 80014cc:	20000170 	.word	0x20000170
 80014d0:	200001bc 	.word	0x200001bc
 80014d4:	200000c8 	.word	0x200000c8
 80014d8:	0800142d 	.word	0x0800142d
 80014dc:	200000b4 	.word	0x200000b4
 80014e0:	200000b8 	.word	0x200000b8
 80014e4:	200000b0 	.word	0x200000b0

080014e8 <osCreateTask>:

	return runningTask->tid;
}

// osCreateTask
int osCreateTask(TCB* task) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	@ 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	timerResume = false;
 80014f0:	4b88      	ldr	r3, [pc, #544]	@ (8001714 <osCreateTask+0x22c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
	if (task == NULL) {
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d108      	bne.n	800150e <osCreateTask+0x26>
		if (kernelStarted) {
 80014fc:	4b86      	ldr	r3, [pc, #536]	@ (8001718 <osCreateTask+0x230>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <osCreateTask+0x22>
			timerResume = true;
 8001504:	4b83      	ldr	r3, [pc, #524]	@ (8001714 <osCreateTask+0x22c>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]
		}
		return RTX_ERR;
 800150a:	2300      	movs	r3, #0
 800150c:	e0fd      	b.n	800170a <osCreateTask+0x222>
	}

	if (hasReachedMaxActiveTasks(&kernelTCBarray)) {
 800150e:	4883      	ldr	r0, [pc, #524]	@ (800171c <osCreateTask+0x234>)
 8001510:	f001 f81f 	bl	8002552 <hasReachedMaxActiveTasks>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d008      	beq.n	800152c <osCreateTask+0x44>
		if (kernelStarted) {
 800151a:	4b7f      	ldr	r3, [pc, #508]	@ (8001718 <osCreateTask+0x230>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d002      	beq.n	8001528 <osCreateTask+0x40>
			timerResume = true;
 8001522:	4b7c      	ldr	r3, [pc, #496]	@ (8001714 <osCreateTask+0x22c>)
 8001524:	2201      	movs	r2, #1
 8001526:	601a      	str	r2, [r3, #0]
		}
		return RTX_ERR;
 8001528:	2300      	movs	r3, #0
 800152a:	e0ee      	b.n	800170a <osCreateTask+0x222>
	}

	if (outOfTIDs(&kernelTIDdispenser)) {
 800152c:	487c      	ldr	r0, [pc, #496]	@ (8001720 <osCreateTask+0x238>)
 800152e:	f7ff fee6 	bl	80012fe <outOfTIDs>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d008      	beq.n	800154a <osCreateTask+0x62>
		if (kernelStarted) {
 8001538:	4b77      	ldr	r3, [pc, #476]	@ (8001718 <osCreateTask+0x230>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d002      	beq.n	8001546 <osCreateTask+0x5e>
			timerResume = true;
 8001540:	4b74      	ldr	r3, [pc, #464]	@ (8001714 <osCreateTask+0x22c>)
 8001542:	2201      	movs	r2, #1
 8001544:	601a      	str	r2, [r3, #0]
		}
		return RTX_ERR;
 8001546:	2300      	movs	r3, #0
 8001548:	e0df      	b.n	800170a <osCreateTask+0x222>
	}

	if (isFull(&kernelTaskScheduler)) {
 800154a:	4876      	ldr	r0, [pc, #472]	@ (8001724 <osCreateTask+0x23c>)
 800154c:	f000 fdca 	bl	80020e4 <isFull>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d008      	beq.n	8001568 <osCreateTask+0x80>
		if (kernelStarted) {
 8001556:	4b70      	ldr	r3, [pc, #448]	@ (8001718 <osCreateTask+0x230>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d002      	beq.n	8001564 <osCreateTask+0x7c>
			timerResume = true;
 800155e:	4b6d      	ldr	r3, [pc, #436]	@ (8001714 <osCreateTask+0x22c>)
 8001560:	2201      	movs	r2, #1
 8001562:	601a      	str	r2, [r3, #0]
		}
		return RTX_ERR;
 8001564:	2300      	movs	r3, #0
 8001566:	e0d0      	b.n	800170a <osCreateTask+0x222>
	}

	if (task->stack_size < STACK_SIZE) {
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	89db      	ldrh	r3, [r3, #14]
 800156c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001570:	d208      	bcs.n	8001584 <osCreateTask+0x9c>
		if (kernelStarted) {
 8001572:	4b69      	ldr	r3, [pc, #420]	@ (8001718 <osCreateTask+0x230>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d002      	beq.n	8001580 <osCreateTask+0x98>
			timerResume = true;
 800157a:	4b66      	ldr	r3, [pc, #408]	@ (8001714 <osCreateTask+0x22c>)
 800157c:	2201      	movs	r2, #1
 800157e:	601a      	str	r2, [r3, #0]
		}
		return RTX_ERR;
 8001580:	2300      	movs	r3, #0
 8001582:	e0c2      	b.n	800170a <osCreateTask+0x222>
	}

	if (task->ptask == NULL) {
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d108      	bne.n	800159e <osCreateTask+0xb6>
		if (kernelStarted) {
 800158c:	4b62      	ldr	r3, [pc, #392]	@ (8001718 <osCreateTask+0x230>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d002      	beq.n	800159a <osCreateTask+0xb2>
			timerResume = true;
 8001594:	4b5f      	ldr	r3, [pc, #380]	@ (8001714 <osCreateTask+0x22c>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]
		}
		return RTX_ERR;
 800159a:	2300      	movs	r3, #0
 800159c:	e0b5      	b.n	800170a <osCreateTask+0x222>
	}

	// prioritize dormant replacements first
	int dormantTaskIndex = canReplaceDormantTaskInStack(&kernelTCBarray, task);
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	485e      	ldr	r0, [pc, #376]	@ (800171c <osCreateTask+0x234>)
 80015a2:	f001 f86f 	bl	8002684 <canReplaceDormantTaskInStack>
 80015a6:	6278      	str	r0, [r7, #36]	@ 0x24
	if (dormantTaskIndex >= 0) {
 80015a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	db46      	blt.n	800163c <osCreateTask+0x154>
		task->alloc_point = k_mem_alloc(task->stack_size);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	89db      	ldrh	r3, [r3, #14]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fc30 	bl	8000e18 <k_mem_alloc>
 80015b8:	4603      	mov	r3, r0
 80015ba:	461a      	mov	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	615a      	str	r2, [r3, #20]
		if (task->alloc_point == NULL) {
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d108      	bne.n	80015da <osCreateTask+0xf2>
			if (kernelStarted) {
 80015c8:	4b53      	ldr	r3, [pc, #332]	@ (8001718 <osCreateTask+0x230>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d002      	beq.n	80015d6 <osCreateTask+0xee>
				timerResume = true;
 80015d0:	4b50      	ldr	r3, [pc, #320]	@ (8001714 <osCreateTask+0x22c>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
			}
			return RTX_ERR;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e097      	b.n	800170a <osCreateTask+0x222>
		}

		Block *metadata = (Block *)(task->alloc_point) - 1;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	3b18      	subs	r3, #24
 80015e0:	617b      	str	r3, [r7, #20]
		task->stack_high = task->alloc_point + metadata->size - sizeof(Block);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695a      	ldr	r2, [r3, #20]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	f1a3 0218 	sub.w	r2, r3, #24
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	605a      	str	r2, [r3, #4]
		int TID = dequeueTID(&kernelTIDdispenser);
 80015f4:	484a      	ldr	r0, [pc, #296]	@ (8001720 <osCreateTask+0x238>)
 80015f6:	f7ff fe93 	bl	8001320 <dequeueTID>
 80015fa:	6138      	str	r0, [r7, #16]
		task->tid = TID;
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	609a      	str	r2, [r3, #8]
		metadata->tid = TID;
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	605a      	str	r2, [r3, #4]
		task->deadline = 5; // should be 5ms
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2205      	movs	r2, #5
 800160c:	619a      	str	r2, [r3, #24]
		task->remaining_time = 5; // should be 5ms
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2205      	movs	r2, #5
 8001612:	61da      	str	r2, [r3, #28]
		TCB* replacedTCB = replaceDormantTaskInStack(&kernelTCBarray, task, dormantTaskIndex);
 8001614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	4840      	ldr	r0, [pc, #256]	@ (800171c <osCreateTask+0x234>)
 800161a:	f001 f864 	bl	80026e6 <replaceDormantTaskInStack>
 800161e:	60f8      	str	r0, [r7, #12]
		insert(&kernelTaskScheduler, replacedTCB);
 8001620:	68f9      	ldr	r1, [r7, #12]
 8001622:	4840      	ldr	r0, [pc, #256]	@ (8001724 <osCreateTask+0x23c>)
 8001624:	f000 fe24 	bl	8002270 <insert>
//		enqueue(&kernelTaskScheduler, replacedTCB);
		if (kernelStarted) {
 8001628:	4b3b      	ldr	r3, [pc, #236]	@ (8001718 <osCreateTask+0x230>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <osCreateTask+0x150>
			__asm("SVC #3"); // Context Switch
 8001630:	df03      	svc	3

			// enable interrupt
			timerResume = true;
 8001632:	4b38      	ldr	r3, [pc, #224]	@ (8001714 <osCreateTask+0x22c>)
 8001634:	2201      	movs	r2, #1
 8001636:	601a      	str	r2, [r3, #0]
		}
		return RTX_OK;
 8001638:	2301      	movs	r3, #1
 800163a:	e066      	b.n	800170a <osCreateTask+0x222>
	}

	if (canAppendToStack(&kernelTCBarray, task)) {
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	4837      	ldr	r0, [pc, #220]	@ (800171c <osCreateTask+0x234>)
 8001640:	f000 ff99 	bl	8002576 <canAppendToStack>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d05b      	beq.n	8001702 <osCreateTask+0x21a>
		int TID = dequeueTID(&kernelTIDdispenser);
 800164a:	4835      	ldr	r0, [pc, #212]	@ (8001720 <osCreateTask+0x238>)
 800164c:	f7ff fe68 	bl	8001320 <dequeueTID>
 8001650:	6238      	str	r0, [r7, #32]
		task->tid = TID;
 8001652:	6a3a      	ldr	r2, [r7, #32]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	609a      	str	r2, [r3, #8]
		if (TID == 0) {
 8001658:	6a3b      	ldr	r3, [r7, #32]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d112      	bne.n	8001684 <osCreateTask+0x19c>
			task->deadline = 2147483647;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001664:	619a      	str	r2, [r3, #24]
			task->remaining_time = 2147483647;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800166c:	61da      	str	r2, [r3, #28]
			task->stack_high = kernelTCBarray.p_currentStackSize;
 800166e:	4b2b      	ldr	r3, [pc, #172]	@ (800171c <osCreateTask+0x234>)
 8001670:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001672:	461a      	mov	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	605a      	str	r2, [r3, #4]
			task->alloc_point = kernelTCBarray.p_currentStackSize;
 8001678:	4b28      	ldr	r3, [pc, #160]	@ (800171c <osCreateTask+0x234>)
 800167a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800167c:	461a      	mov	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	615a      	str	r2, [r3, #20]
 8001682:	e02b      	b.n	80016dc <osCreateTask+0x1f4>
		} else {
			task->alloc_point = k_mem_alloc(task->stack_size);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	89db      	ldrh	r3, [r3, #14]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fbc5 	bl	8000e18 <k_mem_alloc>
 800168e:	4603      	mov	r3, r0
 8001690:	461a      	mov	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	615a      	str	r2, [r3, #20]
			if (task->alloc_point == NULL) {
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d108      	bne.n	80016b0 <osCreateTask+0x1c8>
				if (kernelStarted) {
 800169e:	4b1e      	ldr	r3, [pc, #120]	@ (8001718 <osCreateTask+0x230>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d002      	beq.n	80016ac <osCreateTask+0x1c4>
					timerResume = true;
 80016a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <osCreateTask+0x22c>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]
				}
				return RTX_ERR;
 80016ac:	2300      	movs	r3, #0
 80016ae:	e02c      	b.n	800170a <osCreateTask+0x222>
			}

			Block *metadata = (Block *)(task->alloc_point) - 1;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	3b18      	subs	r3, #24
 80016b6:	61fb      	str	r3, [r7, #28]
			task->stack_high = task->alloc_point + metadata->size - sizeof(Block);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	695a      	ldr	r2, [r3, #20]
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4413      	add	r3, r2
 80016c2:	f1a3 0218 	sub.w	r2, r3, #24
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	605a      	str	r2, [r3, #4]

			metadata->tid = TID;
 80016ca:	6a3a      	ldr	r2, [r7, #32]
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	605a      	str	r2, [r3, #4]
			task->deadline = 5;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2205      	movs	r2, #5
 80016d4:	619a      	str	r2, [r3, #24]
			task->remaining_time = 5;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2205      	movs	r2, #5
 80016da:	61da      	str	r2, [r3, #28]
		}
		TCB* appendedTCB = appendToStack(&kernelTCBarray, task);
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	480f      	ldr	r0, [pc, #60]	@ (800171c <osCreateTask+0x234>)
 80016e0:	f000 ff64 	bl	80025ac <appendToStack>
 80016e4:	61b8      	str	r0, [r7, #24]
		insert(&kernelTaskScheduler, appendedTCB);
 80016e6:	69b9      	ldr	r1, [r7, #24]
 80016e8:	480e      	ldr	r0, [pc, #56]	@ (8001724 <osCreateTask+0x23c>)
 80016ea:	f000 fdc1 	bl	8002270 <insert>
//		enqueue(&kernelTaskScheduler, appendedTCB);

		if (kernelStarted) {
 80016ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001718 <osCreateTask+0x230>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <osCreateTask+0x216>
			__asm("SVC #3"); // Context Switch
 80016f6:	df03      	svc	3

			// enable interrupt
			timerResume = true;
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <osCreateTask+0x22c>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	601a      	str	r2, [r3, #0]
		}
		return RTX_OK;
 80016fe:	2301      	movs	r3, #1
 8001700:	e003      	b.n	800170a <osCreateTask+0x222>
	}

	timerResume = true;
 8001702:	4b04      	ldr	r3, [pc, #16]	@ (8001714 <osCreateTask+0x22c>)
 8001704:	2201      	movs	r2, #1
 8001706:	601a      	str	r2, [r3, #0]
	return RTX_ERR;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3728      	adds	r7, #40	@ 0x28
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200000c0 	.word	0x200000c0
 8001718:	200000bc 	.word	0x200000bc
 800171c:	200001bc 	.word	0x200001bc
 8001720:	200000c8 	.word	0x200000c8
 8001724:	20000124 	.word	0x20000124

08001728 <osKernelStart>:

int osKernelStart(void) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0

	if (kernelInitialized == false) {
 800172e:	4b2c      	ldr	r3, [pc, #176]	@ (80017e0 <osKernelStart+0xb8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <osKernelStart+0x12>
		return RTX_ERR;
 8001736:	2300      	movs	r3, #0
 8001738:	e04e      	b.n	80017d8 <osKernelStart+0xb0>
	}

	if (kernelStarted == true) {
 800173a:	4b2a      	ldr	r3, [pc, #168]	@ (80017e4 <osKernelStart+0xbc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d101      	bne.n	8001746 <osKernelStart+0x1e>
		return RTX_ERR;
 8001742:	2300      	movs	r3, #0
 8001744:	e048      	b.n	80017d8 <osKernelStart+0xb0>
	}

	if (isEmpty(&kernelTaskScheduler)) {
 8001746:	4828      	ldr	r0, [pc, #160]	@ (80017e8 <osKernelStart+0xc0>)
 8001748:	f000 fcba 	bl	80020c0 <isEmpty>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <osKernelStart+0x2e>
		return RTX_ERR;
 8001752:	2300      	movs	r3, #0
 8001754:	e040      	b.n	80017d8 <osKernelStart+0xb0>
	}

	runningTask = getMinRemainingTimeTask(&kernelTaskScheduler);
 8001756:	4824      	ldr	r0, [pc, #144]	@ (80017e8 <osKernelStart+0xc0>)
 8001758:	f000 fe28 	bl	80023ac <getMinRemainingTimeTask>
 800175c:	4603      	mov	r3, r0
 800175e:	461a      	mov	r2, r3
 8001760:	4b22      	ldr	r3, [pc, #136]	@ (80017ec <osKernelStart+0xc4>)
 8001762:	601a      	str	r2, [r3, #0]
	setTCBState(&kernelTCBarray, RUNNING, runningTask->tid);
 8001764:	4b21      	ldr	r3, [pc, #132]	@ (80017ec <osKernelStart+0xc4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	461a      	mov	r2, r3
 800176c:	2102      	movs	r1, #2
 800176e:	4820      	ldr	r0, [pc, #128]	@ (80017f0 <osKernelStart+0xc8>)
 8001770:	f001 f833 	bl	80027da <setTCBState>
	runningTask->state = RUNNING; // This is redundant
 8001774:	4b1d      	ldr	r3, [pc, #116]	@ (80017ec <osKernelStart+0xc4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2202      	movs	r2, #2
 800177a:	731a      	strb	r2, [r3, #12]

	for(int i = 0; i<kernelTaskScheduler.heap->currentSize; i++) {
 800177c:	2300      	movs	r3, #0
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	e010      	b.n	80017a4 <osKernelStart+0x7c>
		if (kernelTaskScheduler.array[i]->tid != 0) {
 8001782:	4a19      	ldr	r2, [pc, #100]	@ (80017e8 <osKernelStart+0xc0>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d006      	beq.n	800179e <osKernelStart+0x76>
			kernelTaskScheduler.array[i]->remaining_time++;
 8001790:	4a15      	ldr	r2, [pc, #84]	@ (80017e8 <osKernelStart+0xc0>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001798:	69da      	ldr	r2, [r3, #28]
 800179a:	3201      	adds	r2, #1
 800179c:	61da      	str	r2, [r3, #28]
	for(int i = 0; i<kernelTaskScheduler.heap->currentSize; i++) {
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3301      	adds	r3, #1
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	4b10      	ldr	r3, [pc, #64]	@ (80017e8 <osKernelStart+0xc0>)
 80017a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	dbe8      	blt.n	8001782 <osKernelStart+0x5a>
		}
	}

	stackPointer = (uint32_t)runningTask->thread_stackptr;
 80017b0:	4b0e      	ldr	r3, [pc, #56]	@ (80017ec <osKernelStart+0xc4>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	4a0f      	ldr	r2, [pc, #60]	@ (80017f4 <osKernelStart+0xcc>)
 80017b8:	6013      	str	r3, [r2, #0]
	__set_PSP(stackPointer);
 80017ba:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <osKernelStart+0xcc>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	f383 8809 	msr	PSP, r3
}
 80017c6:	bf00      	nop
	kernelStarted = true;
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <osKernelStart+0xbc>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	601a      	str	r2, [r3, #0]
	timerResume = true;
 80017ce:	4b0a      	ldr	r3, [pc, #40]	@ (80017f8 <osKernelStart+0xd0>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	601a      	str	r2, [r3, #0]

	__asm("SVC #2");
 80017d4:	df02      	svc	2

	return RTX_OK;
 80017d6:	2301      	movs	r3, #1
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	200000b0 	.word	0x200000b0
 80017e4:	200000bc 	.word	0x200000bc
 80017e8:	20000124 	.word	0x20000124
 80017ec:	200000b8 	.word	0x200000b8
 80017f0:	200001bc 	.word	0x200001bc
 80017f4:	200000b4 	.word	0x200000b4
 80017f8:	200000c0 	.word	0x200000c0

080017fc <osTaskExit>:
	__asm("SVC #1");
	timerResume = true;
}

// osTaskExit
int osTaskExit(void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
	if (runningTask == NULL) {
 8001800:	4b14      	ldr	r3, [pc, #80]	@ (8001854 <osTaskExit+0x58>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <osTaskExit+0x10>
		return RTX_ERR;
 8001808:	2300      	movs	r3, #0
 800180a:	e020      	b.n	800184e <osTaskExit+0x52>
	}
	timerResume = false;
 800180c:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <osTaskExit+0x5c>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
	// Find TCB copy in TCB array and set to dormant.
	runningTask->state = DORMANT;
 8001812:	4b10      	ldr	r3, [pc, #64]	@ (8001854 <osTaskExit+0x58>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2200      	movs	r2, #0
 8001818:	731a      	strb	r2, [r3, #12]
	setTCBState(&kernelTCBarray, DORMANT, runningTask->tid);
 800181a:	4b0e      	ldr	r3, [pc, #56]	@ (8001854 <osTaskExit+0x58>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	461a      	mov	r2, r3
 8001822:	2100      	movs	r1, #0
 8001824:	480d      	ldr	r0, [pc, #52]	@ (800185c <osTaskExit+0x60>)
 8001826:	f000 ffd8 	bl	80027da <setTCBState>
	enqueueTID(&kernelTIDdispenser, runningTask->tid);
 800182a:	4b0a      	ldr	r3, [pc, #40]	@ (8001854 <osTaskExit+0x58>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4619      	mov	r1, r3
 8001832:	480b      	ldr	r0, [pc, #44]	@ (8001860 <osTaskExit+0x64>)
 8001834:	f7ff fda6 	bl	8001384 <enqueueTID>

	// deallocate memory
	k_mem_dealloc(runningTask->alloc_point);
 8001838:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <osTaskExit+0x58>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fbcc 	bl	8000fdc <k_mem_dealloc>
//	__set_PSP((uint32_t)(runningTask->stack_high));
	__asm("SVC #1");
 8001844:	df01      	svc	1
	timerResume = true;
 8001846:	4b04      	ldr	r3, [pc, #16]	@ (8001858 <osTaskExit+0x5c>)
 8001848:	2201      	movs	r2, #1
 800184a:	601a      	str	r2, [r3, #0]
	return RTX_OK;
 800184c:	2301      	movs	r3, #1
}
 800184e:	4618      	mov	r0, r3
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200000b8 	.word	0x200000b8
 8001858:	200000c0 	.word	0x200000c0
 800185c:	200001bc 	.word	0x200001bc
 8001860:	200000c8 	.word	0x200000c8

08001864 <osCreateDeadlineTask>:
	// enable interrupt
	timerResume = true;
	return RTX_ERR;
}

int osCreateDeadlineTask(int deadline, TCB* task) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	@ 0x28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
	timerResume = false;	// disable interrupt
 800186e:	4b83      	ldr	r3, [pc, #524]	@ (8001a7c <osCreateDeadlineTask+0x218>)
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]

	if (task == NULL) {
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d108      	bne.n	800188c <osCreateDeadlineTask+0x28>
		if (kernelStarted) {
 800187a:	4b81      	ldr	r3, [pc, #516]	@ (8001a80 <osCreateDeadlineTask+0x21c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d002      	beq.n	8001888 <osCreateDeadlineTask+0x24>
			timerResume = true;
 8001882:	4b7e      	ldr	r3, [pc, #504]	@ (8001a7c <osCreateDeadlineTask+0x218>)
 8001884:	2201      	movs	r2, #1
 8001886:	601a      	str	r2, [r3, #0]
		}
		return RTX_ERR;
 8001888:	2300      	movs	r3, #0
 800188a:	e0f3      	b.n	8001a74 <osCreateDeadlineTask+0x210>
	}

	if (hasReachedMaxActiveTasks(&kernelTCBarray)) {
 800188c:	487d      	ldr	r0, [pc, #500]	@ (8001a84 <osCreateDeadlineTask+0x220>)
 800188e:	f000 fe60 	bl	8002552 <hasReachedMaxActiveTasks>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d008      	beq.n	80018aa <osCreateDeadlineTask+0x46>
		if (kernelStarted) {
 8001898:	4b79      	ldr	r3, [pc, #484]	@ (8001a80 <osCreateDeadlineTask+0x21c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d002      	beq.n	80018a6 <osCreateDeadlineTask+0x42>
			timerResume = true;
 80018a0:	4b76      	ldr	r3, [pc, #472]	@ (8001a7c <osCreateDeadlineTask+0x218>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	601a      	str	r2, [r3, #0]
		}
		return RTX_ERR;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e0e4      	b.n	8001a74 <osCreateDeadlineTask+0x210>
	}

	if (outOfTIDs(&kernelTIDdispenser)) {
 80018aa:	4877      	ldr	r0, [pc, #476]	@ (8001a88 <osCreateDeadlineTask+0x224>)
 80018ac:	f7ff fd27 	bl	80012fe <outOfTIDs>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d008      	beq.n	80018c8 <osCreateDeadlineTask+0x64>
		if (kernelStarted) {
 80018b6:	4b72      	ldr	r3, [pc, #456]	@ (8001a80 <osCreateDeadlineTask+0x21c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d002      	beq.n	80018c4 <osCreateDeadlineTask+0x60>
			timerResume = true;
 80018be:	4b6f      	ldr	r3, [pc, #444]	@ (8001a7c <osCreateDeadlineTask+0x218>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	601a      	str	r2, [r3, #0]
		}
		return RTX_ERR;
 80018c4:	2300      	movs	r3, #0
 80018c6:	e0d5      	b.n	8001a74 <osCreateDeadlineTask+0x210>
	}

	if (isFull(&kernelTaskScheduler)) {
 80018c8:	4870      	ldr	r0, [pc, #448]	@ (8001a8c <osCreateDeadlineTask+0x228>)
 80018ca:	f000 fc0b 	bl	80020e4 <isFull>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d008      	beq.n	80018e6 <osCreateDeadlineTask+0x82>
		if (kernelStarted) {
 80018d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001a80 <osCreateDeadlineTask+0x21c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d002      	beq.n	80018e2 <osCreateDeadlineTask+0x7e>
			timerResume = true;
 80018dc:	4b67      	ldr	r3, [pc, #412]	@ (8001a7c <osCreateDeadlineTask+0x218>)
 80018de:	2201      	movs	r2, #1
 80018e0:	601a      	str	r2, [r3, #0]
		}
		return RTX_ERR;
 80018e2:	2300      	movs	r3, #0
 80018e4:	e0c6      	b.n	8001a74 <osCreateDeadlineTask+0x210>
	}

	if (task->stack_size < STACK_SIZE) {
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	89db      	ldrh	r3, [r3, #14]
 80018ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018ee:	d208      	bcs.n	8001902 <osCreateDeadlineTask+0x9e>
		if (kernelStarted) {
 80018f0:	4b63      	ldr	r3, [pc, #396]	@ (8001a80 <osCreateDeadlineTask+0x21c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d002      	beq.n	80018fe <osCreateDeadlineTask+0x9a>
			timerResume = true;
 80018f8:	4b60      	ldr	r3, [pc, #384]	@ (8001a7c <osCreateDeadlineTask+0x218>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
		}
		return RTX_ERR;
 80018fe:	2300      	movs	r3, #0
 8001900:	e0b8      	b.n	8001a74 <osCreateDeadlineTask+0x210>
	}

	if (task->ptask == NULL) {
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d108      	bne.n	800191c <osCreateDeadlineTask+0xb8>
		if (kernelStarted) {
 800190a:	4b5d      	ldr	r3, [pc, #372]	@ (8001a80 <osCreateDeadlineTask+0x21c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d002      	beq.n	8001918 <osCreateDeadlineTask+0xb4>
			timerResume = true;
 8001912:	4b5a      	ldr	r3, [pc, #360]	@ (8001a7c <osCreateDeadlineTask+0x218>)
 8001914:	2201      	movs	r2, #1
 8001916:	601a      	str	r2, [r3, #0]
		}
		return RTX_ERR;
 8001918:	2300      	movs	r3, #0
 800191a:	e0ab      	b.n	8001a74 <osCreateDeadlineTask+0x210>
	}

	if (deadline <= 0) {
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	dc08      	bgt.n	8001934 <osCreateDeadlineTask+0xd0>
		if (kernelStarted) {
 8001922:	4b57      	ldr	r3, [pc, #348]	@ (8001a80 <osCreateDeadlineTask+0x21c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d002      	beq.n	8001930 <osCreateDeadlineTask+0xcc>
			timerResume = true;
 800192a:	4b54      	ldr	r3, [pc, #336]	@ (8001a7c <osCreateDeadlineTask+0x218>)
 800192c:	2201      	movs	r2, #1
 800192e:	601a      	str	r2, [r3, #0]
		}
		return RTX_ERR;
 8001930:	2300      	movs	r3, #0
 8001932:	e09f      	b.n	8001a74 <osCreateDeadlineTask+0x210>
	}

	int dormantTaskIndex = canReplaceDormantTaskInStack(&kernelTCBarray, task);
 8001934:	6839      	ldr	r1, [r7, #0]
 8001936:	4853      	ldr	r0, [pc, #332]	@ (8001a84 <osCreateDeadlineTask+0x220>)
 8001938:	f000 fea4 	bl	8002684 <canReplaceDormantTaskInStack>
 800193c:	6278      	str	r0, [r7, #36]	@ 0x24
	if (dormantTaskIndex >= 0) {
 800193e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001940:	2b00      	cmp	r3, #0
 8001942:	db46      	blt.n	80019d2 <osCreateDeadlineTask+0x16e>
		task->alloc_point = k_mem_alloc(task->stack_size);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	89db      	ldrh	r3, [r3, #14]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fa65 	bl	8000e18 <k_mem_alloc>
 800194e:	4603      	mov	r3, r0
 8001950:	461a      	mov	r2, r3
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	615a      	str	r2, [r3, #20]
		if (task->alloc_point == NULL) {
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d108      	bne.n	8001970 <osCreateDeadlineTask+0x10c>
			if (kernelStarted) {
 800195e:	4b48      	ldr	r3, [pc, #288]	@ (8001a80 <osCreateDeadlineTask+0x21c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <osCreateDeadlineTask+0x108>
				timerResume = true;
 8001966:	4b45      	ldr	r3, [pc, #276]	@ (8001a7c <osCreateDeadlineTask+0x218>)
 8001968:	2201      	movs	r2, #1
 800196a:	601a      	str	r2, [r3, #0]
			}
			return RTX_ERR;
 800196c:	2300      	movs	r3, #0
 800196e:	e081      	b.n	8001a74 <osCreateDeadlineTask+0x210>
		}

		Block *metadata = (Block *)(task->alloc_point) - 1;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	3b18      	subs	r3, #24
 8001976:	617b      	str	r3, [r7, #20]
		task->stack_high = task->alloc_point + metadata->size - sizeof(Block);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	695a      	ldr	r2, [r3, #20]
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4413      	add	r3, r2
 8001982:	f1a3 0218 	sub.w	r2, r3, #24
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	605a      	str	r2, [r3, #4]
		int TID = dequeueTID(&kernelTIDdispenser);
 800198a:	483f      	ldr	r0, [pc, #252]	@ (8001a88 <osCreateDeadlineTask+0x224>)
 800198c:	f7ff fcc8 	bl	8001320 <dequeueTID>
 8001990:	6138      	str	r0, [r7, #16]
		task->tid = TID;
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	609a      	str	r2, [r3, #8]
		metadata->tid = TID;
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	605a      	str	r2, [r3, #4]
		task->deadline = deadline;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	619a      	str	r2, [r3, #24]
		task->remaining_time = deadline;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	61da      	str	r2, [r3, #28]
		TCB* replacedTCB = replaceDormantTaskInStack(&kernelTCBarray, task, dormantTaskIndex);
 80019aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019ac:	6839      	ldr	r1, [r7, #0]
 80019ae:	4835      	ldr	r0, [pc, #212]	@ (8001a84 <osCreateDeadlineTask+0x220>)
 80019b0:	f000 fe99 	bl	80026e6 <replaceDormantTaskInStack>
 80019b4:	60f8      	str	r0, [r7, #12]
		insert(&kernelTaskScheduler, replacedTCB);
 80019b6:	68f9      	ldr	r1, [r7, #12]
 80019b8:	4834      	ldr	r0, [pc, #208]	@ (8001a8c <osCreateDeadlineTask+0x228>)
 80019ba:	f000 fc59 	bl	8002270 <insert>
		if (kernelStarted) {
 80019be:	4b30      	ldr	r3, [pc, #192]	@ (8001a80 <osCreateDeadlineTask+0x21c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <osCreateDeadlineTask+0x16a>
			__asm("SVC #3");	// Context Switch
 80019c6:	df03      	svc	3
			timerResume = true;	// enable interrupt
 80019c8:	4b2c      	ldr	r3, [pc, #176]	@ (8001a7c <osCreateDeadlineTask+0x218>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	601a      	str	r2, [r3, #0]
		}
		return RTX_OK;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e050      	b.n	8001a74 <osCreateDeadlineTask+0x210>
	}

	if (canAppendToStack(&kernelTCBarray, task)) {
 80019d2:	6839      	ldr	r1, [r7, #0]
 80019d4:	482b      	ldr	r0, [pc, #172]	@ (8001a84 <osCreateDeadlineTask+0x220>)
 80019d6:	f000 fdce 	bl	8002576 <canAppendToStack>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d045      	beq.n	8001a6c <osCreateDeadlineTask+0x208>
		task->alloc_point = k_mem_alloc(task->stack_size);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	89db      	ldrh	r3, [r3, #14]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fa17 	bl	8000e18 <k_mem_alloc>
 80019ea:	4603      	mov	r3, r0
 80019ec:	461a      	mov	r2, r3
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	615a      	str	r2, [r3, #20]
		if (task->alloc_point == NULL) {
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d108      	bne.n	8001a0c <osCreateDeadlineTask+0x1a8>
			if (kernelStarted) {
 80019fa:	4b21      	ldr	r3, [pc, #132]	@ (8001a80 <osCreateDeadlineTask+0x21c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <osCreateDeadlineTask+0x1a4>
				timerResume = true;
 8001a02:	4b1e      	ldr	r3, [pc, #120]	@ (8001a7c <osCreateDeadlineTask+0x218>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	601a      	str	r2, [r3, #0]
			}
			return RTX_ERR;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	e033      	b.n	8001a74 <osCreateDeadlineTask+0x210>
		}

		Block *metadata = (Block *)(task->alloc_point) - 1;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	3b18      	subs	r3, #24
 8001a12:	623b      	str	r3, [r7, #32]
		task->stack_high = task->alloc_point + metadata->size - sizeof(Block);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	695a      	ldr	r2, [r3, #20]
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f1a3 0218 	sub.w	r2, r3, #24
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	605a      	str	r2, [r3, #4]
		int TID = dequeueTID(&kernelTIDdispenser);
 8001a26:	4818      	ldr	r0, [pc, #96]	@ (8001a88 <osCreateDeadlineTask+0x224>)
 8001a28:	f7ff fc7a 	bl	8001320 <dequeueTID>
 8001a2c:	61f8      	str	r0, [r7, #28]
		task->tid = TID;
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	609a      	str	r2, [r3, #8]
		metadata->tid = TID;
 8001a34:	69fa      	ldr	r2, [r7, #28]
 8001a36:	6a3b      	ldr	r3, [r7, #32]
 8001a38:	605a      	str	r2, [r3, #4]
		task->deadline = deadline;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	619a      	str	r2, [r3, #24]
		task->remaining_time = deadline;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	61da      	str	r2, [r3, #28]
		TCB* appendedTCB = appendToStack(&kernelTCBarray, task);
 8001a46:	6839      	ldr	r1, [r7, #0]
 8001a48:	480e      	ldr	r0, [pc, #56]	@ (8001a84 <osCreateDeadlineTask+0x220>)
 8001a4a:	f000 fdaf 	bl	80025ac <appendToStack>
 8001a4e:	61b8      	str	r0, [r7, #24]
		insert(&kernelTaskScheduler, appendedTCB);
 8001a50:	69b9      	ldr	r1, [r7, #24]
 8001a52:	480e      	ldr	r0, [pc, #56]	@ (8001a8c <osCreateDeadlineTask+0x228>)
 8001a54:	f000 fc0c 	bl	8002270 <insert>
		if (kernelStarted) {
 8001a58:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <osCreateDeadlineTask+0x21c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <osCreateDeadlineTask+0x204>
			__asm("SVC #3");	// Context Switch
 8001a60:	df03      	svc	3
			timerResume = true;	// enable interrupt
 8001a62:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <osCreateDeadlineTask+0x218>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	601a      	str	r2, [r3, #0]
		}
		return RTX_OK;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e003      	b.n	8001a74 <osCreateDeadlineTask+0x210>
	}

	timerResume = true;		// enable interrupt
 8001a6c:	4b03      	ldr	r3, [pc, #12]	@ (8001a7c <osCreateDeadlineTask+0x218>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	601a      	str	r2, [r3, #0]
	return RTX_ERR;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3728      	adds	r7, #40	@ 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	200000c0 	.word	0x200000c0
 8001a80:	200000bc 	.word	0x200000bc
 8001a84:	200001bc 	.word	0x200001bc
 8001a88:	200000c8 	.word	0x200000c8
 8001a8c:	20000124 	.word	0x20000124

08001a90 <osSleep>:

// Important
// "A key distinction is that in the EDF, while one task is RUNNING, all the READY tasks's deadlines are also approaching.
// And all the SLEEPING tasks's wakeup times are also approaching. Hence time ticks down for *all* tasks"
void osSleep(int timeInMs) {
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	// code should be similar to osYield
//	timerResume = 0;
	
	if (kernelInitialized == false || kernelStarted == false) {
 8001a98:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac8 <osSleep+0x38>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00c      	beq.n	8001aba <osSleep+0x2a>
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8001acc <osSleep+0x3c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d008      	beq.n	8001aba <osSleep+0x2a>
//    }

	// Pseudocode flow
	// 1. runningTask -> remainingTime = timeInMs
//	TCB* runningTask = getMinRemainingTimeTask(&kernelTaskScheduler);
	runningTask->remaining_time = timeInMs; // set sleep time
 8001aa8:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <osSleep+0x40>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	61da      	str	r2, [r3, #28]

	timerResume = 0;
 8001ab0:	4b08      	ldr	r3, [pc, #32]	@ (8001ad4 <osSleep+0x44>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
	__asm("SVC #4");
 8001ab6:	df04      	svc	4
 8001ab8:	e000      	b.n	8001abc <osSleep+0x2c>
		return;
 8001aba:	bf00      	nop

	//

	// 5 .
//	timerResume = 1;
}
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	200000b0 	.word	0x200000b0
 8001acc:	200000bc 	.word	0x200000bc
 8001ad0:	200000b8 	.word	0x200000b8
 8001ad4:	200000c0 	.word	0x200000c0

08001ad8 <osPeriodYield>:

void osPeriodYield() {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0

	if (kernelInitialized == false || kernelStarted == false) {
 8001adc:	4b08      	ldr	r3, [pc, #32]	@ (8001b00 <osPeriodYield+0x28>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00a      	beq.n	8001afa <osPeriodYield+0x22>
 8001ae4:	4b07      	ldr	r3, [pc, #28]	@ (8001b04 <osPeriodYield+0x2c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d006      	beq.n	8001afa <osPeriodYield+0x22>
	}

	// Needs to wait till remaining time elapses before being scheduled
	// Switches to SLEEP state
//	TCB* runningTask = getMinRemainingTimeTask(&kernelTaskScheduler);
	osSleep(runningTask->remaining_time);
 8001aec:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <osPeriodYield+0x30>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff ffcc 	bl	8001a90 <osSleep>
 8001af8:	e000      	b.n	8001afc <osPeriodYield+0x24>
		return;
 8001afa:	bf00      	nop

}
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	200000b0 	.word	0x200000b0
 8001b04:	200000bc 	.word	0x200000bc
 8001b08:	200000b8 	.word	0x200000b8

08001b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	4b10      	ldr	r3, [pc, #64]	@ (8001b58 <HAL_MspInit+0x4c>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1a:	4a0f      	ldr	r2, [pc, #60]	@ (8001b58 <HAL_MspInit+0x4c>)
 8001b1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b22:	4b0d      	ldr	r3, [pc, #52]	@ (8001b58 <HAL_MspInit+0x4c>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	603b      	str	r3, [r7, #0]
 8001b32:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <HAL_MspInit+0x4c>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b36:	4a08      	ldr	r2, [pc, #32]	@ (8001b58 <HAL_MspInit+0x4c>)
 8001b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b3e:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <HAL_MspInit+0x4c>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b46:	603b      	str	r3, [r7, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b4a:	2007      	movs	r0, #7
 8001b4c:	f001 f924 	bl	8002d98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40023800 	.word	0x40023800

08001b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	@ 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a19      	ldr	r2, [pc, #100]	@ (8001be0 <HAL_UART_MspInit+0x84>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d12b      	bne.n	8001bd6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	4b18      	ldr	r3, [pc, #96]	@ (8001be4 <HAL_UART_MspInit+0x88>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	4a17      	ldr	r2, [pc, #92]	@ (8001be4 <HAL_UART_MspInit+0x88>)
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b8e:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <HAL_UART_MspInit+0x88>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <HAL_UART_MspInit+0x88>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	4a10      	ldr	r2, [pc, #64]	@ (8001be4 <HAL_UART_MspInit+0x88>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001baa:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <HAL_UART_MspInit+0x88>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bb6:	230c      	movs	r3, #12
 8001bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bc6:	2307      	movs	r3, #7
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4805      	ldr	r0, [pc, #20]	@ (8001be8 <HAL_UART_MspInit+0x8c>)
 8001bd2:	f001 f915 	bl	8002e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	@ 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40004400 	.word	0x40004400
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020000 	.word	0x40020000

08001bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <NMI_Handler+0x4>

08001bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <HardFault_Handler+0x4>

08001bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <MemManage_Handler+0x4>

08001c04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <BusFault_Handler+0x4>

08001c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <UsageFault_Handler+0x4>

08001c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c2a:	f000 ffe3 	bl	8002bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  // Prelab 3
//   printf("num is %d\r\n", count);

  if (timerResume) {
 8001c2e:	4b2b      	ldr	r3, [pc, #172]	@ (8001cdc <SysTick_Handler+0xb8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d04e      	beq.n	8001cd4 <SysTick_Handler+0xb0>
	  // Decrement Both Sleep and Scheduler Heap Tasks
	  decrementRemainingTime(&kernelSleepTaskScheduler);
 8001c36:	482a      	ldr	r0, [pc, #168]	@ (8001ce0 <SysTick_Handler+0xbc>)
 8001c38:	f000 fc31 	bl	800249e <decrementRemainingTime>
	  decrementRemainingTime(&kernelTaskScheduler);
 8001c3c:	4829      	ldr	r0, [pc, #164]	@ (8001ce4 <SysTick_Handler+0xc0>)
 8001c3e:	f000 fc2e 	bl	800249e <decrementRemainingTime>
	  // Don't decrement woken up tasks again on the scheduler

	  TCB* minSleepTask = getMinRemainingTimeTask(&kernelSleepTaskScheduler);
 8001c42:	4827      	ldr	r0, [pc, #156]	@ (8001ce0 <SysTick_Handler+0xbc>)
 8001c44:	f000 fbb2 	bl	80023ac <getMinRemainingTimeTask>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	60fb      	str	r3, [r7, #12]
	  while (minSleepTask != NULL) {
 8001c4c:	e015      	b.n	8001c7a <SysTick_Handler+0x56>
		  if (minSleepTask->remaining_time <= 0) { // Remove all sleeping tasks that are done sleeping and place back into scheduler
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	dc15      	bgt.n	8001c82 <SysTick_Handler+0x5e>
			  TCB* wokenUpTask = removeMin(&kernelSleepTaskScheduler);
 8001c56:	4822      	ldr	r0, [pc, #136]	@ (8001ce0 <SysTick_Handler+0xbc>)
 8001c58:	f000 fb7a 	bl	8002350 <removeMin>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	60bb      	str	r3, [r7, #8]
			  wokenUpTask->remaining_time = wokenUpTask->deadline;
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	699a      	ldr	r2, [r3, #24]
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	61da      	str	r2, [r3, #28]
			  insert(&kernelTaskScheduler, wokenUpTask);
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	481e      	ldr	r0, [pc, #120]	@ (8001ce4 <SysTick_Handler+0xc0>)
 8001c6c:	f000 fb00 	bl	8002270 <insert>
		  } else {
			  break;
		  }

		  minSleepTask = getMinRemainingTimeTask(&kernelSleepTaskScheduler);
 8001c70:	481b      	ldr	r0, [pc, #108]	@ (8001ce0 <SysTick_Handler+0xbc>)
 8001c72:	f000 fb9b 	bl	80023ac <getMinRemainingTimeTask>
 8001c76:	4603      	mov	r3, r0
 8001c78:	60fb      	str	r3, [r7, #12]
	  while (minSleepTask != NULL) {
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1e6      	bne.n	8001c4e <SysTick_Handler+0x2a>
 8001c80:	e000      	b.n	8001c84 <SysTick_Handler+0x60>
			  break;
 8001c82:	bf00      	nop
	  }

	  TCB* minScheduledTask = getMinRemainingTimeTask(&kernelTaskScheduler);
 8001c84:	4817      	ldr	r0, [pc, #92]	@ (8001ce4 <SysTick_Handler+0xc0>)
 8001c86:	f000 fb91 	bl	80023ac <getMinRemainingTimeTask>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	607b      	str	r3, [r7, #4]
	  if (runningTask != minScheduledTask || runningTask->remaining_time <= 0) { // if the top of the heap doesn't match the runningTask (that means something new entered that should pre-empt the running task)
 8001c8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ce8 <SysTick_Handler+0xc4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d104      	bne.n	8001ca2 <SysTick_Handler+0x7e>
 8001c98:	4b13      	ldr	r3, [pc, #76]	@ (8001ce8 <SysTick_Handler+0xc4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	dc18      	bgt.n	8001cd4 <SysTick_Handler+0xb0>
		  // Context switch to next task											  // or the currently running task expired
		  timerResume = false;
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cdc <SysTick_Handler+0xb8>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
      if(minScheduledTask->remaining_time <= 0) {
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	dc03      	bgt.n	8001cb8 <SysTick_Handler+0x94>
        svc_number = 1; // reset remaining_time if task expires naturally
 8001cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001cec <SysTick_Handler+0xc8>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	e002      	b.n	8001cbe <SysTick_Handler+0x9a>
      } else {
        svc_number = 3; // don't reset remaining_time of running_task if it gets preempted
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <SysTick_Handler+0xc8>)
 8001cba:	2203      	movs	r2, #3
 8001cbc:	601a      	str	r2, [r3, #0]
      }
		  SCB->ICSR |= 1<<28; //TODO: What to do when remaining time expires
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <SysTick_Handler+0xcc>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	4a0b      	ldr	r2, [pc, #44]	@ (8001cf0 <SysTick_Handler+0xcc>)
 8001cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc8:	6053      	str	r3, [r2, #4]
		  __asm("isb");
 8001cca:	f3bf 8f6f 	isb	sy
		  timerResume = true;
 8001cce:	4b03      	ldr	r3, [pc, #12]	@ (8001cdc <SysTick_Handler+0xb8>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]
	  }

  }

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	200000c0 	.word	0x200000c0
 8001ce0:	20000170 	.word	0x20000170
 8001ce4:	20000124 	.word	0x20000124
 8001ce8:	200000b8 	.word	0x200000b8
 8001cec:	2000011c 	.word	0x2000011c
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <SVC_Handler_Main>:

void SVC_Handler_Main( unsigned int *svc_args )
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /*
  * Stack contains:
  * r0, r1, r2, r3, r12, r14, the return address and xPSR
  * First argument (r0) is svc_args[0]
  */
  svc_number = ( ( char * )svc_args[ 6 ] )[ -2 ] ;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3318      	adds	r3, #24
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	3b02      	subs	r3, #2
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	4b24      	ldr	r3, [pc, #144]	@ (8001d9c <SVC_Handler_Main+0xa8>)
 8001d0a:	601a      	str	r2, [r3, #0]
  switch( svc_number )
 8001d0c:	4b23      	ldr	r3, [pc, #140]	@ (8001d9c <SVC_Handler_Main+0xa8>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d83c      	bhi.n	8001d8e <SVC_Handler_Main+0x9a>
 8001d14:	a201      	add	r2, pc, #4	@ (adr r2, 8001d1c <SVC_Handler_Main+0x28>)
 8001d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d1a:	bf00      	nop
 8001d1c:	08001d31 	.word	0x08001d31
 8001d20:	08001d49 	.word	0x08001d49
 8001d24:	08001d5b 	.word	0x08001d5b
 8001d28:	08001d6f 	.word	0x08001d6f
 8001d2c:	08001d7f 	.word	0x08001d7f
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001d30:	f3ef 8314 	mrs	r3, CONTROL
 8001d34:	60bb      	str	r3, [r7, #8]
  return(result);
 8001d36:	68bb      	ldr	r3, [r7, #8]
  {
    case 0:  /* EnablePrivilegedMode */
    	 __set_CONTROL( __get_CONTROL( ) & ~CONTROL_nPRIV_Msk ) ;
 8001d38:	f023 0301 	bic.w	r3, r3, #1
 8001d3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f383 8814 	msr	CONTROL, r3
}
 8001d44:	bf00      	nop
      	 break;
 8001d46:	e023      	b.n	8001d90 <SVC_Handler_Main+0x9c>
    case 1: // Context Switch for OsYield: For PendSV_Handler entry
		SCB->ICSR |= 1<<28; // Control register bit for a PendSV interrupt
 8001d48:	4b15      	ldr	r3, [pc, #84]	@ (8001da0 <SVC_Handler_Main+0xac>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	4a14      	ldr	r2, [pc, #80]	@ (8001da0 <SVC_Handler_Main+0xac>)
 8001d4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d52:	6053      	str	r3, [r2, #4]
		__asm("isb");
 8001d54:	f3bf 8f6f 	isb	sy
		break;
 8001d58:	e01a      	b.n	8001d90 <SVC_Handler_Main+0x9c>
    case 2: // Kernel Start
    	__asm("MRS R0, PSP");
 8001d5a:	f3ef 8009 	mrs	r0, PSP
		__asm("LDMIA R0!, {R4 - R11}");
 8001d5e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    	__asm("MSR PSP, R0");
 8001d62:	f380 8809 	msr	PSP, r0
    	__asm("LDR LR, =0xFFFFFFFD");
 8001d66:	f06f 0e02 	mvn.w	lr, #2
    	__asm("BX LR");
 8001d6a:	4770      	bx	lr
    	break;
 8001d6c:	e010      	b.n	8001d90 <SVC_Handler_Main+0x9c>
    case 3: // Context Switch for Pre-emption
    	SCB->ICSR |= 1<<28; // Control register bit for a PendSV interrupt
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <SVC_Handler_Main+0xac>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	4a0b      	ldr	r2, [pc, #44]	@ (8001da0 <SVC_Handler_Main+0xac>)
 8001d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d78:	6053      	str	r3, [r2, #4]
    	__asm("isb");
 8001d7a:	f3bf 8f6f 	isb	sy
    case 4: // Context Switch for osSleep: for PendSV_Handler entry
    	SCB->ICSR |= 1<<28;
 8001d7e:	4b08      	ldr	r3, [pc, #32]	@ (8001da0 <SVC_Handler_Main+0xac>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	4a07      	ldr	r2, [pc, #28]	@ (8001da0 <SVC_Handler_Main+0xac>)
 8001d84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d88:	6053      	str	r3, [r2, #4]
    	__asm("isb");
 8001d8a:	f3bf 8f6f 	isb	sy
    default:    /* unknown SVC */
    	break;
 8001d8e:	bf00      	nop
  }
}
 8001d90:	bf00      	nop
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	2000011c 	.word	0x2000011c
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <Context_Switch>:


void Context_Switch( void ) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
	// Saves old task
	TCB* oldTask = runningTask; // Check that this actually holds the last running task
 8001daa:	4b3b      	ldr	r3, [pc, #236]	@ (8001e98 <Context_Switch+0xf4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	617b      	str	r3, [r7, #20]

	// Case 1: osTaskExit
	if (oldTask->state == DORMANT) {
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	7b1b      	ldrb	r3, [r3, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d103      	bne.n	8001dc0 <Context_Switch+0x1c>
		removeMin(&kernelTaskScheduler); // Remove from scheduler
 8001db8:	4838      	ldr	r0, [pc, #224]	@ (8001e9c <Context_Switch+0xf8>)
 8001dba:	f000 fac9 	bl	8002350 <removeMin>
 8001dbe:	e042      	b.n	8001e46 <Context_Switch+0xa2>
	} else {
		// Case 2: osYield
		if (svc_number == 1) {
 8001dc0:	4b37      	ldr	r3, [pc, #220]	@ (8001ea0 <Context_Switch+0xfc>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d10e      	bne.n	8001de6 <Context_Switch+0x42>
			oldTask->state = READY;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	731a      	strb	r2, [r3, #12]
			oldTask->remaining_time = oldTask->deadline; // Reset remaining_time to original deadline
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	699a      	ldr	r2, [r3, #24]
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	61da      	str	r2, [r3, #28]
			changeRemainingTime(&kernelTaskScheduler, oldTask->tid, oldTask->deadline); // Reheapify the min-heap to place new task at root.
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	6899      	ldr	r1, [r3, #8]
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	461a      	mov	r2, r3
 8001de0:	482e      	ldr	r0, [pc, #184]	@ (8001e9c <Context_Switch+0xf8>)
 8001de2:	f000 fb24 	bl	800242e <changeRemainingTime>
		}

		// Case 3: osSleep
		if (svc_number == 4) {
 8001de6:	4b2e      	ldr	r3, [pc, #184]	@ (8001ea0 <Context_Switch+0xfc>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d111      	bne.n	8001e12 <Context_Switch+0x6e>
			oldTask->state = SLEEPING;
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	2203      	movs	r2, #3
 8001df2:	731a      	strb	r2, [r3, #12]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001df4:	f3ef 8309 	mrs	r3, PSP
 8001df8:	60fb      	str	r3, [r7, #12]
  return(result);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
			oldTask->thread_stackptr = (uint32_t)__get_PSP();
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	611a      	str	r2, [r3, #16]
			insert(&kernelSleepTaskScheduler, oldTask);
 8001e02:	6979      	ldr	r1, [r7, #20]
 8001e04:	4827      	ldr	r0, [pc, #156]	@ (8001ea4 <Context_Switch+0x100>)
 8001e06:	f000 fa33 	bl	8002270 <insert>
			removeMin(&kernelTaskScheduler);
 8001e0a:	4824      	ldr	r0, [pc, #144]	@ (8001e9c <Context_Switch+0xf8>)
 8001e0c:	f000 faa0 	bl	8002350 <removeMin>
 8001e10:	e019      	b.n	8001e46 <Context_Switch+0xa2>
		} else { // state should not be set to READY if osSleep function triggered context switch
			oldTask->state = READY;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2201      	movs	r2, #1
 8001e16:	731a      	strb	r2, [r3, #12]
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001e18:	f3ef 8309 	mrs	r3, PSP
 8001e1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8001e1e:	68bb      	ldr	r3, [r7, #8]
			oldTask->thread_stackptr = (uint32_t)__get_PSP();
 8001e20:	461a      	mov	r2, r3
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	611a      	str	r2, [r3, #16]
			setTCBState(&kernelTCBarray, READY, oldTask->tid);
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	481e      	ldr	r0, [pc, #120]	@ (8001ea8 <Context_Switch+0x104>)
 8001e30:	f000 fcd3 	bl	80027da <setTCBState>
			setTCBStackPointer(&kernelTCBarray, oldTask->thread_stackptr, oldTask->tid); // Might be redundant
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4819      	ldr	r0, [pc, #100]	@ (8001ea8 <Context_Switch+0x104>)
 8001e42:	f000 fd10 	bl	8002866 <setTCBStackPointer>
		}
	}

	// Get the next task
	TCB* newTask = getMinRemainingTimeTask(&kernelTaskScheduler);
 8001e46:	4815      	ldr	r0, [pc, #84]	@ (8001e9c <Context_Switch+0xf8>)
 8001e48:	f000 fab0 	bl	80023ac <getMinRemainingTimeTask>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	613b      	str	r3, [r7, #16]
	runningTask = newTask;
 8001e50:	4a11      	ldr	r2, [pc, #68]	@ (8001e98 <Context_Switch+0xf4>)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	6013      	str	r3, [r2, #0]
	// Set new task as running
	setTCBState(&kernelTCBarray, RUNNING, runningTask->tid);
 8001e56:	4b10      	ldr	r3, [pc, #64]	@ (8001e98 <Context_Switch+0xf4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	2102      	movs	r1, #2
 8001e60:	4811      	ldr	r0, [pc, #68]	@ (8001ea8 <Context_Switch+0x104>)
 8001e62:	f000 fcba 	bl	80027da <setTCBState>
	runningTask->state = RUNNING;
 8001e66:	4b0c      	ldr	r3, [pc, #48]	@ (8001e98 <Context_Switch+0xf4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	731a      	strb	r2, [r3, #12]
	stackPointer = (uint32_t)runningTask->thread_stackptr;
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e98 <Context_Switch+0xf4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	4a0d      	ldr	r2, [pc, #52]	@ (8001eac <Context_Switch+0x108>)
 8001e76:	6013      	str	r3, [r2, #0]
	__set_PSP((uint32_t)runningTask->thread_stackptr);
 8001e78:	4b07      	ldr	r3, [pc, #28]	@ (8001e98 <Context_Switch+0xf4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f383 8809 	msr	PSP, r3
}
 8001e86:	bf00      	nop

	// printf("ALERT--------------\r\n OLD_TASK_TID = %d, TOP OF HEAP TID = %d\r\n", oldTask->tid, runningTask->tid);

	timerResume = true;
 8001e88:	4b09      	ldr	r3, [pc, #36]	@ (8001eb0 <Context_Switch+0x10c>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]
}
 8001e8e:	bf00      	nop
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	200000b8 	.word	0x200000b8
 8001e9c:	20000124 	.word	0x20000124
 8001ea0:	2000011c 	.word	0x2000011c
 8001ea4:	20000170 	.word	0x20000170
 8001ea8:	200001bc 	.word	0x200001bc
 8001eac:	200000b4 	.word	0x200000b4
 8001eb0:	200000c0 	.word	0x200000c0

08001eb4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	e00a      	b.n	8001edc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ec6:	f3af 8000 	nop.w
 8001eca:	4601      	mov	r1, r0
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	60ba      	str	r2, [r7, #8]
 8001ed2:	b2ca      	uxtb	r2, r1
 8001ed4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	dbf0      	blt.n	8001ec6 <_read+0x12>
  }

  return len;
 8001ee4:	687b      	ldr	r3, [r7, #4]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b086      	sub	sp, #24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	e009      	b.n	8001f14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	1c5a      	adds	r2, r3, #1
 8001f04:	60ba      	str	r2, [r7, #8]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 fcdb 	bl	80028c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	3301      	adds	r3, #1
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	dbf1      	blt.n	8001f00 <_write+0x12>
  }
  return len;
 8001f1c:	687b      	ldr	r3, [r7, #4]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <_close>:

int _close(int file)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f4e:	605a      	str	r2, [r3, #4]
  return 0;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <_isatty>:

int _isatty(int file)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f66:	2301      	movs	r3, #1
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f98:	4a14      	ldr	r2, [pc, #80]	@ (8001fec <_sbrk+0x5c>)
 8001f9a:	4b15      	ldr	r3, [pc, #84]	@ (8001ff0 <_sbrk+0x60>)
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fa4:	4b13      	ldr	r3, [pc, #76]	@ (8001ff4 <_sbrk+0x64>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d102      	bne.n	8001fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fac:	4b11      	ldr	r3, [pc, #68]	@ (8001ff4 <_sbrk+0x64>)
 8001fae:	4a12      	ldr	r2, [pc, #72]	@ (8001ff8 <_sbrk+0x68>)
 8001fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fb2:	4b10      	ldr	r3, [pc, #64]	@ (8001ff4 <_sbrk+0x64>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d207      	bcs.n	8001fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fc0:	f002 fc3c 	bl	800483c <__errno>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fce:	e009      	b.n	8001fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fd0:	4b08      	ldr	r3, [pc, #32]	@ (8001ff4 <_sbrk+0x64>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fd6:	4b07      	ldr	r3, [pc, #28]	@ (8001ff4 <_sbrk+0x64>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	4a05      	ldr	r2, [pc, #20]	@ (8001ff4 <_sbrk+0x64>)
 8001fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20018000 	.word	0x20018000
 8001ff0:	00004000 	.word	0x00004000
 8001ff4:	20000120 	.word	0x20000120
 8001ff8:	20000810 	.word	0x20000810

08001ffc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002000:	4b06      	ldr	r3, [pc, #24]	@ (800201c <SystemInit+0x20>)
 8002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002006:	4a05      	ldr	r2, [pc, #20]	@ (800201c <SystemInit+0x20>)
 8002008:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800200c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <initTaskScheduler>:
//	self->queue->tail = (tail + 1) % maxSize;
//	return true;
//}

// MIN-HEAP SCHEDULER (Root node should be the task with the shortest remaining time, with ties being broken by lower tid)
void initTaskScheduler(TaskScheduler* self) {
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	kernelTaskSchedulerHeap.currentSize = 0;
 8002028:	4b10      	ldr	r3, [pc, #64]	@ (800206c <initTaskScheduler+0x4c>)
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
	kernelTaskSchedulerHeap.maxSize = MAX_TASKS;
 800202e:	4b0f      	ldr	r3, [pc, #60]	@ (800206c <initTaskScheduler+0x4c>)
 8002030:	2210      	movs	r2, #16
 8002032:	605a      	str	r2, [r3, #4]

	self->heap = &kernelTaskSchedulerHeap;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a0d      	ldr	r2, [pc, #52]	@ (800206c <initTaskScheduler+0x4c>)
 8002038:	641a      	str	r2, [r3, #64]	@ 0x40

	// initialize heap to NULL values
	for(int i = 0; i < self->heap->maxSize; i++) {
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	e007      	b.n	8002050 <initTaskScheduler+0x30>
		self->array[i] = NULL;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	2100      	movs	r1, #0
 8002046:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i = 0; i < self->heap->maxSize; i++) {
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	3301      	adds	r3, #1
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	429a      	cmp	r2, r3
 800205a:	dbf1      	blt.n	8002040 <initTaskScheduler+0x20>
	}
}
 800205c:	bf00      	nop
 800205e:	bf00      	nop
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	20000168 	.word	0x20000168

08002070 <initSleepTaskScheduler>:

void initSleepTaskScheduler(TaskScheduler* sleepScheduler) {
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
	kernelSleepTaskSchedulerHeap.currentSize = 0;
 8002078:	4b10      	ldr	r3, [pc, #64]	@ (80020bc <initSleepTaskScheduler+0x4c>)
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
	kernelSleepTaskSchedulerHeap.maxSize = MAX_TASKS;
 800207e:	4b0f      	ldr	r3, [pc, #60]	@ (80020bc <initSleepTaskScheduler+0x4c>)
 8002080:	2210      	movs	r2, #16
 8002082:	605a      	str	r2, [r3, #4]

	sleepScheduler->heap = &kernelSleepTaskSchedulerHeap;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a0d      	ldr	r2, [pc, #52]	@ (80020bc <initSleepTaskScheduler+0x4c>)
 8002088:	641a      	str	r2, [r3, #64]	@ 0x40

	// initialize heap to NULL values
	for(int i = 0; i < sleepScheduler->heap->maxSize; i++) {
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	e007      	b.n	80020a0 <initSleepTaskScheduler+0x30>
		sleepScheduler->array[i] = NULL;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	2100      	movs	r1, #0
 8002096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i = 0; i < sleepScheduler->heap->maxSize; i++) {
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	3301      	adds	r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	dbf1      	blt.n	8002090 <initSleepTaskScheduler+0x20>
	}
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	200001b4 	.word	0x200001b4

080020c0 <isEmpty>:

bool isEmpty(TaskScheduler* self) {
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
	return self->heap->currentSize == 0;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	bf0c      	ite	eq
 80020d2:	2301      	moveq	r3, #1
 80020d4:	2300      	movne	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
}
 80020d8:	4618      	mov	r0, r3
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <isFull>:

bool isFull(TaskScheduler* self) {
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
	return self->heap->currentSize == MAX_TASKS;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b10      	cmp	r3, #16
 80020f4:	bf0c      	ite	eq
 80020f6:	2301      	moveq	r3, #1
 80020f8:	2300      	movne	r3, #0
 80020fa:	b2db      	uxtb	r3, r3
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <heapify>:

void heapify(TaskScheduler* self, int currentIndex) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
	int leftChildIndex = left(currentIndex);
 8002112:	6838      	ldr	r0, [r7, #0]
 8002114:	f000 f883 	bl	800221e <left>
 8002118:	6178      	str	r0, [r7, #20]
	int rightChildIndex = right(currentIndex);
 800211a:	6838      	ldr	r0, [r7, #0]
 800211c:	f000 f88c 	bl	8002238 <right>
 8002120:	6138      	str	r0, [r7, #16]
	int smallestIndex = currentIndex;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	61fb      	str	r3, [r7, #28]

	TCB* currentNode = self->array[currentIndex];
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800212e:	61bb      	str	r3, [r7, #24]
	TCB* leftChildNode = self->array[leftChildIndex];
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002138:	60fb      	str	r3, [r7, #12]
	TCB* rightChildNode = self->array[rightChildIndex];
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002142:	60bb      	str	r3, [r7, #8]

	// Check current node against left child node
	if (leftChildIndex < self->heap->currentSize) {
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	429a      	cmp	r2, r3
 800214e:	da1a      	bge.n	8002186 <heapify+0x7e>
		if ((leftChildNode->remaining_time == currentNode->remaining_time) && (leftChildNode->tid < currentNode->tid)) { // case 1: same deadline priority, break tie with lower TID
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	69da      	ldr	r2, [r3, #28]
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	429a      	cmp	r2, r3
 800215a:	d10a      	bne.n	8002172 <heapify+0x6a>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	429a      	cmp	r2, r3
 8002166:	d204      	bcs.n	8002172 <heapify+0x6a>
			smallestIndex = leftChildIndex;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	61fb      	str	r3, [r7, #28]
			currentNode = leftChildNode;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	61bb      	str	r3, [r7, #24]
 8002170:	e009      	b.n	8002186 <heapify+0x7e>
		}
		else if (leftChildNode->remaining_time < currentNode->remaining_time) { // case 2: lower deadline priority
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	69da      	ldr	r2, [r3, #28]
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	429a      	cmp	r2, r3
 800217c:	da03      	bge.n	8002186 <heapify+0x7e>
			smallestIndex = leftChildIndex;
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	61fb      	str	r3, [r7, #28]
			currentNode = leftChildNode;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	61bb      	str	r3, [r7, #24]
		}
	}

	// Check current node against right child node
	if (rightChildIndex < self->heap->currentSize) {
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	429a      	cmp	r2, r3
 8002190:	da16      	bge.n	80021c0 <heapify+0xb8>
		if ((rightChildNode->remaining_time == currentNode->remaining_time) && (rightChildNode->tid < currentNode->tid)) { // case 1: same deadline priority, break tie with lower TID
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	69da      	ldr	r2, [r3, #28]
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	429a      	cmp	r2, r3
 800219c:	d108      	bne.n	80021b0 <heapify+0xa8>
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d202      	bcs.n	80021b0 <heapify+0xa8>
			smallestIndex = rightChildIndex;
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	e007      	b.n	80021c0 <heapify+0xb8>
		}
		else if (rightChildNode->remaining_time < currentNode->remaining_time) { // case 2: lower deadline priority
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	69da      	ldr	r2, [r3, #28]
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	da01      	bge.n	80021c0 <heapify+0xb8>
			smallestIndex = rightChildIndex;
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	61fb      	str	r3, [r7, #28]
		}
	}

	// swap nodes to satisfy min heap priority
	if (smallestIndex != currentIndex) {
 80021c0:	69fa      	ldr	r2, [r7, #28]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d008      	beq.n	80021da <heapify+0xd2>
		swap(self, smallestIndex, currentIndex);
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	69f9      	ldr	r1, [r7, #28]
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 f808 	bl	80021e2 <swap>
		heapify(self, smallestIndex);
 80021d2:	69f9      	ldr	r1, [r7, #28]
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ff97 	bl	8002108 <heapify>
	}
}
 80021da:	bf00      	nop
 80021dc:	3720      	adds	r7, #32
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <swap>:

void swap(TaskScheduler* self, int index1, int index2) {
 80021e2:	b480      	push	{r7}
 80021e4:	b087      	sub	sp, #28
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
	TCB* temp = self->array[index1];
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f6:	617b      	str	r3, [r7, #20]
	self->array[index1] = self->array[index2];
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	self->array[index2] = temp;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6979      	ldr	r1, [r7, #20]
 800220e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002212:	bf00      	nop
 8002214:	371c      	adds	r7, #28
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <left>:

int left(int index) {
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
	return 2 * index + 1;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	3301      	adds	r3, #1
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <right>:

int right(int index) {
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
	return 2 * index + 2;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3301      	adds	r3, #1
 8002244:	005b      	lsls	r3, r3, #1
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <parent>:

int parent(int index) {
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
	return (index - 1) / 2;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3b01      	subs	r3, #1
 800225e:	0fda      	lsrs	r2, r3, #31
 8002260:	4413      	add	r3, r2
 8002262:	105b      	asrs	r3, r3, #1
}
 8002264:	4618      	mov	r0, r3
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <insert>:

bool insert(TaskScheduler* self, TCB* tcb) {
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
	if (isFull(self)) {
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff ff32 	bl	80020e4 <isFull>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <insert+0x1a>
		return false;
 8002286:	2300      	movs	r3, #0
 8002288:	e05e      	b.n	8002348 <insert+0xd8>
	}

	self->array[self->heap->currentSize] = tcb;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6839      	ldr	r1, [r7, #0]
 8002294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	self->heap->currentSize++;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	3201      	adds	r2, #1
 80022a0:	601a      	str	r2, [r3, #0]

	int index = self->heap->currentSize - 1; // get the index of the inserted node
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	3b01      	subs	r3, #1
 80022aa:	617b      	str	r3, [r7, #20]
	TCB* parentNode = self->array[parent(index)];
 80022ac:	6978      	ldr	r0, [r7, #20]
 80022ae:	f7ff ffd0 	bl	8002252 <parent>
 80022b2:	4602      	mov	r2, r0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ba:	613b      	str	r3, [r7, #16]
	TCB* currentNode = self->array[index];
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c4:	60fb      	str	r3, [r7, #12]

	while (index != 0 && (currentNode->remaining_time <= parentNode->remaining_time)) { //heapify upwards starting with the added node
 80022c6:	e033      	b.n	8002330 <insert+0xc0>
		if (parentNode->remaining_time == currentNode->remaining_time) { // Check 1: same remaining_time
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	69da      	ldr	r2, [r3, #28]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d113      	bne.n	80022fc <insert+0x8c>
			if (currentNode->tid < parentNode->tid) { 					 // Check 2: break ties with TID
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d231      	bcs.n	8002344 <insert+0xd4>
				swap(self, parent(index), index);
 80022e0:	6978      	ldr	r0, [r7, #20]
 80022e2:	f7ff ffb6 	bl	8002252 <parent>
 80022e6:	4603      	mov	r3, r0
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	4619      	mov	r1, r3
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ff78 	bl	80021e2 <swap>
				index = parent(index);
 80022f2:	6978      	ldr	r0, [r7, #20]
 80022f4:	f7ff ffad 	bl	8002252 <parent>
 80022f8:	6178      	str	r0, [r7, #20]
 80022fa:	e00c      	b.n	8002316 <insert+0xa6>
			} else {
				break;
			}
		} else {														 // Check 1: currentNode's remaining_time < parentNode's remaining_time
			swap(self, parent(index), index);
 80022fc:	6978      	ldr	r0, [r7, #20]
 80022fe:	f7ff ffa8 	bl	8002252 <parent>
 8002302:	4603      	mov	r3, r0
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	4619      	mov	r1, r3
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ff6a 	bl	80021e2 <swap>
			index = parent(index);
 800230e:	6978      	ldr	r0, [r7, #20]
 8002310:	f7ff ff9f 	bl	8002252 <parent>
 8002314:	6178      	str	r0, [r7, #20]
		}
		currentNode = self->array[index];
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800231e:	60fb      	str	r3, [r7, #12]
		parentNode = self->array[parent(index)];
 8002320:	6978      	ldr	r0, [r7, #20]
 8002322:	f7ff ff96 	bl	8002252 <parent>
 8002326:	4602      	mov	r2, r0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800232e:	613b      	str	r3, [r7, #16]
	while (index != 0 && (currentNode->remaining_time <= parentNode->remaining_time)) { //heapify upwards starting with the added node
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d007      	beq.n	8002346 <insert+0xd6>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	69da      	ldr	r2, [r3, #28]
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	429a      	cmp	r2, r3
 8002340:	ddc2      	ble.n	80022c8 <insert+0x58>
 8002342:	e000      	b.n	8002346 <insert+0xd6>
				break;
 8002344:	bf00      	nop
	}

	return true;
 8002346:	2301      	movs	r3, #1
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <removeMin>:

TCB* removeMin(TaskScheduler* self) {
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	if (isEmpty(self)) {
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff feb1 	bl	80020c0 <isEmpty>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <removeMin+0x18>
		return NULL;
 8002364:	2300      	movs	r3, #0
 8002366:	e01d      	b.n	80023a4 <removeMin+0x54>
	}

	TCB* toRemove = self->array[0];
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	60fb      	str	r3, [r7, #12]
	self->array[0] = self->array[self->heap->currentSize - 1];
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	1e5a      	subs	r2, r3, #1
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	601a      	str	r2, [r3, #0]
	self->array[self->heap->currentSize - 1] = NULL;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	1e5a      	subs	r2, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2100      	movs	r1, #0
 800238c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	self->heap->currentSize--;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	3a01      	subs	r2, #1
 8002398:	601a      	str	r2, [r3, #0]

	heapify(self, 0);
 800239a:	2100      	movs	r1, #0
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff feb3 	bl	8002108 <heapify>

	return toRemove;
 80023a2:	68fb      	ldr	r3, [r7, #12]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <getMinRemainingTimeTask>:

TCB* getMinRemainingTimeTask(TaskScheduler* self) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	if (isEmpty(self)) {
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff fe83 	bl	80020c0 <isEmpty>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <getMinRemainingTimeTask+0x18>
		return NULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	e014      	b.n	80023ee <getMinRemainingTimeTask+0x42>
	}

	if (self->array[0]->tid == 0 && self->heap->currentSize > 1) {
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10a      	bne.n	80023e4 <getMinRemainingTimeTask+0x38>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	dd05      	ble.n	80023e4 <getMinRemainingTimeTask+0x38>
		self->array[0]->remaining_time = self->array[0]->deadline;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6992      	ldr	r2, [r2, #24]
 80023e2:	61da      	str	r2, [r3, #28]
	}
	reheapify(self);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f806 	bl	80023f6 <reheapify>

	return self->array[0]; //get root of MinHeap
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <reheapify>:

void reheapify(TaskScheduler* self) {
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
	for (int i = (self->heap->currentSize) / 2 - 1; i >= 0; i--) {
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	0fda      	lsrs	r2, r3, #31
 8002406:	4413      	add	r3, r2
 8002408:	105b      	asrs	r3, r3, #1
 800240a:	3b01      	subs	r3, #1
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	e006      	b.n	800241e <reheapify+0x28>
		heapify(self, i);
 8002410:	68f9      	ldr	r1, [r7, #12]
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff fe78 	bl	8002108 <heapify>
	for (int i = (self->heap->currentSize) / 2 - 1; i >= 0; i--) {
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	3b01      	subs	r3, #1
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	daf5      	bge.n	8002410 <reheapify+0x1a>
	}
}
 8002424:	bf00      	nop
 8002426:	bf00      	nop
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <changeRemainingTime>:
		}
	}
	printf("~~~END PRINT ITERATION~~~\n\r");
}

bool changeRemainingTime(TaskScheduler* self, int tid, int newDeadline) {
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
	if (isEmpty(self)) return false;
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f7ff fe40 	bl	80020c0 <isEmpty>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <changeRemainingTime+0x1c>
 8002446:	2300      	movs	r3, #0
 8002448:	e025      	b.n	8002496 <changeRemainingTime+0x68>
//	if (tid == 0) return false;

	for(int i = 0; i < self->heap->currentSize; i++) {
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	e01b      	b.n	8002488 <changeRemainingTime+0x5a>
		if (self->array[i]->tid == tid) {
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	429a      	cmp	r2, r3
 800245e:	d110      	bne.n	8002482 <changeRemainingTime+0x54>
			self->array[i]->deadline = newDeadline;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	619a      	str	r2, [r3, #24]
			self->array[i]->remaining_time = newDeadline;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	61da      	str	r2, [r3, #28]
			reheapify(self);
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f7ff ffbc 	bl	80023f6 <reheapify>
			return true;
 800247e:	2301      	movs	r3, #1
 8002480:	e009      	b.n	8002496 <changeRemainingTime+0x68>
	for(int i = 0; i < self->heap->currentSize; i++) {
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	3301      	adds	r3, #1
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	429a      	cmp	r2, r3
 8002492:	dbdd      	blt.n	8002450 <changeRemainingTime+0x22>
		}
	}

	return false;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <decrementRemainingTime>:

void decrementRemainingTime(TaskScheduler* self) {
 800249e:	b480      	push	{r7}
 80024a0:	b085      	sub	sp, #20
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < self->heap->currentSize; i++) {
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	e00d      	b.n	80024c8 <decrementRemainingTime+0x2a>
		self->array[i]->remaining_time -= 1;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b4:	69da      	ldr	r2, [r3, #28]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68f9      	ldr	r1, [r7, #12]
 80024ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80024be:	3a01      	subs	r2, #1
 80024c0:	61da      	str	r2, [r3, #28]
	for (int i = 0; i < self->heap->currentSize; i++) {
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	3301      	adds	r3, #1
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	dbeb      	blt.n	80024ac <decrementRemainingTime+0xe>
	}

	return;
 80024d4:	bf00      	nop
}
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <initTCBarray>:
#include "k_task.h"

TCBarray kernelTCBarray;
TCB tcbs[30];

void initTCBarray() {
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
//	kernelTCBarray.p_stackLimit = (uint32_t)*(uint32_t**)0x0 - (uint32_t)0x4000;	// Set stackptr to lower stack bound
	kernelTCBarray.p_currentStackSize = *(uint32_t**)0x0 - (uint32_t)MAIN_STACK_SIZE; // pointer to the bottom of our stack so far
 80024e6:	2300      	movs	r3, #0
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 80024ee:	4a0f      	ldr	r2, [pc, #60]	@ (800252c <initTCBarray+0x4c>)
 80024f0:	6793      	str	r3, [r2, #120]	@ 0x78

	kernelTCBarray.index = 0; // Reserve index 0 for the null task.
 80024f2:	4b0e      	ldr	r3, [pc, #56]	@ (800252c <initTCBarray+0x4c>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	67da      	str	r2, [r3, #124]	@ 0x7c
	kernelTCBarray.numOfActiveTasks = 0;
 80024f8:	4b0c      	ldr	r3, [pc, #48]	@ (800252c <initTCBarray+0x4c>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

	for(int i = 0; i < 30; i++) {
 8002500:	2300      	movs	r3, #0
 8002502:	607b      	str	r3, [r7, #4]
 8002504:	e007      	b.n	8002516 <initTCBarray+0x36>
		kernelTCBarray.array[i] = NULL;
 8002506:	4a09      	ldr	r2, [pc, #36]	@ (800252c <initTCBarray+0x4c>)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2100      	movs	r1, #0
 800250c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 30; i++) {
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3301      	adds	r3, #1
 8002514:	607b      	str	r3, [r7, #4]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b1d      	cmp	r3, #29
 800251a:	ddf4      	ble.n	8002506 <initTCBarray+0x26>
	}
}
 800251c:	bf00      	nop
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	200001bc 	.word	0x200001bc

08002530 <isArrayFull>:
//
//uint32_t* stackLimit(TCBarray* self) {
//	self->p_stackLimit;
//}

bool isArrayFull(TCBarray* self) {
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	return self->index == 30;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800253c:	2b1e      	cmp	r3, #30
 800253e:	bf0c      	ite	eq
 8002540:	2301      	moveq	r3, #1
 8002542:	2300      	movne	r3, #0
 8002544:	b2db      	uxtb	r3, r3
}
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <hasReachedMaxActiveTasks>:

bool hasReachedMaxActiveTasks(TCBarray* self) {
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
	return self->numOfActiveTasks == MAX_TASKS;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002560:	2b10      	cmp	r3, #16
 8002562:	bf0c      	ite	eq
 8002564:	2301      	moveq	r3, #1
 8002566:	2300      	movne	r3, #0
 8002568:	b2db      	uxtb	r3, r3
}
 800256a:	4618      	mov	r0, r3
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <canAppendToStack>:

int numOfActiveTasks(TCBarray* self) {
	return self->numOfActiveTasks;
}

bool canAppendToStack(TCBarray* self, TCB* incomingTask) {
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	6039      	str	r1, [r7, #0]
	if (isArrayFull(self)) {
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff ffd5 	bl	8002530 <isArrayFull>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <canAppendToStack+0x1a>
		return false;
 800258c:	2300      	movs	r3, #0
 800258e:	e008      	b.n	80025a2 <canAppendToStack+0x2c>
	}

	if (hasReachedMaxActiveTasks(self)) {
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff ffde 	bl	8002552 <hasReachedMaxActiveTasks>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <canAppendToStack+0x2a>
		return false;
 800259c:	2300      	movs	r3, #0
 800259e:	e000      	b.n	80025a2 <canAppendToStack+0x2c>
//	uint32_t* p_stackLimit = self->p_stackLimit;
//	uint32_t stackLimit = (uint32_t)p_stackLimit;
//
//	uint32_t incomingTaskSize = (uint16_t)(incomingTask->stack_size);

	return true;
 80025a0:	2301      	movs	r3, #1
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <appendToStack>:

TCB* appendToStack(TCBarray* self, TCB *incomingTask) {
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
	int currentIndex = self->index;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025ba:	60fb      	str	r3, [r7, #12]

	TCB* newTCB = &tcbs[currentIndex];
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	015b      	lsls	r3, r3, #5
 80025c0:	4a2f      	ldr	r2, [pc, #188]	@ (8002680 <appendToStack+0xd4>)
 80025c2:	4413      	add	r3, r2
 80025c4:	60bb      	str	r3, [r7, #8]

	newTCB->ptask = incomingTask->ptask;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	601a      	str	r2, [r3, #0]
	newTCB->stack_high = incomingTask->stack_high;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	605a      	str	r2, [r3, #4]
	newTCB->tid = incomingTask->tid;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	609a      	str	r2, [r3, #8]
	newTCB->state = READY;
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2201      	movs	r2, #1
 80025e2:	731a      	strb	r2, [r3, #12]
	newTCB->stack_size = incomingTask->stack_size;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	89da      	ldrh	r2, [r3, #14]
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	81da      	strh	r2, [r3, #14]
	newTCB->alloc_point = incomingTask->alloc_point;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	695a      	ldr	r2, [r3, #20]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	615a      	str	r2, [r3, #20]
	newTCB->deadline = incomingTask->deadline;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	699a      	ldr	r2, [r3, #24]
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	619a      	str	r2, [r3, #24]
	newTCB->remaining_time = incomingTask->remaining_time;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	69da      	ldr	r2, [r3, #28]
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	61da      	str	r2, [r3, #28]

	// Push registers onto the stack - dummy values for now
	uint32_t* p_stackptr = newTCB->stack_high;
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	617b      	str	r3, [r7, #20]
	*(--p_stackptr) = 1<<24; // this is xPSR, setting the chip to Thumb mode
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	3b04      	subs	r3, #4
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002616:	601a      	str	r2, [r3, #0]
	*(--p_stackptr) = (uint32_t)newTCB->ptask;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	3b04      	subs	r3, #4
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 14; i++) {
 8002626:	2300      	movs	r3, #0
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	e008      	b.n	800263e <appendToStack+0x92>
		*(--p_stackptr) = 0xA;
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	3b04      	subs	r3, #4
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	220a      	movs	r2, #10
 8002636:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 14; i++) {
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	3301      	adds	r3, #1
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	2b0d      	cmp	r3, #13
 8002642:	ddf3      	ble.n	800262c <appendToStack+0x80>
	}
	newTCB->thread_stackptr = p_stackptr;
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	611a      	str	r2, [r3, #16]

	// update currentStackSize to the starting address of the NEXT thread stack
//	uint32_t* p_currentStackSize = self->p_currentStackSize;
//	self->p_currentStackSize = (uint32_t)p_currentStackSize - (incomingTask->stack_size);

	self->index++;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	67da      	str	r2, [r3, #124]	@ 0x7c
	self->numOfActiveTasks++;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

	// insert the new TCB into the TCBarray
	self->array[currentIndex] = newTCB;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	68b9      	ldr	r1, [r7, #8]
 8002668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	// return the TCB we just added
	return self->array[currentIndex];
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8002674:	4618      	mov	r0, r3
 8002676:	371c      	adds	r7, #28
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	20000240 	.word	0x20000240

08002684 <canReplaceDormantTaskInStack>:

int canReplaceDormantTaskInStack(TCBarray* self, TCB* incomingTask) {
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
	if (hasReachedMaxActiveTasks(self)) {
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff ff5f 	bl	8002552 <hasReachedMaxActiveTasks>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <canReplaceDormantTaskInStack+0x1c>
		return -1;
 800269a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800269e:	e01e      	b.n	80026de <canReplaceDormantTaskInStack+0x5a>
	}

	for(int i = 0; i < self->index; i++) {
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	e014      	b.n	80026d0 <canReplaceDormantTaskInStack+0x4c>
		if (self->array[i]->state == DORMANT && self->array[i]->stack_size >= incomingTask->stack_size) {
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ae:	7b1b      	ldrb	r3, [r3, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10a      	bne.n	80026ca <canReplaceDormantTaskInStack+0x46>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026bc:	89da      	ldrh	r2, [r3, #14]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	89db      	ldrh	r3, [r3, #14]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d301      	bcc.n	80026ca <canReplaceDormantTaskInStack+0x46>
			return i;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	e009      	b.n	80026de <canReplaceDormantTaskInStack+0x5a>
	for(int i = 0; i < self->index; i++) {
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	3301      	adds	r3, #1
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	dbe5      	blt.n	80026a6 <canReplaceDormantTaskInStack+0x22>
		}
	}

	return -1;
 80026da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <replaceDormantTaskInStack>:

TCB* getTCBAtCurrentIndex(TCBarray* self) {
	return self->array[self->index];
}

TCB* replaceDormantTaskInStack(TCBarray* self, TCB *incomingTask, int dormantTaskIndex) {
 80026e6:	b480      	push	{r7}
 80026e8:	b087      	sub	sp, #28
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
	self->array[dormantTaskIndex]->ptask = incomingTask->ptask;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	601a      	str	r2, [r3, #0]
	self->array[dormantTaskIndex]->tid = incomingTask->tid;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	6892      	ldr	r2, [r2, #8]
 800270c:	609a      	str	r2, [r3, #8]
	self->array[dormantTaskIndex]->state = READY;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002716:	2201      	movs	r2, #1
 8002718:	731a      	strb	r2, [r3, #12]
	self->array[dormantTaskIndex]->stack_size = incomingTask->stack_size;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	89d2      	ldrh	r2, [r2, #14]
 8002726:	81da      	strh	r2, [r3, #14]
	self->array[dormantTaskIndex]->alloc_point = incomingTask->alloc_point;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	6952      	ldr	r2, [r2, #20]
 8002734:	615a      	str	r2, [r3, #20]
	self->array[dormantTaskIndex]->deadline = incomingTask->deadline;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	6992      	ldr	r2, [r2, #24]
 8002742:	619a      	str	r2, [r3, #24]
	self->array[dormantTaskIndex]->remaining_time = incomingTask->remaining_time;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	69d2      	ldr	r2, [r2, #28]
 8002750:	61da      	str	r2, [r3, #28]
	self->array[dormantTaskIndex]->stack_high = incomingTask->stack_high;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	6852      	ldr	r2, [r2, #4]
 800275e:	605a      	str	r2, [r3, #4]

	// Push registers onto the stack - dummy values for now
	uint32_t* p_stackptr = self->array[dormantTaskIndex]->stack_high;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	617b      	str	r3, [r7, #20]
	*(--p_stackptr) = 1<<24; // this is xPSR, setting the chip to Thumb mode
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	3b04      	subs	r3, #4
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002778:	601a      	str	r2, [r3, #0]
	*(--p_stackptr) = (uint32_t)self->array[dormantTaskIndex]->ptask;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	3b04      	subs	r3, #4
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 14; i++) {
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	e008      	b.n	80027a6 <replaceDormantTaskInStack+0xc0>
		*(--p_stackptr) = 0xA;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	3b04      	subs	r3, #4
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	220a      	movs	r2, #10
 800279e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 14; i++) {
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	3301      	adds	r3, #1
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	2b0d      	cmp	r3, #13
 80027aa:	ddf3      	ble.n	8002794 <replaceDormantTaskInStack+0xae>
	}
	self->array[dormantTaskIndex]->thread_stackptr = p_stackptr; //save a thread stack pointer for each thread
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	611a      	str	r2, [r3, #16]

	self->numOfActiveTasks++;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

	return self->array[dormantTaskIndex];
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <setTCBState>:

int setTCBState(TCBarray* self, int newState, task_t TID) {
 80027da:	b480      	push	{r7}
 80027dc:	b087      	sub	sp, #28
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
    if (newState != RUNNING && newState != READY && newState != DORMANT) return -1;
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d008      	beq.n	80027fe <setTCBState+0x24>
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d005      	beq.n	80027fe <setTCBState+0x24>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <setTCBState+0x24>
 80027f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027fc:	e02d      	b.n	800285a <setTCBState+0x80>

    if (TID < 0 || TID > MAX_TASKS - 1) return -1;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b0f      	cmp	r3, #15
 8002802:	d902      	bls.n	800280a <setTCBState+0x30>
 8002804:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002808:	e027      	b.n	800285a <setTCBState+0x80>

    for(int i = 0; i < self->index; i++) {
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	e01d      	b.n	800284c <setTCBState+0x72>
        if (self->array[i]->tid == TID) {
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	429a      	cmp	r2, r3
 800281e:	d112      	bne.n	8002846 <setTCBState+0x6c>
            self->array[i]->state = newState;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	731a      	strb	r2, [r3, #12]
            if (newState == DORMANT) {
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d106      	bne.n	8002842 <setTCBState+0x68>
            	self->numOfActiveTasks--;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800283a:	1e5a      	subs	r2, r3, #1
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            }
            return 0;
 8002842:	2300      	movs	r3, #0
 8002844:	e009      	b.n	800285a <setTCBState+0x80>
    for(int i = 0; i < self->index; i++) {
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	3301      	adds	r3, #1
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	429a      	cmp	r2, r3
 8002854:	dbdc      	blt.n	8002810 <setTCBState+0x36>
        }
    }

    // No matching TID found.
    return -1;
 8002856:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800285a:	4618      	mov	r0, r3
 800285c:	371c      	adds	r7, #28
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <setTCBStackPointer>:

int setTCBStackPointer(TCBarray* self, uint32_t ptr, task_t TID) {
 8002866:	b480      	push	{r7}
 8002868:	b087      	sub	sp, #28
 800286a:	af00      	add	r7, sp, #0
 800286c:	60f8      	str	r0, [r7, #12]
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
    if (TID < 0 || TID > MAX_TASKS - 1) return -1;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b0f      	cmp	r3, #15
 8002876:	d902      	bls.n	800287e <setTCBStackPointer+0x18>
 8002878:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800287c:	e01c      	b.n	80028b8 <setTCBStackPointer+0x52>

    for(int i = 0; i < self->index; i++) {
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	e012      	b.n	80028aa <setTCBStackPointer+0x44>
        if (self->array[i]->tid == TID) {
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	429a      	cmp	r2, r3
 8002892:	d107      	bne.n	80028a4 <setTCBStackPointer+0x3e>
            self->array[i]->thread_stackptr = ptr;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	611a      	str	r2, [r3, #16]
            return 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	e009      	b.n	80028b8 <setTCBStackPointer+0x52>
    for(int i = 0; i < self->index; i++) {
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	3301      	adds	r3, #1
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	dbe7      	blt.n	8002884 <setTCBStackPointer+0x1e>
        }
    }

    // No matching TID found.
    return -1;
 80028b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	371c      	adds	r7, #28
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <__io_putchar>:
//Needed for printf
UART_HandleTypeDef huart2;


int __io_putchar(int ch)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,&ch,1,HAL_MAX_DELAY);
 80028cc:	1d39      	adds	r1, r7, #4
 80028ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028d2:	2201      	movs	r2, #1
 80028d4:	4803      	ldr	r0, [pc, #12]	@ (80028e4 <__io_putchar+0x20>)
 80028d6:	f001 f916 	bl	8003b06 <HAL_UART_Transmit>
	return ch;
 80028da:	687b      	ldr	r3, [r7, #4]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20000600 	.word	0x20000600

080028e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b094      	sub	sp, #80	@ 0x50
 80028ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028ee:	f107 0320 	add.w	r3, r7, #32
 80028f2:	2230      	movs	r2, #48	@ 0x30
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f001 ff98 	bl	800482c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028fc:	f107 030c 	add.w	r3, r7, #12
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800290c:	2300      	movs	r3, #0
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	4b29      	ldr	r3, [pc, #164]	@ (80029b8 <SystemClock_Config+0xd0>)
 8002912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002914:	4a28      	ldr	r2, [pc, #160]	@ (80029b8 <SystemClock_Config+0xd0>)
 8002916:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800291a:	6413      	str	r3, [r2, #64]	@ 0x40
 800291c:	4b26      	ldr	r3, [pc, #152]	@ (80029b8 <SystemClock_Config+0xd0>)
 800291e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002920:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002928:	2300      	movs	r3, #0
 800292a:	607b      	str	r3, [r7, #4]
 800292c:	4b23      	ldr	r3, [pc, #140]	@ (80029bc <SystemClock_Config+0xd4>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002934:	4a21      	ldr	r2, [pc, #132]	@ (80029bc <SystemClock_Config+0xd4>)
 8002936:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b1f      	ldr	r3, [pc, #124]	@ (80029bc <SystemClock_Config+0xd4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002944:	607b      	str	r3, [r7, #4]
 8002946:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002948:	2302      	movs	r3, #2
 800294a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800294c:	2301      	movs	r3, #1
 800294e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002950:	2310      	movs	r3, #16
 8002952:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002954:	2302      	movs	r3, #2
 8002956:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002958:	2300      	movs	r3, #0
 800295a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800295c:	2310      	movs	r3, #16
 800295e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002960:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002964:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002966:	2304      	movs	r3, #4
 8002968:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800296a:	2307      	movs	r3, #7
 800296c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800296e:	f107 0320 	add.w	r3, r7, #32
 8002972:	4618      	mov	r0, r3
 8002974:	f000 fbe2 	bl	800313c <HAL_RCC_OscConfig>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800297e:	f000 f8b7 	bl	8002af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002982:	230f      	movs	r3, #15
 8002984:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002986:	2302      	movs	r3, #2
 8002988:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800298e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002992:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002994:	2300      	movs	r3, #0
 8002996:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002998:	f107 030c 	add.w	r3, r7, #12
 800299c:	2102      	movs	r1, #2
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 fe44 	bl	800362c <HAL_RCC_ClockConfig>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80029aa:	f000 f8a1 	bl	8002af0 <Error_Handler>
  }
}
 80029ae:	bf00      	nop
 80029b0:	3750      	adds	r7, #80	@ 0x50
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40007000 	.word	0x40007000

080029c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029c4:	4b11      	ldr	r3, [pc, #68]	@ (8002a0c <MX_USART2_UART_Init+0x4c>)
 80029c6:	4a12      	ldr	r2, [pc, #72]	@ (8002a10 <MX_USART2_UART_Init+0x50>)
 80029c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029ca:	4b10      	ldr	r3, [pc, #64]	@ (8002a0c <MX_USART2_UART_Init+0x4c>)
 80029cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80029d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029d2:	4b0e      	ldr	r3, [pc, #56]	@ (8002a0c <MX_USART2_UART_Init+0x4c>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029d8:	4b0c      	ldr	r3, [pc, #48]	@ (8002a0c <MX_USART2_UART_Init+0x4c>)
 80029da:	2200      	movs	r2, #0
 80029dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029de:	4b0b      	ldr	r3, [pc, #44]	@ (8002a0c <MX_USART2_UART_Init+0x4c>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029e4:	4b09      	ldr	r3, [pc, #36]	@ (8002a0c <MX_USART2_UART_Init+0x4c>)
 80029e6:	220c      	movs	r2, #12
 80029e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ea:	4b08      	ldr	r3, [pc, #32]	@ (8002a0c <MX_USART2_UART_Init+0x4c>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f0:	4b06      	ldr	r3, [pc, #24]	@ (8002a0c <MX_USART2_UART_Init+0x4c>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029f6:	4805      	ldr	r0, [pc, #20]	@ (8002a0c <MX_USART2_UART_Init+0x4c>)
 80029f8:	f001 f838 	bl	8003a6c <HAL_UART_Init>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a02:	f000 f875 	bl	8002af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000600 	.word	0x20000600
 8002a10:	40004400 	.word	0x40004400

08002a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	@ 0x28
 8002a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1a:	f107 0314 	add.w	r3, r7, #20
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	605a      	str	r2, [r3, #4]
 8002a24:	609a      	str	r2, [r3, #8]
 8002a26:	60da      	str	r2, [r3, #12]
 8002a28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ae4 <MX_GPIO_Init+0xd0>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	4a2c      	ldr	r2, [pc, #176]	@ (8002ae4 <MX_GPIO_Init+0xd0>)
 8002a34:	f043 0304 	orr.w	r3, r3, #4
 8002a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ae4 <MX_GPIO_Init+0xd0>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	4b26      	ldr	r3, [pc, #152]	@ (8002ae4 <MX_GPIO_Init+0xd0>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	4a25      	ldr	r2, [pc, #148]	@ (8002ae4 <MX_GPIO_Init+0xd0>)
 8002a50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a56:	4b23      	ldr	r3, [pc, #140]	@ (8002ae4 <MX_GPIO_Init+0xd0>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	4b1f      	ldr	r3, [pc, #124]	@ (8002ae4 <MX_GPIO_Init+0xd0>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ae4 <MX_GPIO_Init+0xd0>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a72:	4b1c      	ldr	r3, [pc, #112]	@ (8002ae4 <MX_GPIO_Init+0xd0>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	607b      	str	r3, [r7, #4]
 8002a82:	4b18      	ldr	r3, [pc, #96]	@ (8002ae4 <MX_GPIO_Init+0xd0>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	4a17      	ldr	r2, [pc, #92]	@ (8002ae4 <MX_GPIO_Init+0xd0>)
 8002a88:	f043 0302 	orr.w	r3, r3, #2
 8002a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ae4 <MX_GPIO_Init+0xd0>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	607b      	str	r3, [r7, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2120      	movs	r1, #32
 8002a9e:	4812      	ldr	r0, [pc, #72]	@ (8002ae8 <MX_GPIO_Init+0xd4>)
 8002aa0:	f000 fb32 	bl	8003108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002aa4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002aaa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	4619      	mov	r1, r3
 8002aba:	480c      	ldr	r0, [pc, #48]	@ (8002aec <MX_GPIO_Init+0xd8>)
 8002abc:	f000 f9a0 	bl	8002e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002ac0:	2320      	movs	r3, #32
 8002ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002acc:	2300      	movs	r3, #0
 8002ace:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002ad0:	f107 0314 	add.w	r3, r7, #20
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4804      	ldr	r0, [pc, #16]	@ (8002ae8 <MX_GPIO_Init+0xd4>)
 8002ad8:	f000 f992 	bl	8002e00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002adc:	bf00      	nop
 8002ade:	3728      	adds	r7, #40	@ 0x28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40020000 	.word	0x40020000
 8002aec:	40020800 	.word	0x40020800

08002af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002af4:	b672      	cpsid	i
}
 8002af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002af8:	bf00      	nop
 8002afa:	e7fd      	b.n	8002af8 <Error_Handler+0x8>

08002afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002afc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b00:	480d      	ldr	r0, [pc, #52]	@ (8002b38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b02:	490e      	ldr	r1, [pc, #56]	@ (8002b3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b04:	4a0e      	ldr	r2, [pc, #56]	@ (8002b40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b08:	e002      	b.n	8002b10 <LoopCopyDataInit>

08002b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b0e:	3304      	adds	r3, #4

08002b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b14:	d3f9      	bcc.n	8002b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b16:	4a0b      	ldr	r2, [pc, #44]	@ (8002b44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b18:	4c0b      	ldr	r4, [pc, #44]	@ (8002b48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b1c:	e001      	b.n	8002b22 <LoopFillZerobss>

08002b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b20:	3204      	adds	r2, #4

08002b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b24:	d3fb      	bcc.n	8002b1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b26:	f7ff fa69 	bl	8001ffc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b2a:	f001 fe8d 	bl	8004848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b2e:	f001 fcab 	bl	8004488 <main>
  bx  lr    
 8002b32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b3c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002b40:	0800571c 	.word	0x0800571c
  ldr r2, =_sbss
 8002b44:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002b48:	20000810 	.word	0x20000810

08002b4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b4c:	e7fe      	b.n	8002b4c <ADC_IRQHandler>
	...

08002b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b54:	4b0e      	ldr	r3, [pc, #56]	@ (8002b90 <HAL_Init+0x40>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a0d      	ldr	r2, [pc, #52]	@ (8002b90 <HAL_Init+0x40>)
 8002b5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b60:	4b0b      	ldr	r3, [pc, #44]	@ (8002b90 <HAL_Init+0x40>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a0a      	ldr	r2, [pc, #40]	@ (8002b90 <HAL_Init+0x40>)
 8002b66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b6c:	4b08      	ldr	r3, [pc, #32]	@ (8002b90 <HAL_Init+0x40>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a07      	ldr	r2, [pc, #28]	@ (8002b90 <HAL_Init+0x40>)
 8002b72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b78:	2003      	movs	r0, #3
 8002b7a:	f000 f90d 	bl	8002d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f000 f808 	bl	8002b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b84:	f7fe ffc2 	bl	8001b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40023c00 	.word	0x40023c00

08002b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b9c:	4b12      	ldr	r3, [pc, #72]	@ (8002be8 <HAL_InitTick+0x54>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b12      	ldr	r3, [pc, #72]	@ (8002bec <HAL_InitTick+0x58>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f917 	bl	8002de6 <HAL_SYSTICK_Config>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e00e      	b.n	8002be0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b0f      	cmp	r3, #15
 8002bc6:	d80a      	bhi.n	8002bde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bc8:	2200      	movs	r2, #0
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002bd0:	f000 f8ed 	bl	8002dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bd4:	4a06      	ldr	r2, [pc, #24]	@ (8002bf0 <HAL_InitTick+0x5c>)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e000      	b.n	8002be0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20000000 	.word	0x20000000
 8002bec:	20000008 	.word	0x20000008
 8002bf0:	20000004 	.word	0x20000004

08002bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bf8:	4b06      	ldr	r3, [pc, #24]	@ (8002c14 <HAL_IncTick+0x20>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4b06      	ldr	r3, [pc, #24]	@ (8002c18 <HAL_IncTick+0x24>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4413      	add	r3, r2
 8002c04:	4a04      	ldr	r2, [pc, #16]	@ (8002c18 <HAL_IncTick+0x24>)
 8002c06:	6013      	str	r3, [r2, #0]
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	20000008 	.word	0x20000008
 8002c18:	20000644 	.word	0x20000644

08002c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c20:	4b03      	ldr	r3, [pc, #12]	@ (8002c30 <HAL_GetTick+0x14>)
 8002c22:	681b      	ldr	r3, [r3, #0]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	20000644 	.word	0x20000644

08002c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c44:	4b0c      	ldr	r3, [pc, #48]	@ (8002c78 <__NVIC_SetPriorityGrouping+0x44>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c50:	4013      	ands	r3, r2
 8002c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c66:	4a04      	ldr	r2, [pc, #16]	@ (8002c78 <__NVIC_SetPriorityGrouping+0x44>)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	60d3      	str	r3, [r2, #12]
}
 8002c6c:	bf00      	nop
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c80:	4b04      	ldr	r3, [pc, #16]	@ (8002c94 <__NVIC_GetPriorityGrouping+0x18>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	0a1b      	lsrs	r3, r3, #8
 8002c86:	f003 0307 	and.w	r3, r3, #7
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	6039      	str	r1, [r7, #0]
 8002ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	db0a      	blt.n	8002cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	490c      	ldr	r1, [pc, #48]	@ (8002ce4 <__NVIC_SetPriority+0x4c>)
 8002cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb6:	0112      	lsls	r2, r2, #4
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	440b      	add	r3, r1
 8002cbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc0:	e00a      	b.n	8002cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	4908      	ldr	r1, [pc, #32]	@ (8002ce8 <__NVIC_SetPriority+0x50>)
 8002cc8:	79fb      	ldrb	r3, [r7, #7]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	3b04      	subs	r3, #4
 8002cd0:	0112      	lsls	r2, r2, #4
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	761a      	strb	r2, [r3, #24]
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	e000e100 	.word	0xe000e100
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b089      	sub	sp, #36	@ 0x24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f1c3 0307 	rsb	r3, r3, #7
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	bf28      	it	cs
 8002d0a:	2304      	movcs	r3, #4
 8002d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3304      	adds	r3, #4
 8002d12:	2b06      	cmp	r3, #6
 8002d14:	d902      	bls.n	8002d1c <NVIC_EncodePriority+0x30>
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3b03      	subs	r3, #3
 8002d1a:	e000      	b.n	8002d1e <NVIC_EncodePriority+0x32>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43da      	mvns	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	401a      	ands	r2, r3
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d34:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3e:	43d9      	mvns	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d44:	4313      	orrs	r3, r2
         );
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3724      	adds	r7, #36	@ 0x24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
	...

08002d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d64:	d301      	bcc.n	8002d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d66:	2301      	movs	r3, #1
 8002d68:	e00f      	b.n	8002d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d94 <SysTick_Config+0x40>)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d72:	210f      	movs	r1, #15
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d78:	f7ff ff8e 	bl	8002c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d7c:	4b05      	ldr	r3, [pc, #20]	@ (8002d94 <SysTick_Config+0x40>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d82:	4b04      	ldr	r3, [pc, #16]	@ (8002d94 <SysTick_Config+0x40>)
 8002d84:	2207      	movs	r2, #7
 8002d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	e000e010 	.word	0xe000e010

08002d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff ff47 	bl	8002c34 <__NVIC_SetPriorityGrouping>
}
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b086      	sub	sp, #24
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	4603      	mov	r3, r0
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	607a      	str	r2, [r7, #4]
 8002dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dc0:	f7ff ff5c 	bl	8002c7c <__NVIC_GetPriorityGrouping>
 8002dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	6978      	ldr	r0, [r7, #20]
 8002dcc:	f7ff ff8e 	bl	8002cec <NVIC_EncodePriority>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff ff5d 	bl	8002c98 <__NVIC_SetPriority>
}
 8002dde:	bf00      	nop
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff ffb0 	bl	8002d54 <SysTick_Config>
 8002df4:	4603      	mov	r3, r0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b089      	sub	sp, #36	@ 0x24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e16:	2300      	movs	r3, #0
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	e159      	b.n	80030d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	f040 8148 	bne.w	80030ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d005      	beq.n	8002e52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d130      	bne.n	8002eb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4013      	ands	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e88:	2201      	movs	r2, #1
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	091b      	lsrs	r3, r3, #4
 8002e9e:	f003 0201 	and.w	r2, r3, #1
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d017      	beq.n	8002ef0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	2203      	movs	r2, #3
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 0303 	and.w	r3, r3, #3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d123      	bne.n	8002f44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	08da      	lsrs	r2, r3, #3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3208      	adds	r2, #8
 8002f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	220f      	movs	r2, #15
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	08da      	lsrs	r2, r3, #3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3208      	adds	r2, #8
 8002f3e:	69b9      	ldr	r1, [r7, #24]
 8002f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	2203      	movs	r2, #3
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 0203 	and.w	r2, r3, #3
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 80a2 	beq.w	80030ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	4b57      	ldr	r3, [pc, #348]	@ (80030e8 <HAL_GPIO_Init+0x2e8>)
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f8e:	4a56      	ldr	r2, [pc, #344]	@ (80030e8 <HAL_GPIO_Init+0x2e8>)
 8002f90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f94:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f96:	4b54      	ldr	r3, [pc, #336]	@ (80030e8 <HAL_GPIO_Init+0x2e8>)
 8002f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fa2:	4a52      	ldr	r2, [pc, #328]	@ (80030ec <HAL_GPIO_Init+0x2ec>)
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	089b      	lsrs	r3, r3, #2
 8002fa8:	3302      	adds	r3, #2
 8002faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	220f      	movs	r2, #15
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a49      	ldr	r2, [pc, #292]	@ (80030f0 <HAL_GPIO_Init+0x2f0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d019      	beq.n	8003002 <HAL_GPIO_Init+0x202>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a48      	ldr	r2, [pc, #288]	@ (80030f4 <HAL_GPIO_Init+0x2f4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d013      	beq.n	8002ffe <HAL_GPIO_Init+0x1fe>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a47      	ldr	r2, [pc, #284]	@ (80030f8 <HAL_GPIO_Init+0x2f8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00d      	beq.n	8002ffa <HAL_GPIO_Init+0x1fa>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a46      	ldr	r2, [pc, #280]	@ (80030fc <HAL_GPIO_Init+0x2fc>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d007      	beq.n	8002ff6 <HAL_GPIO_Init+0x1f6>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a45      	ldr	r2, [pc, #276]	@ (8003100 <HAL_GPIO_Init+0x300>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d101      	bne.n	8002ff2 <HAL_GPIO_Init+0x1f2>
 8002fee:	2304      	movs	r3, #4
 8002ff0:	e008      	b.n	8003004 <HAL_GPIO_Init+0x204>
 8002ff2:	2307      	movs	r3, #7
 8002ff4:	e006      	b.n	8003004 <HAL_GPIO_Init+0x204>
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e004      	b.n	8003004 <HAL_GPIO_Init+0x204>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e002      	b.n	8003004 <HAL_GPIO_Init+0x204>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <HAL_GPIO_Init+0x204>
 8003002:	2300      	movs	r3, #0
 8003004:	69fa      	ldr	r2, [r7, #28]
 8003006:	f002 0203 	and.w	r2, r2, #3
 800300a:	0092      	lsls	r2, r2, #2
 800300c:	4093      	lsls	r3, r2
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4313      	orrs	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003014:	4935      	ldr	r1, [pc, #212]	@ (80030ec <HAL_GPIO_Init+0x2ec>)
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	089b      	lsrs	r3, r3, #2
 800301a:	3302      	adds	r3, #2
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003022:	4b38      	ldr	r3, [pc, #224]	@ (8003104 <HAL_GPIO_Init+0x304>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003046:	4a2f      	ldr	r2, [pc, #188]	@ (8003104 <HAL_GPIO_Init+0x304>)
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800304c:	4b2d      	ldr	r3, [pc, #180]	@ (8003104 <HAL_GPIO_Init+0x304>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	4313      	orrs	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003070:	4a24      	ldr	r2, [pc, #144]	@ (8003104 <HAL_GPIO_Init+0x304>)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003076:	4b23      	ldr	r3, [pc, #140]	@ (8003104 <HAL_GPIO_Init+0x304>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	43db      	mvns	r3, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4013      	ands	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	4313      	orrs	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800309a:	4a1a      	ldr	r2, [pc, #104]	@ (8003104 <HAL_GPIO_Init+0x304>)
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030a0:	4b18      	ldr	r3, [pc, #96]	@ (8003104 <HAL_GPIO_Init+0x304>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030c4:	4a0f      	ldr	r2, [pc, #60]	@ (8003104 <HAL_GPIO_Init+0x304>)
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	3301      	adds	r3, #1
 80030ce:	61fb      	str	r3, [r7, #28]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	2b0f      	cmp	r3, #15
 80030d4:	f67f aea2 	bls.w	8002e1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030d8:	bf00      	nop
 80030da:	bf00      	nop
 80030dc:	3724      	adds	r7, #36	@ 0x24
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40013800 	.word	0x40013800
 80030f0:	40020000 	.word	0x40020000
 80030f4:	40020400 	.word	0x40020400
 80030f8:	40020800 	.word	0x40020800
 80030fc:	40020c00 	.word	0x40020c00
 8003100:	40021000 	.word	0x40021000
 8003104:	40013c00 	.word	0x40013c00

08003108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	807b      	strh	r3, [r7, #2]
 8003114:	4613      	mov	r3, r2
 8003116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003118:	787b      	ldrb	r3, [r7, #1]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800311e:	887a      	ldrh	r2, [r7, #2]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003124:	e003      	b.n	800312e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003126:	887b      	ldrh	r3, [r7, #2]
 8003128:	041a      	lsls	r2, r3, #16
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	619a      	str	r2, [r3, #24]
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e267      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d075      	beq.n	8003246 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800315a:	4b88      	ldr	r3, [pc, #544]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b04      	cmp	r3, #4
 8003164:	d00c      	beq.n	8003180 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003166:	4b85      	ldr	r3, [pc, #532]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800316e:	2b08      	cmp	r3, #8
 8003170:	d112      	bne.n	8003198 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003172:	4b82      	ldr	r3, [pc, #520]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800317a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800317e:	d10b      	bne.n	8003198 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003180:	4b7e      	ldr	r3, [pc, #504]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d05b      	beq.n	8003244 <HAL_RCC_OscConfig+0x108>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d157      	bne.n	8003244 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e242      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a0:	d106      	bne.n	80031b0 <HAL_RCC_OscConfig+0x74>
 80031a2:	4b76      	ldr	r3, [pc, #472]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a75      	ldr	r2, [pc, #468]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	e01d      	b.n	80031ec <HAL_RCC_OscConfig+0xb0>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031b8:	d10c      	bne.n	80031d4 <HAL_RCC_OscConfig+0x98>
 80031ba:	4b70      	ldr	r3, [pc, #448]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a6f      	ldr	r2, [pc, #444]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	4b6d      	ldr	r3, [pc, #436]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a6c      	ldr	r2, [pc, #432]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	e00b      	b.n	80031ec <HAL_RCC_OscConfig+0xb0>
 80031d4:	4b69      	ldr	r3, [pc, #420]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a68      	ldr	r2, [pc, #416]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031de:	6013      	str	r3, [r2, #0]
 80031e0:	4b66      	ldr	r3, [pc, #408]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a65      	ldr	r2, [pc, #404]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80031e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d013      	beq.n	800321c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f4:	f7ff fd12 	bl	8002c1c <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031fc:	f7ff fd0e 	bl	8002c1c <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b64      	cmp	r3, #100	@ 0x64
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e207      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320e:	4b5b      	ldr	r3, [pc, #364]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0f0      	beq.n	80031fc <HAL_RCC_OscConfig+0xc0>
 800321a:	e014      	b.n	8003246 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7ff fcfe 	bl	8002c1c <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003224:	f7ff fcfa 	bl	8002c1c <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b64      	cmp	r3, #100	@ 0x64
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e1f3      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003236:	4b51      	ldr	r3, [pc, #324]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0xe8>
 8003242:	e000      	b.n	8003246 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d063      	beq.n	800331a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003252:	4b4a      	ldr	r3, [pc, #296]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00b      	beq.n	8003276 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800325e:	4b47      	ldr	r3, [pc, #284]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003266:	2b08      	cmp	r3, #8
 8003268:	d11c      	bne.n	80032a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800326a:	4b44      	ldr	r3, [pc, #272]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d116      	bne.n	80032a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003276:	4b41      	ldr	r3, [pc, #260]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_RCC_OscConfig+0x152>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d001      	beq.n	800328e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e1c7      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328e:	4b3b      	ldr	r3, [pc, #236]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4937      	ldr	r1, [pc, #220]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032a2:	e03a      	b.n	800331a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d020      	beq.n	80032ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032ac:	4b34      	ldr	r3, [pc, #208]	@ (8003380 <HAL_RCC_OscConfig+0x244>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b2:	f7ff fcb3 	bl	8002c1c <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ba:	f7ff fcaf 	bl	8002c1c <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e1a8      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032cc:	4b2b      	ldr	r3, [pc, #172]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0f0      	beq.n	80032ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d8:	4b28      	ldr	r3, [pc, #160]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4925      	ldr	r1, [pc, #148]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	600b      	str	r3, [r1, #0]
 80032ec:	e015      	b.n	800331a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ee:	4b24      	ldr	r3, [pc, #144]	@ (8003380 <HAL_RCC_OscConfig+0x244>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7ff fc92 	bl	8002c1c <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032fc:	f7ff fc8e 	bl	8002c1c <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e187      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330e:	4b1b      	ldr	r3, [pc, #108]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d036      	beq.n	8003394 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d016      	beq.n	800335c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800332e:	4b15      	ldr	r3, [pc, #84]	@ (8003384 <HAL_RCC_OscConfig+0x248>)
 8003330:	2201      	movs	r2, #1
 8003332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003334:	f7ff fc72 	bl	8002c1c <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800333c:	f7ff fc6e 	bl	8002c1c <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e167      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800334e:	4b0b      	ldr	r3, [pc, #44]	@ (800337c <HAL_RCC_OscConfig+0x240>)
 8003350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0f0      	beq.n	800333c <HAL_RCC_OscConfig+0x200>
 800335a:	e01b      	b.n	8003394 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800335c:	4b09      	ldr	r3, [pc, #36]	@ (8003384 <HAL_RCC_OscConfig+0x248>)
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003362:	f7ff fc5b 	bl	8002c1c <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003368:	e00e      	b.n	8003388 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800336a:	f7ff fc57 	bl	8002c1c <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d907      	bls.n	8003388 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e150      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
 800337c:	40023800 	.word	0x40023800
 8003380:	42470000 	.word	0x42470000
 8003384:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003388:	4b88      	ldr	r3, [pc, #544]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800338a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1ea      	bne.n	800336a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 8097 	beq.w	80034d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a2:	2300      	movs	r3, #0
 80033a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a6:	4b81      	ldr	r3, [pc, #516]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10f      	bne.n	80033d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	4b7d      	ldr	r3, [pc, #500]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ba:	4a7c      	ldr	r2, [pc, #496]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80033bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033c2:	4b7a      	ldr	r3, [pc, #488]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ca:	60bb      	str	r3, [r7, #8]
 80033cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ce:	2301      	movs	r3, #1
 80033d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d2:	4b77      	ldr	r3, [pc, #476]	@ (80035b0 <HAL_RCC_OscConfig+0x474>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d118      	bne.n	8003410 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033de:	4b74      	ldr	r3, [pc, #464]	@ (80035b0 <HAL_RCC_OscConfig+0x474>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a73      	ldr	r2, [pc, #460]	@ (80035b0 <HAL_RCC_OscConfig+0x474>)
 80033e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ea:	f7ff fc17 	bl	8002c1c <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f2:	f7ff fc13 	bl	8002c1c <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e10c      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003404:	4b6a      	ldr	r3, [pc, #424]	@ (80035b0 <HAL_RCC_OscConfig+0x474>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0f0      	beq.n	80033f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d106      	bne.n	8003426 <HAL_RCC_OscConfig+0x2ea>
 8003418:	4b64      	ldr	r3, [pc, #400]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800341c:	4a63      	ldr	r2, [pc, #396]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	6713      	str	r3, [r2, #112]	@ 0x70
 8003424:	e01c      	b.n	8003460 <HAL_RCC_OscConfig+0x324>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b05      	cmp	r3, #5
 800342c:	d10c      	bne.n	8003448 <HAL_RCC_OscConfig+0x30c>
 800342e:	4b5f      	ldr	r3, [pc, #380]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003432:	4a5e      	ldr	r2, [pc, #376]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003434:	f043 0304 	orr.w	r3, r3, #4
 8003438:	6713      	str	r3, [r2, #112]	@ 0x70
 800343a:	4b5c      	ldr	r3, [pc, #368]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343e:	4a5b      	ldr	r2, [pc, #364]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	6713      	str	r3, [r2, #112]	@ 0x70
 8003446:	e00b      	b.n	8003460 <HAL_RCC_OscConfig+0x324>
 8003448:	4b58      	ldr	r3, [pc, #352]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800344a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344c:	4a57      	ldr	r2, [pc, #348]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800344e:	f023 0301 	bic.w	r3, r3, #1
 8003452:	6713      	str	r3, [r2, #112]	@ 0x70
 8003454:	4b55      	ldr	r3, [pc, #340]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003458:	4a54      	ldr	r2, [pc, #336]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 800345a:	f023 0304 	bic.w	r3, r3, #4
 800345e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d015      	beq.n	8003494 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003468:	f7ff fbd8 	bl	8002c1c <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346e:	e00a      	b.n	8003486 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003470:	f7ff fbd4 	bl	8002c1c <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e0cb      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003486:	4b49      	ldr	r3, [pc, #292]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0ee      	beq.n	8003470 <HAL_RCC_OscConfig+0x334>
 8003492:	e014      	b.n	80034be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003494:	f7ff fbc2 	bl	8002c1c <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800349a:	e00a      	b.n	80034b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800349c:	f7ff fbbe 	bl	8002c1c <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e0b5      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b2:	4b3e      	ldr	r3, [pc, #248]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1ee      	bne.n	800349c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034be:	7dfb      	ldrb	r3, [r7, #23]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d105      	bne.n	80034d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c4:	4b39      	ldr	r3, [pc, #228]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80034c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c8:	4a38      	ldr	r2, [pc, #224]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80034ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80a1 	beq.w	800361c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034da:	4b34      	ldr	r3, [pc, #208]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d05c      	beq.n	80035a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d141      	bne.n	8003572 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ee:	4b31      	ldr	r3, [pc, #196]	@ (80035b4 <HAL_RCC_OscConfig+0x478>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f4:	f7ff fb92 	bl	8002c1c <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034fc:	f7ff fb8e 	bl	8002c1c <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e087      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350e:	4b27      	ldr	r3, [pc, #156]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69da      	ldr	r2, [r3, #28]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003528:	019b      	lsls	r3, r3, #6
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003530:	085b      	lsrs	r3, r3, #1
 8003532:	3b01      	subs	r3, #1
 8003534:	041b      	lsls	r3, r3, #16
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353c:	061b      	lsls	r3, r3, #24
 800353e:	491b      	ldr	r1, [pc, #108]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003540:	4313      	orrs	r3, r2
 8003542:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003544:	4b1b      	ldr	r3, [pc, #108]	@ (80035b4 <HAL_RCC_OscConfig+0x478>)
 8003546:	2201      	movs	r2, #1
 8003548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354a:	f7ff fb67 	bl	8002c1c <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003552:	f7ff fb63 	bl	8002c1c <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e05c      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003564:	4b11      	ldr	r3, [pc, #68]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x416>
 8003570:	e054      	b.n	800361c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003572:	4b10      	ldr	r3, [pc, #64]	@ (80035b4 <HAL_RCC_OscConfig+0x478>)
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7ff fb50 	bl	8002c1c <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003580:	f7ff fb4c 	bl	8002c1c <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e045      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003592:	4b06      	ldr	r3, [pc, #24]	@ (80035ac <HAL_RCC_OscConfig+0x470>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x444>
 800359e:	e03d      	b.n	800361c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d107      	bne.n	80035b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e038      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
 80035ac:	40023800 	.word	0x40023800
 80035b0:	40007000 	.word	0x40007000
 80035b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003628 <HAL_RCC_OscConfig+0x4ec>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d028      	beq.n	8003618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d121      	bne.n	8003618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035de:	429a      	cmp	r2, r3
 80035e0:	d11a      	bne.n	8003618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035e8:	4013      	ands	r3, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d111      	bne.n	8003618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fe:	085b      	lsrs	r3, r3, #1
 8003600:	3b01      	subs	r3, #1
 8003602:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003604:	429a      	cmp	r2, r3
 8003606:	d107      	bne.n	8003618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003612:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003614:	429a      	cmp	r2, r3
 8003616:	d001      	beq.n	800361c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e000      	b.n	800361e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40023800 	.word	0x40023800

0800362c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0cc      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003640:	4b68      	ldr	r3, [pc, #416]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d90c      	bls.n	8003668 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364e:	4b65      	ldr	r3, [pc, #404]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003656:	4b63      	ldr	r3, [pc, #396]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d001      	beq.n	8003668 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0b8      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d020      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003680:	4b59      	ldr	r3, [pc, #356]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	4a58      	ldr	r2, [pc, #352]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800368a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d005      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003698:	4b53      	ldr	r3, [pc, #332]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	4a52      	ldr	r2, [pc, #328]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a4:	4b50      	ldr	r3, [pc, #320]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	494d      	ldr	r1, [pc, #308]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d044      	beq.n	800374c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d107      	bne.n	80036da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ca:	4b47      	ldr	r3, [pc, #284]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d119      	bne.n	800370a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e07f      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d003      	beq.n	80036ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e6:	2b03      	cmp	r3, #3
 80036e8:	d107      	bne.n	80036fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ea:	4b3f      	ldr	r3, [pc, #252]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d109      	bne.n	800370a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e06f      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fa:	4b3b      	ldr	r3, [pc, #236]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e067      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800370a:	4b37      	ldr	r3, [pc, #220]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f023 0203 	bic.w	r2, r3, #3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	4934      	ldr	r1, [pc, #208]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	4313      	orrs	r3, r2
 800371a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800371c:	f7ff fa7e 	bl	8002c1c <HAL_GetTick>
 8003720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003722:	e00a      	b.n	800373a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003724:	f7ff fa7a 	bl	8002c1c <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003732:	4293      	cmp	r3, r2
 8003734:	d901      	bls.n	800373a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e04f      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373a:	4b2b      	ldr	r3, [pc, #172]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 020c 	and.w	r2, r3, #12
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	429a      	cmp	r2, r3
 800374a:	d1eb      	bne.n	8003724 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800374c:	4b25      	ldr	r3, [pc, #148]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d20c      	bcs.n	8003774 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375a:	4b22      	ldr	r3, [pc, #136]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	4b20      	ldr	r3, [pc, #128]	@ (80037e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e032      	b.n	80037da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003780:	4b19      	ldr	r3, [pc, #100]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	4916      	ldr	r1, [pc, #88]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	4313      	orrs	r3, r2
 8003790:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d009      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800379e:	4b12      	ldr	r3, [pc, #72]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	490e      	ldr	r1, [pc, #56]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037b2:	f000 f821 	bl	80037f8 <HAL_RCC_GetSysClockFreq>
 80037b6:	4602      	mov	r2, r0
 80037b8:	4b0b      	ldr	r3, [pc, #44]	@ (80037e8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	091b      	lsrs	r3, r3, #4
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	490a      	ldr	r1, [pc, #40]	@ (80037ec <HAL_RCC_ClockConfig+0x1c0>)
 80037c4:	5ccb      	ldrb	r3, [r1, r3]
 80037c6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ca:	4a09      	ldr	r2, [pc, #36]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c4>)
 80037cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037ce:	4b09      	ldr	r3, [pc, #36]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff f9de 	bl	8002b94 <HAL_InitTick>

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40023c00 	.word	0x40023c00
 80037e8:	40023800 	.word	0x40023800
 80037ec:	080056c0 	.word	0x080056c0
 80037f0:	20000000 	.word	0x20000000
 80037f4:	20000004 	.word	0x20000004

080037f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037fc:	b094      	sub	sp, #80	@ 0x50
 80037fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	647b      	str	r3, [r7, #68]	@ 0x44
 8003804:	2300      	movs	r3, #0
 8003806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003808:	2300      	movs	r3, #0
 800380a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003810:	4b79      	ldr	r3, [pc, #484]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 030c 	and.w	r3, r3, #12
 8003818:	2b08      	cmp	r3, #8
 800381a:	d00d      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0x40>
 800381c:	2b08      	cmp	r3, #8
 800381e:	f200 80e1 	bhi.w	80039e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_RCC_GetSysClockFreq+0x34>
 8003826:	2b04      	cmp	r3, #4
 8003828:	d003      	beq.n	8003832 <HAL_RCC_GetSysClockFreq+0x3a>
 800382a:	e0db      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800382c:	4b73      	ldr	r3, [pc, #460]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x204>)
 800382e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003830:	e0db      	b.n	80039ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003832:	4b73      	ldr	r3, [pc, #460]	@ (8003a00 <HAL_RCC_GetSysClockFreq+0x208>)
 8003834:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003836:	e0d8      	b.n	80039ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003838:	4b6f      	ldr	r3, [pc, #444]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003840:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003842:	4b6d      	ldr	r3, [pc, #436]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d063      	beq.n	8003916 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800384e:	4b6a      	ldr	r3, [pc, #424]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	099b      	lsrs	r3, r3, #6
 8003854:	2200      	movs	r2, #0
 8003856:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003858:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800385a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800385c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003860:	633b      	str	r3, [r7, #48]	@ 0x30
 8003862:	2300      	movs	r3, #0
 8003864:	637b      	str	r3, [r7, #52]	@ 0x34
 8003866:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800386a:	4622      	mov	r2, r4
 800386c:	462b      	mov	r3, r5
 800386e:	f04f 0000 	mov.w	r0, #0
 8003872:	f04f 0100 	mov.w	r1, #0
 8003876:	0159      	lsls	r1, r3, #5
 8003878:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800387c:	0150      	lsls	r0, r2, #5
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	4621      	mov	r1, r4
 8003884:	1a51      	subs	r1, r2, r1
 8003886:	6139      	str	r1, [r7, #16]
 8003888:	4629      	mov	r1, r5
 800388a:	eb63 0301 	sbc.w	r3, r3, r1
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800389c:	4659      	mov	r1, fp
 800389e:	018b      	lsls	r3, r1, #6
 80038a0:	4651      	mov	r1, sl
 80038a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038a6:	4651      	mov	r1, sl
 80038a8:	018a      	lsls	r2, r1, #6
 80038aa:	4651      	mov	r1, sl
 80038ac:	ebb2 0801 	subs.w	r8, r2, r1
 80038b0:	4659      	mov	r1, fp
 80038b2:	eb63 0901 	sbc.w	r9, r3, r1
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038ca:	4690      	mov	r8, r2
 80038cc:	4699      	mov	r9, r3
 80038ce:	4623      	mov	r3, r4
 80038d0:	eb18 0303 	adds.w	r3, r8, r3
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	462b      	mov	r3, r5
 80038d8:	eb49 0303 	adc.w	r3, r9, r3
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038ea:	4629      	mov	r1, r5
 80038ec:	024b      	lsls	r3, r1, #9
 80038ee:	4621      	mov	r1, r4
 80038f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038f4:	4621      	mov	r1, r4
 80038f6:	024a      	lsls	r2, r1, #9
 80038f8:	4610      	mov	r0, r2
 80038fa:	4619      	mov	r1, r3
 80038fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038fe:	2200      	movs	r2, #0
 8003900:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003902:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003904:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003908:	f7fd f8d0 	bl	8000aac <__aeabi_uldivmod>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4613      	mov	r3, r2
 8003912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003914:	e058      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003916:	4b38      	ldr	r3, [pc, #224]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	099b      	lsrs	r3, r3, #6
 800391c:	2200      	movs	r2, #0
 800391e:	4618      	mov	r0, r3
 8003920:	4611      	mov	r1, r2
 8003922:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003926:	623b      	str	r3, [r7, #32]
 8003928:	2300      	movs	r3, #0
 800392a:	627b      	str	r3, [r7, #36]	@ 0x24
 800392c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003930:	4642      	mov	r2, r8
 8003932:	464b      	mov	r3, r9
 8003934:	f04f 0000 	mov.w	r0, #0
 8003938:	f04f 0100 	mov.w	r1, #0
 800393c:	0159      	lsls	r1, r3, #5
 800393e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003942:	0150      	lsls	r0, r2, #5
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4641      	mov	r1, r8
 800394a:	ebb2 0a01 	subs.w	sl, r2, r1
 800394e:	4649      	mov	r1, r9
 8003950:	eb63 0b01 	sbc.w	fp, r3, r1
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003960:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003964:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003968:	ebb2 040a 	subs.w	r4, r2, sl
 800396c:	eb63 050b 	sbc.w	r5, r3, fp
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	00eb      	lsls	r3, r5, #3
 800397a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800397e:	00e2      	lsls	r2, r4, #3
 8003980:	4614      	mov	r4, r2
 8003982:	461d      	mov	r5, r3
 8003984:	4643      	mov	r3, r8
 8003986:	18e3      	adds	r3, r4, r3
 8003988:	603b      	str	r3, [r7, #0]
 800398a:	464b      	mov	r3, r9
 800398c:	eb45 0303 	adc.w	r3, r5, r3
 8003990:	607b      	str	r3, [r7, #4]
 8003992:	f04f 0200 	mov.w	r2, #0
 8003996:	f04f 0300 	mov.w	r3, #0
 800399a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800399e:	4629      	mov	r1, r5
 80039a0:	028b      	lsls	r3, r1, #10
 80039a2:	4621      	mov	r1, r4
 80039a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039a8:	4621      	mov	r1, r4
 80039aa:	028a      	lsls	r2, r1, #10
 80039ac:	4610      	mov	r0, r2
 80039ae:	4619      	mov	r1, r3
 80039b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039b2:	2200      	movs	r2, #0
 80039b4:	61bb      	str	r3, [r7, #24]
 80039b6:	61fa      	str	r2, [r7, #28]
 80039b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039bc:	f7fd f876 	bl	8000aac <__aeabi_uldivmod>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4613      	mov	r3, r2
 80039c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039c8:	4b0b      	ldr	r3, [pc, #44]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	0c1b      	lsrs	r3, r3, #16
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	3301      	adds	r3, #1
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80039d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039e2:	e002      	b.n	80039ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039e4:	4b05      	ldr	r3, [pc, #20]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x204>)
 80039e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3750      	adds	r7, #80	@ 0x50
 80039f0:	46bd      	mov	sp, r7
 80039f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039f6:	bf00      	nop
 80039f8:	40023800 	.word	0x40023800
 80039fc:	00f42400 	.word	0x00f42400
 8003a00:	007a1200 	.word	0x007a1200

08003a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a08:	4b03      	ldr	r3, [pc, #12]	@ (8003a18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	20000000 	.word	0x20000000

08003a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a20:	f7ff fff0 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8003a24:	4602      	mov	r2, r0
 8003a26:	4b05      	ldr	r3, [pc, #20]	@ (8003a3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	0a9b      	lsrs	r3, r3, #10
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	4903      	ldr	r1, [pc, #12]	@ (8003a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a32:	5ccb      	ldrb	r3, [r1, r3]
 8003a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	080056d0 	.word	0x080056d0

08003a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a48:	f7ff ffdc 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	0b5b      	lsrs	r3, r3, #13
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	4903      	ldr	r1, [pc, #12]	@ (8003a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a5a:	5ccb      	ldrb	r3, [r1, r3]
 8003a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40023800 	.word	0x40023800
 8003a68:	080056d0 	.word	0x080056d0

08003a6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e03f      	b.n	8003afe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fe f862 	bl	8001b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2224      	movs	r2, #36	@ 0x24
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003aae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f929 	bl	8003d08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ac4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695a      	ldr	r2, [r3, #20]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ad4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ae4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b08a      	sub	sp, #40	@ 0x28
 8003b0a:	af02      	add	r7, sp, #8
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	603b      	str	r3, [r7, #0]
 8003b12:	4613      	mov	r3, r2
 8003b14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b20      	cmp	r3, #32
 8003b24:	d17c      	bne.n	8003c20 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <HAL_UART_Transmit+0x2c>
 8003b2c:	88fb      	ldrh	r3, [r7, #6]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e075      	b.n	8003c22 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_UART_Transmit+0x3e>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e06e      	b.n	8003c22 <HAL_UART_Transmit+0x11c>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2221      	movs	r2, #33	@ 0x21
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b5a:	f7ff f85f 	bl	8002c1c <HAL_GetTick>
 8003b5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	88fa      	ldrh	r2, [r7, #6]
 8003b64:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	88fa      	ldrh	r2, [r7, #6]
 8003b6a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b74:	d108      	bne.n	8003b88 <HAL_UART_Transmit+0x82>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d104      	bne.n	8003b88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	e003      	b.n	8003b90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8003b98:	e02a      	b.n	8003bf0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	2180      	movs	r1, #128	@ 0x80
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f840 	bl	8003c2a <UART_WaitOnFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e036      	b.n	8003c22 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10b      	bne.n	8003bd2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	3302      	adds	r3, #2
 8003bce:	61bb      	str	r3, [r7, #24]
 8003bd0:	e007      	b.n	8003be2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	781a      	ldrb	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	3301      	adds	r3, #1
 8003be0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1cf      	bne.n	8003b9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2200      	movs	r2, #0
 8003c02:	2140      	movs	r1, #64	@ 0x40
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 f810 	bl	8003c2a <UART_WaitOnFlagUntilTimeout>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e006      	b.n	8003c22 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	e000      	b.n	8003c22 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c20:	2302      	movs	r3, #2
  }
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3720      	adds	r7, #32
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b090      	sub	sp, #64	@ 0x40
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	603b      	str	r3, [r7, #0]
 8003c36:	4613      	mov	r3, r2
 8003c38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c3a:	e050      	b.n	8003cde <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c42:	d04c      	beq.n	8003cde <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d007      	beq.n	8003c5a <UART_WaitOnFlagUntilTimeout+0x30>
 8003c4a:	f7fe ffe7 	bl	8002c1c <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d241      	bcs.n	8003cde <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	330c      	adds	r3, #12
 8003c60:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	330c      	adds	r3, #12
 8003c78:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c7a:	637a      	str	r2, [r7, #52]	@ 0x34
 8003c7c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e5      	bne.n	8003c5a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3314      	adds	r3, #20
 8003c94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	e853 3f00 	ldrex	r3, [r3]
 8003c9c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3314      	adds	r3, #20
 8003cac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003cae:	623a      	str	r2, [r7, #32]
 8003cb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb2:	69f9      	ldr	r1, [r7, #28]
 8003cb4:	6a3a      	ldr	r2, [r7, #32]
 8003cb6:	e841 2300 	strex	r3, r2, [r1]
 8003cba:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1e5      	bne.n	8003c8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e00f      	b.n	8003cfe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	bf0c      	ite	eq
 8003cee:	2301      	moveq	r3, #1
 8003cf0:	2300      	movne	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	79fb      	ldrb	r3, [r7, #7]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d09f      	beq.n	8003c3c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3740      	adds	r7, #64	@ 0x40
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
	...

08003d08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d0c:	b0c0      	sub	sp, #256	@ 0x100
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d24:	68d9      	ldr	r1, [r3, #12]
 8003d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	ea40 0301 	orr.w	r3, r0, r1
 8003d30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d60:	f021 010c 	bic.w	r1, r1, #12
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d6e:	430b      	orrs	r3, r1
 8003d70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d82:	6999      	ldr	r1, [r3, #24]
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	ea40 0301 	orr.w	r3, r0, r1
 8003d8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	4b8f      	ldr	r3, [pc, #572]	@ (8003fd4 <UART_SetConfig+0x2cc>)
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d005      	beq.n	8003da8 <UART_SetConfig+0xa0>
 8003d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	4b8d      	ldr	r3, [pc, #564]	@ (8003fd8 <UART_SetConfig+0x2d0>)
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d104      	bne.n	8003db2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003da8:	f7ff fe4c 	bl	8003a44 <HAL_RCC_GetPCLK2Freq>
 8003dac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003db0:	e003      	b.n	8003dba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003db2:	f7ff fe33 	bl	8003a1c <HAL_RCC_GetPCLK1Freq>
 8003db6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dc4:	f040 810c 	bne.w	8003fe0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003dd2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003dd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003dda:	4622      	mov	r2, r4
 8003ddc:	462b      	mov	r3, r5
 8003dde:	1891      	adds	r1, r2, r2
 8003de0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003de2:	415b      	adcs	r3, r3
 8003de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003de6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003dea:	4621      	mov	r1, r4
 8003dec:	eb12 0801 	adds.w	r8, r2, r1
 8003df0:	4629      	mov	r1, r5
 8003df2:	eb43 0901 	adc.w	r9, r3, r1
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e0a:	4690      	mov	r8, r2
 8003e0c:	4699      	mov	r9, r3
 8003e0e:	4623      	mov	r3, r4
 8003e10:	eb18 0303 	adds.w	r3, r8, r3
 8003e14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e18:	462b      	mov	r3, r5
 8003e1a:	eb49 0303 	adc.w	r3, r9, r3
 8003e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e2e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e36:	460b      	mov	r3, r1
 8003e38:	18db      	adds	r3, r3, r3
 8003e3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	eb42 0303 	adc.w	r3, r2, r3
 8003e42:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e4c:	f7fc fe2e 	bl	8000aac <__aeabi_uldivmod>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4b61      	ldr	r3, [pc, #388]	@ (8003fdc <UART_SetConfig+0x2d4>)
 8003e56:	fba3 2302 	umull	r2, r3, r3, r2
 8003e5a:	095b      	lsrs	r3, r3, #5
 8003e5c:	011c      	lsls	r4, r3, #4
 8003e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e62:	2200      	movs	r2, #0
 8003e64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e68:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e70:	4642      	mov	r2, r8
 8003e72:	464b      	mov	r3, r9
 8003e74:	1891      	adds	r1, r2, r2
 8003e76:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e78:	415b      	adcs	r3, r3
 8003e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e80:	4641      	mov	r1, r8
 8003e82:	eb12 0a01 	adds.w	sl, r2, r1
 8003e86:	4649      	mov	r1, r9
 8003e88:	eb43 0b01 	adc.w	fp, r3, r1
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ea0:	4692      	mov	sl, r2
 8003ea2:	469b      	mov	fp, r3
 8003ea4:	4643      	mov	r3, r8
 8003ea6:	eb1a 0303 	adds.w	r3, sl, r3
 8003eaa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003eae:	464b      	mov	r3, r9
 8003eb0:	eb4b 0303 	adc.w	r3, fp, r3
 8003eb4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ec4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ec8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	18db      	adds	r3, r3, r3
 8003ed0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	eb42 0303 	adc.w	r3, r2, r3
 8003ed8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ede:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ee2:	f7fc fde3 	bl	8000aac <__aeabi_uldivmod>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4611      	mov	r1, r2
 8003eec:	4b3b      	ldr	r3, [pc, #236]	@ (8003fdc <UART_SetConfig+0x2d4>)
 8003eee:	fba3 2301 	umull	r2, r3, r3, r1
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	2264      	movs	r2, #100	@ 0x64
 8003ef6:	fb02 f303 	mul.w	r3, r2, r3
 8003efa:	1acb      	subs	r3, r1, r3
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f02:	4b36      	ldr	r3, [pc, #216]	@ (8003fdc <UART_SetConfig+0x2d4>)
 8003f04:	fba3 2302 	umull	r2, r3, r3, r2
 8003f08:	095b      	lsrs	r3, r3, #5
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f10:	441c      	add	r4, r3
 8003f12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f16:	2200      	movs	r2, #0
 8003f18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f1c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f24:	4642      	mov	r2, r8
 8003f26:	464b      	mov	r3, r9
 8003f28:	1891      	adds	r1, r2, r2
 8003f2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f2c:	415b      	adcs	r3, r3
 8003f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f34:	4641      	mov	r1, r8
 8003f36:	1851      	adds	r1, r2, r1
 8003f38:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f3a:	4649      	mov	r1, r9
 8003f3c:	414b      	adcs	r3, r1
 8003f3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f4c:	4659      	mov	r1, fp
 8003f4e:	00cb      	lsls	r3, r1, #3
 8003f50:	4651      	mov	r1, sl
 8003f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f56:	4651      	mov	r1, sl
 8003f58:	00ca      	lsls	r2, r1, #3
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4603      	mov	r3, r0
 8003f60:	4642      	mov	r2, r8
 8003f62:	189b      	adds	r3, r3, r2
 8003f64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f68:	464b      	mov	r3, r9
 8003f6a:	460a      	mov	r2, r1
 8003f6c:	eb42 0303 	adc.w	r3, r2, r3
 8003f70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f80:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f88:	460b      	mov	r3, r1
 8003f8a:	18db      	adds	r3, r3, r3
 8003f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f8e:	4613      	mov	r3, r2
 8003f90:	eb42 0303 	adc.w	r3, r2, r3
 8003f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f9e:	f7fc fd85 	bl	8000aac <__aeabi_uldivmod>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8003fdc <UART_SetConfig+0x2d4>)
 8003fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fac:	095b      	lsrs	r3, r3, #5
 8003fae:	2164      	movs	r1, #100	@ 0x64
 8003fb0:	fb01 f303 	mul.w	r3, r1, r3
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	3332      	adds	r3, #50	@ 0x32
 8003fba:	4a08      	ldr	r2, [pc, #32]	@ (8003fdc <UART_SetConfig+0x2d4>)
 8003fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc0:	095b      	lsrs	r3, r3, #5
 8003fc2:	f003 0207 	and.w	r2, r3, #7
 8003fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4422      	add	r2, r4
 8003fce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fd0:	e106      	b.n	80041e0 <UART_SetConfig+0x4d8>
 8003fd2:	bf00      	nop
 8003fd4:	40011000 	.word	0x40011000
 8003fd8:	40011400 	.word	0x40011400
 8003fdc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003fea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003fee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ff2:	4642      	mov	r2, r8
 8003ff4:	464b      	mov	r3, r9
 8003ff6:	1891      	adds	r1, r2, r2
 8003ff8:	6239      	str	r1, [r7, #32]
 8003ffa:	415b      	adcs	r3, r3
 8003ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ffe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004002:	4641      	mov	r1, r8
 8004004:	1854      	adds	r4, r2, r1
 8004006:	4649      	mov	r1, r9
 8004008:	eb43 0501 	adc.w	r5, r3, r1
 800400c:	f04f 0200 	mov.w	r2, #0
 8004010:	f04f 0300 	mov.w	r3, #0
 8004014:	00eb      	lsls	r3, r5, #3
 8004016:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800401a:	00e2      	lsls	r2, r4, #3
 800401c:	4614      	mov	r4, r2
 800401e:	461d      	mov	r5, r3
 8004020:	4643      	mov	r3, r8
 8004022:	18e3      	adds	r3, r4, r3
 8004024:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004028:	464b      	mov	r3, r9
 800402a:	eb45 0303 	adc.w	r3, r5, r3
 800402e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800403e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004042:	f04f 0200 	mov.w	r2, #0
 8004046:	f04f 0300 	mov.w	r3, #0
 800404a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800404e:	4629      	mov	r1, r5
 8004050:	008b      	lsls	r3, r1, #2
 8004052:	4621      	mov	r1, r4
 8004054:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004058:	4621      	mov	r1, r4
 800405a:	008a      	lsls	r2, r1, #2
 800405c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004060:	f7fc fd24 	bl	8000aac <__aeabi_uldivmod>
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	4b60      	ldr	r3, [pc, #384]	@ (80041ec <UART_SetConfig+0x4e4>)
 800406a:	fba3 2302 	umull	r2, r3, r3, r2
 800406e:	095b      	lsrs	r3, r3, #5
 8004070:	011c      	lsls	r4, r3, #4
 8004072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004076:	2200      	movs	r2, #0
 8004078:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800407c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004080:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004084:	4642      	mov	r2, r8
 8004086:	464b      	mov	r3, r9
 8004088:	1891      	adds	r1, r2, r2
 800408a:	61b9      	str	r1, [r7, #24]
 800408c:	415b      	adcs	r3, r3
 800408e:	61fb      	str	r3, [r7, #28]
 8004090:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004094:	4641      	mov	r1, r8
 8004096:	1851      	adds	r1, r2, r1
 8004098:	6139      	str	r1, [r7, #16]
 800409a:	4649      	mov	r1, r9
 800409c:	414b      	adcs	r3, r1
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	f04f 0300 	mov.w	r3, #0
 80040a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040ac:	4659      	mov	r1, fp
 80040ae:	00cb      	lsls	r3, r1, #3
 80040b0:	4651      	mov	r1, sl
 80040b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040b6:	4651      	mov	r1, sl
 80040b8:	00ca      	lsls	r2, r1, #3
 80040ba:	4610      	mov	r0, r2
 80040bc:	4619      	mov	r1, r3
 80040be:	4603      	mov	r3, r0
 80040c0:	4642      	mov	r2, r8
 80040c2:	189b      	adds	r3, r3, r2
 80040c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040c8:	464b      	mov	r3, r9
 80040ca:	460a      	mov	r2, r1
 80040cc:	eb42 0303 	adc.w	r3, r2, r3
 80040d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80040ec:	4649      	mov	r1, r9
 80040ee:	008b      	lsls	r3, r1, #2
 80040f0:	4641      	mov	r1, r8
 80040f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040f6:	4641      	mov	r1, r8
 80040f8:	008a      	lsls	r2, r1, #2
 80040fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80040fe:	f7fc fcd5 	bl	8000aac <__aeabi_uldivmod>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4611      	mov	r1, r2
 8004108:	4b38      	ldr	r3, [pc, #224]	@ (80041ec <UART_SetConfig+0x4e4>)
 800410a:	fba3 2301 	umull	r2, r3, r3, r1
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	2264      	movs	r2, #100	@ 0x64
 8004112:	fb02 f303 	mul.w	r3, r2, r3
 8004116:	1acb      	subs	r3, r1, r3
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	3332      	adds	r3, #50	@ 0x32
 800411c:	4a33      	ldr	r2, [pc, #204]	@ (80041ec <UART_SetConfig+0x4e4>)
 800411e:	fba2 2303 	umull	r2, r3, r2, r3
 8004122:	095b      	lsrs	r3, r3, #5
 8004124:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004128:	441c      	add	r4, r3
 800412a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800412e:	2200      	movs	r2, #0
 8004130:	673b      	str	r3, [r7, #112]	@ 0x70
 8004132:	677a      	str	r2, [r7, #116]	@ 0x74
 8004134:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004138:	4642      	mov	r2, r8
 800413a:	464b      	mov	r3, r9
 800413c:	1891      	adds	r1, r2, r2
 800413e:	60b9      	str	r1, [r7, #8]
 8004140:	415b      	adcs	r3, r3
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004148:	4641      	mov	r1, r8
 800414a:	1851      	adds	r1, r2, r1
 800414c:	6039      	str	r1, [r7, #0]
 800414e:	4649      	mov	r1, r9
 8004150:	414b      	adcs	r3, r1
 8004152:	607b      	str	r3, [r7, #4]
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	f04f 0300 	mov.w	r3, #0
 800415c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004160:	4659      	mov	r1, fp
 8004162:	00cb      	lsls	r3, r1, #3
 8004164:	4651      	mov	r1, sl
 8004166:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800416a:	4651      	mov	r1, sl
 800416c:	00ca      	lsls	r2, r1, #3
 800416e:	4610      	mov	r0, r2
 8004170:	4619      	mov	r1, r3
 8004172:	4603      	mov	r3, r0
 8004174:	4642      	mov	r2, r8
 8004176:	189b      	adds	r3, r3, r2
 8004178:	66bb      	str	r3, [r7, #104]	@ 0x68
 800417a:	464b      	mov	r3, r9
 800417c:	460a      	mov	r2, r1
 800417e:	eb42 0303 	adc.w	r3, r2, r3
 8004182:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	663b      	str	r3, [r7, #96]	@ 0x60
 800418e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800419c:	4649      	mov	r1, r9
 800419e:	008b      	lsls	r3, r1, #2
 80041a0:	4641      	mov	r1, r8
 80041a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041a6:	4641      	mov	r1, r8
 80041a8:	008a      	lsls	r2, r1, #2
 80041aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80041ae:	f7fc fc7d 	bl	8000aac <__aeabi_uldivmod>
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	4b0d      	ldr	r3, [pc, #52]	@ (80041ec <UART_SetConfig+0x4e4>)
 80041b8:	fba3 1302 	umull	r1, r3, r3, r2
 80041bc:	095b      	lsrs	r3, r3, #5
 80041be:	2164      	movs	r1, #100	@ 0x64
 80041c0:	fb01 f303 	mul.w	r3, r1, r3
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	3332      	adds	r3, #50	@ 0x32
 80041ca:	4a08      	ldr	r2, [pc, #32]	@ (80041ec <UART_SetConfig+0x4e4>)
 80041cc:	fba2 2303 	umull	r2, r3, r2, r3
 80041d0:	095b      	lsrs	r3, r3, #5
 80041d2:	f003 020f 	and.w	r2, r3, #15
 80041d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4422      	add	r2, r4
 80041de:	609a      	str	r2, [r3, #8]
}
 80041e0:	bf00      	nop
 80041e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80041e6:	46bd      	mov	sp, r7
 80041e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ec:	51eb851f 	.word	0x51eb851f

080041f0 <TaskEval>:
 80041f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041f2:	b08b      	sub	sp, #44	@ 0x2c
 80041f4:	af02      	add	r7, sp, #8
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8004204:	4866      	ldr	r0, [pc, #408]	@ (80043a0 <TaskEval+0x1b0>)
 8004206:	f000 fb09 	bl	800481c <puts>
 800420a:	2300      	movs	r3, #0
 800420c:	61fb      	str	r3, [r7, #28]
 800420e:	e037      	b.n	8004280 <TaskEval+0x90>
 8004210:	4a64      	ldr	r2, [pc, #400]	@ (80043a4 <TaskEval+0x1b4>)
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004218:	4b63      	ldr	r3, [pc, #396]	@ (80043a8 <TaskEval+0x1b8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	4618      	mov	r0, r3
 8004220:	f7fc f990 	bl	8000544 <__aeabi_ui2d>
 8004224:	4604      	mov	r4, r0
 8004226:	460d      	mov	r5, r1
 8004228:	f7ff fae6 	bl	80037f8 <HAL_RCC_GetSysClockFreq>
 800422c:	4603      	mov	r3, r0
 800422e:	4618      	mov	r0, r3
 8004230:	f7fc f988 	bl	8000544 <__aeabi_ui2d>
 8004234:	a358      	add	r3, pc, #352	@ (adr r3, 8004398 <TaskEval+0x1a8>)
 8004236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423a:	f7fc fb27 	bl	800088c <__aeabi_ddiv>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4620      	mov	r0, r4
 8004244:	4629      	mov	r1, r5
 8004246:	f7fc fb21 	bl	800088c <__aeabi_ddiv>
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	ec43 2b17 	vmov	d7, r2, r3
 8004252:	eeb0 0a47 	vmov.f32	s0, s14
 8004256:	eef0 0a67 	vmov.f32	s1, s15
 800425a:	f001 f941 	bl	80054e0 <round>
 800425e:	ed87 0b02 	vstr	d0, [r7, #8]
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	1c5c      	adds	r4, r3, #1
 8004266:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800426a:	f7fc fbf7 	bl	8000a5c <__aeabi_d2iz>
 800426e:	4603      	mov	r3, r0
 8004270:	461a      	mov	r2, r3
 8004272:	4621      	mov	r1, r4
 8004274:	484d      	ldr	r0, [pc, #308]	@ (80043ac <TaskEval+0x1bc>)
 8004276:	f000 fa69 	bl	800474c <iprintf>
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	3301      	adds	r3, #1
 800427e:	61fb      	str	r3, [r7, #28]
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	2b09      	cmp	r3, #9
 8004284:	ddc4      	ble.n	8004210 <TaskEval+0x20>
 8004286:	484a      	ldr	r0, [pc, #296]	@ (80043b0 <TaskEval+0x1c0>)
 8004288:	f000 fac8 	bl	800481c <puts>
 800428c:	4849      	ldr	r0, [pc, #292]	@ (80043b4 <TaskEval+0x1c4>)
 800428e:	f000 fac5 	bl	800481c <puts>
 8004292:	2300      	movs	r3, #0
 8004294:	61bb      	str	r3, [r7, #24]
 8004296:	e071      	b.n	800437c <TaskEval+0x18c>
 8004298:	4a47      	ldr	r2, [pc, #284]	@ (80043b8 <TaskEval+0x1c8>)
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80042a0:	4b40      	ldr	r3, [pc, #256]	@ (80043a4 <TaskEval+0x1b4>)
 80042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d86d      	bhi.n	8004384 <TaskEval+0x194>
 80042a8:	4a44      	ldr	r2, [pc, #272]	@ (80043bc <TaskEval+0x1cc>)
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80042b0:	4b3d      	ldr	r3, [pc, #244]	@ (80043a8 <TaskEval+0x1b8>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fc f944 	bl	8000544 <__aeabi_ui2d>
 80042bc:	4604      	mov	r4, r0
 80042be:	460d      	mov	r5, r1
 80042c0:	f7ff fa9a 	bl	80037f8 <HAL_RCC_GetSysClockFreq>
 80042c4:	4603      	mov	r3, r0
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fc f93c 	bl	8000544 <__aeabi_ui2d>
 80042cc:	a332      	add	r3, pc, #200	@ (adr r3, 8004398 <TaskEval+0x1a8>)
 80042ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d2:	f7fc fadb 	bl	800088c <__aeabi_ddiv>
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	4620      	mov	r0, r4
 80042dc:	4629      	mov	r1, r5
 80042de:	f7fc fad5 	bl	800088c <__aeabi_ddiv>
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	ec43 2b17 	vmov	d7, r2, r3
 80042ea:	eeb0 0a47 	vmov.f32	s0, s14
 80042ee:	eef0 0a67 	vmov.f32	s1, s15
 80042f2:	f001 f8f5 	bl	80054e0 <round>
 80042f6:	ed87 0b02 	vstr	d0, [r7, #8]
 80042fa:	4a2f      	ldr	r2, [pc, #188]	@ (80043b8 <TaskEval+0x1c8>)
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004302:	4b29      	ldr	r3, [pc, #164]	@ (80043a8 <TaskEval+0x1b8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	4618      	mov	r0, r3
 800430a:	f7fc f91b 	bl	8000544 <__aeabi_ui2d>
 800430e:	4604      	mov	r4, r0
 8004310:	460d      	mov	r5, r1
 8004312:	f7ff fa71 	bl	80037f8 <HAL_RCC_GetSysClockFreq>
 8004316:	4603      	mov	r3, r0
 8004318:	4618      	mov	r0, r3
 800431a:	f7fc f913 	bl	8000544 <__aeabi_ui2d>
 800431e:	a31e      	add	r3, pc, #120	@ (adr r3, 8004398 <TaskEval+0x1a8>)
 8004320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004324:	f7fc fab2 	bl	800088c <__aeabi_ddiv>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4620      	mov	r0, r4
 800432e:	4629      	mov	r1, r5
 8004330:	f7fc faac 	bl	800088c <__aeabi_ddiv>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	ec43 2b17 	vmov	d7, r2, r3
 800433c:	eeb0 0a47 	vmov.f32	s0, s14
 8004340:	eef0 0a67 	vmov.f32	s1, s15
 8004344:	f001 f8cc 	bl	80054e0 <round>
 8004348:	ed87 0b04 	vstr	d0, [r7, #16]
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	1c5c      	adds	r4, r3, #1
 8004350:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004354:	f7fc fb82 	bl	8000a5c <__aeabi_d2iz>
 8004358:	4606      	mov	r6, r0
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	1c5d      	adds	r5, r3, #1
 800435e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004362:	f7fc fb7b 	bl	8000a5c <__aeabi_d2iz>
 8004366:	4603      	mov	r3, r0
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	462b      	mov	r3, r5
 800436c:	4632      	mov	r2, r6
 800436e:	4621      	mov	r1, r4
 8004370:	4813      	ldr	r0, [pc, #76]	@ (80043c0 <TaskEval+0x1d0>)
 8004372:	f000 f9eb 	bl	800474c <iprintf>
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	3301      	adds	r3, #1
 800437a:	61bb      	str	r3, [r7, #24]
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	2b09      	cmp	r3, #9
 8004380:	dd8a      	ble.n	8004298 <TaskEval+0xa8>
 8004382:	e000      	b.n	8004386 <TaskEval+0x196>
 8004384:	bf00      	nop
 8004386:	480a      	ldr	r0, [pc, #40]	@ (80043b0 <TaskEval+0x1c0>)
 8004388:	f000 fa48 	bl	800481c <puts>
 800438c:	f7fd fa36 	bl	80017fc <osTaskExit>
 8004390:	bf00      	nop
 8004392:	3724      	adds	r7, #36	@ 0x24
 8004394:	46bd      	mov	sp, r7
 8004396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004398:	00000000 	.word	0x00000000
 800439c:	412e8480 	.word	0x412e8480
 80043a0:	08005584 	.word	0x08005584
 80043a4:	20000648 	.word	0x20000648
 80043a8:	200006c0 	.word	0x200006c0
 80043ac:	080055c4 	.word	0x080055c4
 80043b0:	080055d8 	.word	0x080055d8
 80043b4:	080055dc 	.word	0x080055dc
 80043b8:	20000698 	.word	0x20000698
 80043bc:	20000670 	.word	0x20000670
 80043c0:	0800561c 	.word	0x0800561c

080043c4 <TaskA>:
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	e00a      	b.n	80043e8 <TaskA+0x24>
 80043d2:	4b0a      	ldr	r3, [pc, #40]	@ (80043fc <TaskA+0x38>)
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	490a      	ldr	r1, [pc, #40]	@ (8004400 <TaskA+0x3c>)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80043de:	f7fd fb7b 	bl	8001ad8 <osPeriodYield>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	3301      	adds	r3, #1
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2b09      	cmp	r3, #9
 80043ec:	ddf1      	ble.n	80043d2 <TaskA+0xe>
 80043ee:	f7fd fa05 	bl	80017fc <osTaskExit>
 80043f2:	bf00      	nop
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	e0001004 	.word	0xe0001004
 8004400:	20000648 	.word	0x20000648

08004404 <TaskB>:
 8004404:	b580      	push	{r7, lr}
 8004406:	b08c      	sub	sp, #48	@ 0x30
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	2300      	movs	r3, #0
 800440e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004410:	e01b      	b.n	800444a <TaskB+0x46>
 8004412:	4b18      	ldr	r3, [pc, #96]	@ (8004474 <TaskB+0x70>)
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	4918      	ldr	r1, [pc, #96]	@ (8004478 <TaskB+0x74>)
 8004418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800441a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800441e:	2300      	movs	r3, #0
 8004420:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004422:	e002      	b.n	800442a <TaskB+0x26>
 8004424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004426:	3301      	adds	r3, #1
 8004428:	62bb      	str	r3, [r7, #40]	@ 0x28
 800442a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800442c:	f24d 62d7 	movw	r2, #54999	@ 0xd6d7
 8004430:	4293      	cmp	r3, r2
 8004432:	ddf7      	ble.n	8004424 <TaskB+0x20>
 8004434:	4b0f      	ldr	r3, [pc, #60]	@ (8004474 <TaskB+0x70>)
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	4910      	ldr	r1, [pc, #64]	@ (800447c <TaskB+0x78>)
 800443a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800443c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004440:	f7fd fb4a 	bl	8001ad8 <osPeriodYield>
 8004444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004446:	3301      	adds	r3, #1
 8004448:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800444a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800444c:	2b09      	cmp	r3, #9
 800444e:	dde0      	ble.n	8004412 <TaskB+0xe>
 8004450:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004454:	837b      	strh	r3, [r7, #26]
 8004456:	4b0a      	ldr	r3, [pc, #40]	@ (8004480 <TaskB+0x7c>)
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	f107 030c 	add.w	r3, r7, #12
 800445e:	4619      	mov	r1, r3
 8004460:	2064      	movs	r0, #100	@ 0x64
 8004462:	f7fd f9ff 	bl	8001864 <osCreateDeadlineTask>
 8004466:	f7fd f9c9 	bl	80017fc <osTaskExit>
 800446a:	bf00      	nop
 800446c:	3730      	adds	r7, #48	@ 0x30
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	e0001004 	.word	0xe0001004
 8004478:	20000670 	.word	0x20000670
 800447c:	20000698 	.word	0x20000698
 8004480:	080041f1 	.word	0x080041f1
 8004484:	00000000 	.word	0x00000000

08004488 <main>:
 8004488:	b5b0      	push	{r4, r5, r7, lr}
 800448a:	b08a      	sub	sp, #40	@ 0x28
 800448c:	af00      	add	r7, sp, #0
 800448e:	f7fe fb5f 	bl	8002b50 <HAL_Init>
 8004492:	f7fe fa29 	bl	80028e8 <SystemClock_Config>
 8004496:	f7fe fabd 	bl	8002a14 <MX_GPIO_Init>
 800449a:	f7fe fa91 	bl	80029c0 <MX_USART2_UART_Init>
 800449e:	f7fc ffc9 	bl	8001434 <osKernelInit>
 80044a2:	483f      	ldr	r0, [pc, #252]	@ (80045a0 <main+0x118>)
 80044a4:	f000 f9ba 	bl	800481c <puts>
 80044a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80044ac:	81fb      	strh	r3, [r7, #14]
 80044ae:	4b3d      	ldr	r3, [pc, #244]	@ (80045a4 <main+0x11c>)
 80044b0:	603b      	str	r3, [r7, #0]
 80044b2:	463b      	mov	r3, r7
 80044b4:	4619      	mov	r1, r3
 80044b6:	2004      	movs	r0, #4
 80044b8:	f7fd f9d4 	bl	8001864 <osCreateDeadlineTask>
 80044bc:	4b3a      	ldr	r3, [pc, #232]	@ (80045a8 <main+0x120>)
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	463b      	mov	r3, r7
 80044c2:	4619      	mov	r1, r3
 80044c4:	200b      	movs	r0, #11
 80044c6:	f7fd f9cd 	bl	8001864 <osCreateDeadlineTask>
 80044ca:	4b38      	ldr	r3, [pc, #224]	@ (80045ac <main+0x124>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d017      	beq.n	8004502 <main+0x7a>
 80044d2:	4837      	ldr	r0, [pc, #220]	@ (80045b0 <main+0x128>)
 80044d4:	f000 f9a2 	bl	800481c <puts>
 80044d8:	4b36      	ldr	r3, [pc, #216]	@ (80045b4 <main+0x12c>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a35      	ldr	r2, [pc, #212]	@ (80045b4 <main+0x12c>)
 80044de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	4b34      	ldr	r3, [pc, #208]	@ (80045b8 <main+0x130>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	4b30      	ldr	r3, [pc, #192]	@ (80045ac <main+0x124>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a2f      	ldr	r2, [pc, #188]	@ (80045ac <main+0x124>)
 80044f0:	f043 0301 	orr.w	r3, r3, #1
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	4b30      	ldr	r3, [pc, #192]	@ (80045b8 <main+0x130>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	623b      	str	r3, [r7, #32]
 80044fc:	2300      	movs	r3, #0
 80044fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004500:	e007      	b.n	8004512 <main+0x8a>
 8004502:	482e      	ldr	r0, [pc, #184]	@ (80045bc <main+0x134>)
 8004504:	f000 f98a 	bl	800481c <puts>
 8004508:	2300      	movs	r3, #0
 800450a:	e03f      	b.n	800458c <main+0x104>
 800450c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450e:	3301      	adds	r3, #1
 8004510:	627b      	str	r3, [r7, #36]	@ 0x24
 8004512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004514:	f24d 62d7 	movw	r2, #54999	@ 0xd6d7
 8004518:	4293      	cmp	r3, r2
 800451a:	ddf7      	ble.n	800450c <main+0x84>
 800451c:	4b26      	ldr	r3, [pc, #152]	@ (80045b8 <main+0x130>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	61fb      	str	r3, [r7, #28]
 8004522:	69fa      	ldr	r2, [r7, #28]
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	4618      	mov	r0, r3
 800452a:	f7fc f80b 	bl	8000544 <__aeabi_ui2d>
 800452e:	4604      	mov	r4, r0
 8004530:	460d      	mov	r5, r1
 8004532:	f7ff f961 	bl	80037f8 <HAL_RCC_GetSysClockFreq>
 8004536:	4603      	mov	r3, r0
 8004538:	4618      	mov	r0, r3
 800453a:	f7fc f803 	bl	8000544 <__aeabi_ui2d>
 800453e:	a316      	add	r3, pc, #88	@ (adr r3, 8004598 <main+0x110>)
 8004540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004544:	f7fc f9a2 	bl	800088c <__aeabi_ddiv>
 8004548:	4602      	mov	r2, r0
 800454a:	460b      	mov	r3, r1
 800454c:	4620      	mov	r0, r4
 800454e:	4629      	mov	r1, r5
 8004550:	f7fc f99c 	bl	800088c <__aeabi_ddiv>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	ec43 2b17 	vmov	d7, r2, r3
 800455c:	eeb0 0a47 	vmov.f32	s0, s14
 8004560:	eef0 0a67 	vmov.f32	s1, s15
 8004564:	f000 ffbc 	bl	80054e0 <round>
 8004568:	ec53 2b10 	vmov	r2, r3, d0
 800456c:	4610      	mov	r0, r2
 800456e:	4619      	mov	r1, r3
 8004570:	f7fc fa74 	bl	8000a5c <__aeabi_d2iz>
 8004574:	4603      	mov	r3, r0
 8004576:	4619      	mov	r1, r3
 8004578:	4811      	ldr	r0, [pc, #68]	@ (80045c0 <main+0x138>)
 800457a:	f000 f8e7 	bl	800474c <iprintf>
 800457e:	4b0e      	ldr	r3, [pc, #56]	@ (80045b8 <main+0x130>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a10      	ldr	r2, [pc, #64]	@ (80045c4 <main+0x13c>)
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	f7fd f8cf 	bl	8001728 <osKernelStart>
 800458a:	2300      	movs	r3, #0
 800458c:	4618      	mov	r0, r3
 800458e:	3728      	adds	r7, #40	@ 0x28
 8004590:	46bd      	mov	sp, r7
 8004592:	bdb0      	pop	{r4, r5, r7, pc}
 8004594:	f3af 8000 	nop.w
 8004598:	00000000 	.word	0x00000000
 800459c:	412e8480 	.word	0x412e8480
 80045a0:	08005640 	.word	0x08005640
 80045a4:	080043c5 	.word	0x080043c5
 80045a8:	08004405 	.word	0x08004405
 80045ac:	e0001000 	.word	0xe0001000
 80045b0:	08005654 	.word	0x08005654
 80045b4:	e000edfc 	.word	0xe000edfc
 80045b8:	e0001004 	.word	0xe0001004
 80045bc:	0800566c 	.word	0x0800566c
 80045c0:	08005690 	.word	0x08005690
 80045c4:	200006c0 	.word	0x200006c0

080045c8 <std>:
 80045c8:	2300      	movs	r3, #0
 80045ca:	b510      	push	{r4, lr}
 80045cc:	4604      	mov	r4, r0
 80045ce:	e9c0 3300 	strd	r3, r3, [r0]
 80045d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045d6:	6083      	str	r3, [r0, #8]
 80045d8:	8181      	strh	r1, [r0, #12]
 80045da:	6643      	str	r3, [r0, #100]	@ 0x64
 80045dc:	81c2      	strh	r2, [r0, #14]
 80045de:	6183      	str	r3, [r0, #24]
 80045e0:	4619      	mov	r1, r3
 80045e2:	2208      	movs	r2, #8
 80045e4:	305c      	adds	r0, #92	@ 0x5c
 80045e6:	f000 f921 	bl	800482c <memset>
 80045ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004620 <std+0x58>)
 80045ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80045ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004624 <std+0x5c>)
 80045f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80045f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004628 <std+0x60>)
 80045f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80045f6:	4b0d      	ldr	r3, [pc, #52]	@ (800462c <std+0x64>)
 80045f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80045fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004630 <std+0x68>)
 80045fc:	6224      	str	r4, [r4, #32]
 80045fe:	429c      	cmp	r4, r3
 8004600:	d006      	beq.n	8004610 <std+0x48>
 8004602:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004606:	4294      	cmp	r4, r2
 8004608:	d002      	beq.n	8004610 <std+0x48>
 800460a:	33d0      	adds	r3, #208	@ 0xd0
 800460c:	429c      	cmp	r4, r3
 800460e:	d105      	bne.n	800461c <std+0x54>
 8004610:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004618:	f000 b93a 	b.w	8004890 <__retarget_lock_init_recursive>
 800461c:	bd10      	pop	{r4, pc}
 800461e:	bf00      	nop
 8004620:	080050e9 	.word	0x080050e9
 8004624:	0800510b 	.word	0x0800510b
 8004628:	08005143 	.word	0x08005143
 800462c:	08005167 	.word	0x08005167
 8004630:	200006c4 	.word	0x200006c4

08004634 <stdio_exit_handler>:
 8004634:	4a02      	ldr	r2, [pc, #8]	@ (8004640 <stdio_exit_handler+0xc>)
 8004636:	4903      	ldr	r1, [pc, #12]	@ (8004644 <stdio_exit_handler+0x10>)
 8004638:	4803      	ldr	r0, [pc, #12]	@ (8004648 <stdio_exit_handler+0x14>)
 800463a:	f000 b869 	b.w	8004710 <_fwalk_sglue>
 800463e:	bf00      	nop
 8004640:	2000000c 	.word	0x2000000c
 8004644:	08005081 	.word	0x08005081
 8004648:	2000001c 	.word	0x2000001c

0800464c <cleanup_stdio>:
 800464c:	6841      	ldr	r1, [r0, #4]
 800464e:	4b0c      	ldr	r3, [pc, #48]	@ (8004680 <cleanup_stdio+0x34>)
 8004650:	4299      	cmp	r1, r3
 8004652:	b510      	push	{r4, lr}
 8004654:	4604      	mov	r4, r0
 8004656:	d001      	beq.n	800465c <cleanup_stdio+0x10>
 8004658:	f000 fd12 	bl	8005080 <_fflush_r>
 800465c:	68a1      	ldr	r1, [r4, #8]
 800465e:	4b09      	ldr	r3, [pc, #36]	@ (8004684 <cleanup_stdio+0x38>)
 8004660:	4299      	cmp	r1, r3
 8004662:	d002      	beq.n	800466a <cleanup_stdio+0x1e>
 8004664:	4620      	mov	r0, r4
 8004666:	f000 fd0b 	bl	8005080 <_fflush_r>
 800466a:	68e1      	ldr	r1, [r4, #12]
 800466c:	4b06      	ldr	r3, [pc, #24]	@ (8004688 <cleanup_stdio+0x3c>)
 800466e:	4299      	cmp	r1, r3
 8004670:	d004      	beq.n	800467c <cleanup_stdio+0x30>
 8004672:	4620      	mov	r0, r4
 8004674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004678:	f000 bd02 	b.w	8005080 <_fflush_r>
 800467c:	bd10      	pop	{r4, pc}
 800467e:	bf00      	nop
 8004680:	200006c4 	.word	0x200006c4
 8004684:	2000072c 	.word	0x2000072c
 8004688:	20000794 	.word	0x20000794

0800468c <global_stdio_init.part.0>:
 800468c:	b510      	push	{r4, lr}
 800468e:	4b0b      	ldr	r3, [pc, #44]	@ (80046bc <global_stdio_init.part.0+0x30>)
 8004690:	4c0b      	ldr	r4, [pc, #44]	@ (80046c0 <global_stdio_init.part.0+0x34>)
 8004692:	4a0c      	ldr	r2, [pc, #48]	@ (80046c4 <global_stdio_init.part.0+0x38>)
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	4620      	mov	r0, r4
 8004698:	2200      	movs	r2, #0
 800469a:	2104      	movs	r1, #4
 800469c:	f7ff ff94 	bl	80045c8 <std>
 80046a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80046a4:	2201      	movs	r2, #1
 80046a6:	2109      	movs	r1, #9
 80046a8:	f7ff ff8e 	bl	80045c8 <std>
 80046ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80046b0:	2202      	movs	r2, #2
 80046b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046b6:	2112      	movs	r1, #18
 80046b8:	f7ff bf86 	b.w	80045c8 <std>
 80046bc:	200007fc 	.word	0x200007fc
 80046c0:	200006c4 	.word	0x200006c4
 80046c4:	08004635 	.word	0x08004635

080046c8 <__sfp_lock_acquire>:
 80046c8:	4801      	ldr	r0, [pc, #4]	@ (80046d0 <__sfp_lock_acquire+0x8>)
 80046ca:	f000 b8e2 	b.w	8004892 <__retarget_lock_acquire_recursive>
 80046ce:	bf00      	nop
 80046d0:	20000801 	.word	0x20000801

080046d4 <__sfp_lock_release>:
 80046d4:	4801      	ldr	r0, [pc, #4]	@ (80046dc <__sfp_lock_release+0x8>)
 80046d6:	f000 b8dd 	b.w	8004894 <__retarget_lock_release_recursive>
 80046da:	bf00      	nop
 80046dc:	20000801 	.word	0x20000801

080046e0 <__sinit>:
 80046e0:	b510      	push	{r4, lr}
 80046e2:	4604      	mov	r4, r0
 80046e4:	f7ff fff0 	bl	80046c8 <__sfp_lock_acquire>
 80046e8:	6a23      	ldr	r3, [r4, #32]
 80046ea:	b11b      	cbz	r3, 80046f4 <__sinit+0x14>
 80046ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046f0:	f7ff bff0 	b.w	80046d4 <__sfp_lock_release>
 80046f4:	4b04      	ldr	r3, [pc, #16]	@ (8004708 <__sinit+0x28>)
 80046f6:	6223      	str	r3, [r4, #32]
 80046f8:	4b04      	ldr	r3, [pc, #16]	@ (800470c <__sinit+0x2c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1f5      	bne.n	80046ec <__sinit+0xc>
 8004700:	f7ff ffc4 	bl	800468c <global_stdio_init.part.0>
 8004704:	e7f2      	b.n	80046ec <__sinit+0xc>
 8004706:	bf00      	nop
 8004708:	0800464d 	.word	0x0800464d
 800470c:	200007fc 	.word	0x200007fc

08004710 <_fwalk_sglue>:
 8004710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004714:	4607      	mov	r7, r0
 8004716:	4688      	mov	r8, r1
 8004718:	4614      	mov	r4, r2
 800471a:	2600      	movs	r6, #0
 800471c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004720:	f1b9 0901 	subs.w	r9, r9, #1
 8004724:	d505      	bpl.n	8004732 <_fwalk_sglue+0x22>
 8004726:	6824      	ldr	r4, [r4, #0]
 8004728:	2c00      	cmp	r4, #0
 800472a:	d1f7      	bne.n	800471c <_fwalk_sglue+0xc>
 800472c:	4630      	mov	r0, r6
 800472e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004732:	89ab      	ldrh	r3, [r5, #12]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d907      	bls.n	8004748 <_fwalk_sglue+0x38>
 8004738:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800473c:	3301      	adds	r3, #1
 800473e:	d003      	beq.n	8004748 <_fwalk_sglue+0x38>
 8004740:	4629      	mov	r1, r5
 8004742:	4638      	mov	r0, r7
 8004744:	47c0      	blx	r8
 8004746:	4306      	orrs	r6, r0
 8004748:	3568      	adds	r5, #104	@ 0x68
 800474a:	e7e9      	b.n	8004720 <_fwalk_sglue+0x10>

0800474c <iprintf>:
 800474c:	b40f      	push	{r0, r1, r2, r3}
 800474e:	b507      	push	{r0, r1, r2, lr}
 8004750:	4906      	ldr	r1, [pc, #24]	@ (800476c <iprintf+0x20>)
 8004752:	ab04      	add	r3, sp, #16
 8004754:	6808      	ldr	r0, [r1, #0]
 8004756:	f853 2b04 	ldr.w	r2, [r3], #4
 800475a:	6881      	ldr	r1, [r0, #8]
 800475c:	9301      	str	r3, [sp, #4]
 800475e:	f000 f8c3 	bl	80048e8 <_vfiprintf_r>
 8004762:	b003      	add	sp, #12
 8004764:	f85d eb04 	ldr.w	lr, [sp], #4
 8004768:	b004      	add	sp, #16
 800476a:	4770      	bx	lr
 800476c:	20000018 	.word	0x20000018

08004770 <_puts_r>:
 8004770:	6a03      	ldr	r3, [r0, #32]
 8004772:	b570      	push	{r4, r5, r6, lr}
 8004774:	6884      	ldr	r4, [r0, #8]
 8004776:	4605      	mov	r5, r0
 8004778:	460e      	mov	r6, r1
 800477a:	b90b      	cbnz	r3, 8004780 <_puts_r+0x10>
 800477c:	f7ff ffb0 	bl	80046e0 <__sinit>
 8004780:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004782:	07db      	lsls	r3, r3, #31
 8004784:	d405      	bmi.n	8004792 <_puts_r+0x22>
 8004786:	89a3      	ldrh	r3, [r4, #12]
 8004788:	0598      	lsls	r0, r3, #22
 800478a:	d402      	bmi.n	8004792 <_puts_r+0x22>
 800478c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800478e:	f000 f880 	bl	8004892 <__retarget_lock_acquire_recursive>
 8004792:	89a3      	ldrh	r3, [r4, #12]
 8004794:	0719      	lsls	r1, r3, #28
 8004796:	d502      	bpl.n	800479e <_puts_r+0x2e>
 8004798:	6923      	ldr	r3, [r4, #16]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d135      	bne.n	800480a <_puts_r+0x9a>
 800479e:	4621      	mov	r1, r4
 80047a0:	4628      	mov	r0, r5
 80047a2:	f000 fd23 	bl	80051ec <__swsetup_r>
 80047a6:	b380      	cbz	r0, 800480a <_puts_r+0x9a>
 80047a8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80047ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047ae:	07da      	lsls	r2, r3, #31
 80047b0:	d405      	bmi.n	80047be <_puts_r+0x4e>
 80047b2:	89a3      	ldrh	r3, [r4, #12]
 80047b4:	059b      	lsls	r3, r3, #22
 80047b6:	d402      	bmi.n	80047be <_puts_r+0x4e>
 80047b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047ba:	f000 f86b 	bl	8004894 <__retarget_lock_release_recursive>
 80047be:	4628      	mov	r0, r5
 80047c0:	bd70      	pop	{r4, r5, r6, pc}
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	da04      	bge.n	80047d0 <_puts_r+0x60>
 80047c6:	69a2      	ldr	r2, [r4, #24]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	dc17      	bgt.n	80047fc <_puts_r+0x8c>
 80047cc:	290a      	cmp	r1, #10
 80047ce:	d015      	beq.n	80047fc <_puts_r+0x8c>
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	6022      	str	r2, [r4, #0]
 80047d6:	7019      	strb	r1, [r3, #0]
 80047d8:	68a3      	ldr	r3, [r4, #8]
 80047da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80047de:	3b01      	subs	r3, #1
 80047e0:	60a3      	str	r3, [r4, #8]
 80047e2:	2900      	cmp	r1, #0
 80047e4:	d1ed      	bne.n	80047c2 <_puts_r+0x52>
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	da11      	bge.n	800480e <_puts_r+0x9e>
 80047ea:	4622      	mov	r2, r4
 80047ec:	210a      	movs	r1, #10
 80047ee:	4628      	mov	r0, r5
 80047f0:	f000 fcbd 	bl	800516e <__swbuf_r>
 80047f4:	3001      	adds	r0, #1
 80047f6:	d0d7      	beq.n	80047a8 <_puts_r+0x38>
 80047f8:	250a      	movs	r5, #10
 80047fa:	e7d7      	b.n	80047ac <_puts_r+0x3c>
 80047fc:	4622      	mov	r2, r4
 80047fe:	4628      	mov	r0, r5
 8004800:	f000 fcb5 	bl	800516e <__swbuf_r>
 8004804:	3001      	adds	r0, #1
 8004806:	d1e7      	bne.n	80047d8 <_puts_r+0x68>
 8004808:	e7ce      	b.n	80047a8 <_puts_r+0x38>
 800480a:	3e01      	subs	r6, #1
 800480c:	e7e4      	b.n	80047d8 <_puts_r+0x68>
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	6022      	str	r2, [r4, #0]
 8004814:	220a      	movs	r2, #10
 8004816:	701a      	strb	r2, [r3, #0]
 8004818:	e7ee      	b.n	80047f8 <_puts_r+0x88>
	...

0800481c <puts>:
 800481c:	4b02      	ldr	r3, [pc, #8]	@ (8004828 <puts+0xc>)
 800481e:	4601      	mov	r1, r0
 8004820:	6818      	ldr	r0, [r3, #0]
 8004822:	f7ff bfa5 	b.w	8004770 <_puts_r>
 8004826:	bf00      	nop
 8004828:	20000018 	.word	0x20000018

0800482c <memset>:
 800482c:	4402      	add	r2, r0
 800482e:	4603      	mov	r3, r0
 8004830:	4293      	cmp	r3, r2
 8004832:	d100      	bne.n	8004836 <memset+0xa>
 8004834:	4770      	bx	lr
 8004836:	f803 1b01 	strb.w	r1, [r3], #1
 800483a:	e7f9      	b.n	8004830 <memset+0x4>

0800483c <__errno>:
 800483c:	4b01      	ldr	r3, [pc, #4]	@ (8004844 <__errno+0x8>)
 800483e:	6818      	ldr	r0, [r3, #0]
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	20000018 	.word	0x20000018

08004848 <__libc_init_array>:
 8004848:	b570      	push	{r4, r5, r6, lr}
 800484a:	4d0d      	ldr	r5, [pc, #52]	@ (8004880 <__libc_init_array+0x38>)
 800484c:	4c0d      	ldr	r4, [pc, #52]	@ (8004884 <__libc_init_array+0x3c>)
 800484e:	1b64      	subs	r4, r4, r5
 8004850:	10a4      	asrs	r4, r4, #2
 8004852:	2600      	movs	r6, #0
 8004854:	42a6      	cmp	r6, r4
 8004856:	d109      	bne.n	800486c <__libc_init_array+0x24>
 8004858:	4d0b      	ldr	r5, [pc, #44]	@ (8004888 <__libc_init_array+0x40>)
 800485a:	4c0c      	ldr	r4, [pc, #48]	@ (800488c <__libc_init_array+0x44>)
 800485c:	f000 fe86 	bl	800556c <_init>
 8004860:	1b64      	subs	r4, r4, r5
 8004862:	10a4      	asrs	r4, r4, #2
 8004864:	2600      	movs	r6, #0
 8004866:	42a6      	cmp	r6, r4
 8004868:	d105      	bne.n	8004876 <__libc_init_array+0x2e>
 800486a:	bd70      	pop	{r4, r5, r6, pc}
 800486c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004870:	4798      	blx	r3
 8004872:	3601      	adds	r6, #1
 8004874:	e7ee      	b.n	8004854 <__libc_init_array+0xc>
 8004876:	f855 3b04 	ldr.w	r3, [r5], #4
 800487a:	4798      	blx	r3
 800487c:	3601      	adds	r6, #1
 800487e:	e7f2      	b.n	8004866 <__libc_init_array+0x1e>
 8004880:	08005714 	.word	0x08005714
 8004884:	08005714 	.word	0x08005714
 8004888:	08005714 	.word	0x08005714
 800488c:	08005718 	.word	0x08005718

08004890 <__retarget_lock_init_recursive>:
 8004890:	4770      	bx	lr

08004892 <__retarget_lock_acquire_recursive>:
 8004892:	4770      	bx	lr

08004894 <__retarget_lock_release_recursive>:
 8004894:	4770      	bx	lr

08004896 <__sfputc_r>:
 8004896:	6893      	ldr	r3, [r2, #8]
 8004898:	3b01      	subs	r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	b410      	push	{r4}
 800489e:	6093      	str	r3, [r2, #8]
 80048a0:	da08      	bge.n	80048b4 <__sfputc_r+0x1e>
 80048a2:	6994      	ldr	r4, [r2, #24]
 80048a4:	42a3      	cmp	r3, r4
 80048a6:	db01      	blt.n	80048ac <__sfputc_r+0x16>
 80048a8:	290a      	cmp	r1, #10
 80048aa:	d103      	bne.n	80048b4 <__sfputc_r+0x1e>
 80048ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048b0:	f000 bc5d 	b.w	800516e <__swbuf_r>
 80048b4:	6813      	ldr	r3, [r2, #0]
 80048b6:	1c58      	adds	r0, r3, #1
 80048b8:	6010      	str	r0, [r2, #0]
 80048ba:	7019      	strb	r1, [r3, #0]
 80048bc:	4608      	mov	r0, r1
 80048be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <__sfputs_r>:
 80048c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c6:	4606      	mov	r6, r0
 80048c8:	460f      	mov	r7, r1
 80048ca:	4614      	mov	r4, r2
 80048cc:	18d5      	adds	r5, r2, r3
 80048ce:	42ac      	cmp	r4, r5
 80048d0:	d101      	bne.n	80048d6 <__sfputs_r+0x12>
 80048d2:	2000      	movs	r0, #0
 80048d4:	e007      	b.n	80048e6 <__sfputs_r+0x22>
 80048d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048da:	463a      	mov	r2, r7
 80048dc:	4630      	mov	r0, r6
 80048de:	f7ff ffda 	bl	8004896 <__sfputc_r>
 80048e2:	1c43      	adds	r3, r0, #1
 80048e4:	d1f3      	bne.n	80048ce <__sfputs_r+0xa>
 80048e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080048e8 <_vfiprintf_r>:
 80048e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ec:	460d      	mov	r5, r1
 80048ee:	b09d      	sub	sp, #116	@ 0x74
 80048f0:	4614      	mov	r4, r2
 80048f2:	4698      	mov	r8, r3
 80048f4:	4606      	mov	r6, r0
 80048f6:	b118      	cbz	r0, 8004900 <_vfiprintf_r+0x18>
 80048f8:	6a03      	ldr	r3, [r0, #32]
 80048fa:	b90b      	cbnz	r3, 8004900 <_vfiprintf_r+0x18>
 80048fc:	f7ff fef0 	bl	80046e0 <__sinit>
 8004900:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004902:	07d9      	lsls	r1, r3, #31
 8004904:	d405      	bmi.n	8004912 <_vfiprintf_r+0x2a>
 8004906:	89ab      	ldrh	r3, [r5, #12]
 8004908:	059a      	lsls	r2, r3, #22
 800490a:	d402      	bmi.n	8004912 <_vfiprintf_r+0x2a>
 800490c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800490e:	f7ff ffc0 	bl	8004892 <__retarget_lock_acquire_recursive>
 8004912:	89ab      	ldrh	r3, [r5, #12]
 8004914:	071b      	lsls	r3, r3, #28
 8004916:	d501      	bpl.n	800491c <_vfiprintf_r+0x34>
 8004918:	692b      	ldr	r3, [r5, #16]
 800491a:	b99b      	cbnz	r3, 8004944 <_vfiprintf_r+0x5c>
 800491c:	4629      	mov	r1, r5
 800491e:	4630      	mov	r0, r6
 8004920:	f000 fc64 	bl	80051ec <__swsetup_r>
 8004924:	b170      	cbz	r0, 8004944 <_vfiprintf_r+0x5c>
 8004926:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004928:	07dc      	lsls	r4, r3, #31
 800492a:	d504      	bpl.n	8004936 <_vfiprintf_r+0x4e>
 800492c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004930:	b01d      	add	sp, #116	@ 0x74
 8004932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004936:	89ab      	ldrh	r3, [r5, #12]
 8004938:	0598      	lsls	r0, r3, #22
 800493a:	d4f7      	bmi.n	800492c <_vfiprintf_r+0x44>
 800493c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800493e:	f7ff ffa9 	bl	8004894 <__retarget_lock_release_recursive>
 8004942:	e7f3      	b.n	800492c <_vfiprintf_r+0x44>
 8004944:	2300      	movs	r3, #0
 8004946:	9309      	str	r3, [sp, #36]	@ 0x24
 8004948:	2320      	movs	r3, #32
 800494a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800494e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004952:	2330      	movs	r3, #48	@ 0x30
 8004954:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004b04 <_vfiprintf_r+0x21c>
 8004958:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800495c:	f04f 0901 	mov.w	r9, #1
 8004960:	4623      	mov	r3, r4
 8004962:	469a      	mov	sl, r3
 8004964:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004968:	b10a      	cbz	r2, 800496e <_vfiprintf_r+0x86>
 800496a:	2a25      	cmp	r2, #37	@ 0x25
 800496c:	d1f9      	bne.n	8004962 <_vfiprintf_r+0x7a>
 800496e:	ebba 0b04 	subs.w	fp, sl, r4
 8004972:	d00b      	beq.n	800498c <_vfiprintf_r+0xa4>
 8004974:	465b      	mov	r3, fp
 8004976:	4622      	mov	r2, r4
 8004978:	4629      	mov	r1, r5
 800497a:	4630      	mov	r0, r6
 800497c:	f7ff ffa2 	bl	80048c4 <__sfputs_r>
 8004980:	3001      	adds	r0, #1
 8004982:	f000 80a7 	beq.w	8004ad4 <_vfiprintf_r+0x1ec>
 8004986:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004988:	445a      	add	r2, fp
 800498a:	9209      	str	r2, [sp, #36]	@ 0x24
 800498c:	f89a 3000 	ldrb.w	r3, [sl]
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 809f 	beq.w	8004ad4 <_vfiprintf_r+0x1ec>
 8004996:	2300      	movs	r3, #0
 8004998:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800499c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049a0:	f10a 0a01 	add.w	sl, sl, #1
 80049a4:	9304      	str	r3, [sp, #16]
 80049a6:	9307      	str	r3, [sp, #28]
 80049a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80049ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80049ae:	4654      	mov	r4, sl
 80049b0:	2205      	movs	r2, #5
 80049b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049b6:	4853      	ldr	r0, [pc, #332]	@ (8004b04 <_vfiprintf_r+0x21c>)
 80049b8:	f7fb fc32 	bl	8000220 <memchr>
 80049bc:	9a04      	ldr	r2, [sp, #16]
 80049be:	b9d8      	cbnz	r0, 80049f8 <_vfiprintf_r+0x110>
 80049c0:	06d1      	lsls	r1, r2, #27
 80049c2:	bf44      	itt	mi
 80049c4:	2320      	movmi	r3, #32
 80049c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049ca:	0713      	lsls	r3, r2, #28
 80049cc:	bf44      	itt	mi
 80049ce:	232b      	movmi	r3, #43	@ 0x2b
 80049d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049d4:	f89a 3000 	ldrb.w	r3, [sl]
 80049d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80049da:	d015      	beq.n	8004a08 <_vfiprintf_r+0x120>
 80049dc:	9a07      	ldr	r2, [sp, #28]
 80049de:	4654      	mov	r4, sl
 80049e0:	2000      	movs	r0, #0
 80049e2:	f04f 0c0a 	mov.w	ip, #10
 80049e6:	4621      	mov	r1, r4
 80049e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049ec:	3b30      	subs	r3, #48	@ 0x30
 80049ee:	2b09      	cmp	r3, #9
 80049f0:	d94b      	bls.n	8004a8a <_vfiprintf_r+0x1a2>
 80049f2:	b1b0      	cbz	r0, 8004a22 <_vfiprintf_r+0x13a>
 80049f4:	9207      	str	r2, [sp, #28]
 80049f6:	e014      	b.n	8004a22 <_vfiprintf_r+0x13a>
 80049f8:	eba0 0308 	sub.w	r3, r0, r8
 80049fc:	fa09 f303 	lsl.w	r3, r9, r3
 8004a00:	4313      	orrs	r3, r2
 8004a02:	9304      	str	r3, [sp, #16]
 8004a04:	46a2      	mov	sl, r4
 8004a06:	e7d2      	b.n	80049ae <_vfiprintf_r+0xc6>
 8004a08:	9b03      	ldr	r3, [sp, #12]
 8004a0a:	1d19      	adds	r1, r3, #4
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	9103      	str	r1, [sp, #12]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	bfbb      	ittet	lt
 8004a14:	425b      	neglt	r3, r3
 8004a16:	f042 0202 	orrlt.w	r2, r2, #2
 8004a1a:	9307      	strge	r3, [sp, #28]
 8004a1c:	9307      	strlt	r3, [sp, #28]
 8004a1e:	bfb8      	it	lt
 8004a20:	9204      	strlt	r2, [sp, #16]
 8004a22:	7823      	ldrb	r3, [r4, #0]
 8004a24:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a26:	d10a      	bne.n	8004a3e <_vfiprintf_r+0x156>
 8004a28:	7863      	ldrb	r3, [r4, #1]
 8004a2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a2c:	d132      	bne.n	8004a94 <_vfiprintf_r+0x1ac>
 8004a2e:	9b03      	ldr	r3, [sp, #12]
 8004a30:	1d1a      	adds	r2, r3, #4
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	9203      	str	r2, [sp, #12]
 8004a36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a3a:	3402      	adds	r4, #2
 8004a3c:	9305      	str	r3, [sp, #20]
 8004a3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004b14 <_vfiprintf_r+0x22c>
 8004a42:	7821      	ldrb	r1, [r4, #0]
 8004a44:	2203      	movs	r2, #3
 8004a46:	4650      	mov	r0, sl
 8004a48:	f7fb fbea 	bl	8000220 <memchr>
 8004a4c:	b138      	cbz	r0, 8004a5e <_vfiprintf_r+0x176>
 8004a4e:	9b04      	ldr	r3, [sp, #16]
 8004a50:	eba0 000a 	sub.w	r0, r0, sl
 8004a54:	2240      	movs	r2, #64	@ 0x40
 8004a56:	4082      	lsls	r2, r0
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	3401      	adds	r4, #1
 8004a5c:	9304      	str	r3, [sp, #16]
 8004a5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a62:	4829      	ldr	r0, [pc, #164]	@ (8004b08 <_vfiprintf_r+0x220>)
 8004a64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a68:	2206      	movs	r2, #6
 8004a6a:	f7fb fbd9 	bl	8000220 <memchr>
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	d03f      	beq.n	8004af2 <_vfiprintf_r+0x20a>
 8004a72:	4b26      	ldr	r3, [pc, #152]	@ (8004b0c <_vfiprintf_r+0x224>)
 8004a74:	bb1b      	cbnz	r3, 8004abe <_vfiprintf_r+0x1d6>
 8004a76:	9b03      	ldr	r3, [sp, #12]
 8004a78:	3307      	adds	r3, #7
 8004a7a:	f023 0307 	bic.w	r3, r3, #7
 8004a7e:	3308      	adds	r3, #8
 8004a80:	9303      	str	r3, [sp, #12]
 8004a82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a84:	443b      	add	r3, r7
 8004a86:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a88:	e76a      	b.n	8004960 <_vfiprintf_r+0x78>
 8004a8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a8e:	460c      	mov	r4, r1
 8004a90:	2001      	movs	r0, #1
 8004a92:	e7a8      	b.n	80049e6 <_vfiprintf_r+0xfe>
 8004a94:	2300      	movs	r3, #0
 8004a96:	3401      	adds	r4, #1
 8004a98:	9305      	str	r3, [sp, #20]
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	f04f 0c0a 	mov.w	ip, #10
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004aa6:	3a30      	subs	r2, #48	@ 0x30
 8004aa8:	2a09      	cmp	r2, #9
 8004aaa:	d903      	bls.n	8004ab4 <_vfiprintf_r+0x1cc>
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0c6      	beq.n	8004a3e <_vfiprintf_r+0x156>
 8004ab0:	9105      	str	r1, [sp, #20]
 8004ab2:	e7c4      	b.n	8004a3e <_vfiprintf_r+0x156>
 8004ab4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ab8:	4604      	mov	r4, r0
 8004aba:	2301      	movs	r3, #1
 8004abc:	e7f0      	b.n	8004aa0 <_vfiprintf_r+0x1b8>
 8004abe:	ab03      	add	r3, sp, #12
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	462a      	mov	r2, r5
 8004ac4:	4b12      	ldr	r3, [pc, #72]	@ (8004b10 <_vfiprintf_r+0x228>)
 8004ac6:	a904      	add	r1, sp, #16
 8004ac8:	4630      	mov	r0, r6
 8004aca:	f3af 8000 	nop.w
 8004ace:	4607      	mov	r7, r0
 8004ad0:	1c78      	adds	r0, r7, #1
 8004ad2:	d1d6      	bne.n	8004a82 <_vfiprintf_r+0x19a>
 8004ad4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ad6:	07d9      	lsls	r1, r3, #31
 8004ad8:	d405      	bmi.n	8004ae6 <_vfiprintf_r+0x1fe>
 8004ada:	89ab      	ldrh	r3, [r5, #12]
 8004adc:	059a      	lsls	r2, r3, #22
 8004ade:	d402      	bmi.n	8004ae6 <_vfiprintf_r+0x1fe>
 8004ae0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ae2:	f7ff fed7 	bl	8004894 <__retarget_lock_release_recursive>
 8004ae6:	89ab      	ldrh	r3, [r5, #12]
 8004ae8:	065b      	lsls	r3, r3, #25
 8004aea:	f53f af1f 	bmi.w	800492c <_vfiprintf_r+0x44>
 8004aee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004af0:	e71e      	b.n	8004930 <_vfiprintf_r+0x48>
 8004af2:	ab03      	add	r3, sp, #12
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	462a      	mov	r2, r5
 8004af8:	4b05      	ldr	r3, [pc, #20]	@ (8004b10 <_vfiprintf_r+0x228>)
 8004afa:	a904      	add	r1, sp, #16
 8004afc:	4630      	mov	r0, r6
 8004afe:	f000 f91b 	bl	8004d38 <_printf_i>
 8004b02:	e7e4      	b.n	8004ace <_vfiprintf_r+0x1e6>
 8004b04:	080056d8 	.word	0x080056d8
 8004b08:	080056e2 	.word	0x080056e2
 8004b0c:	00000000 	.word	0x00000000
 8004b10:	080048c5 	.word	0x080048c5
 8004b14:	080056de 	.word	0x080056de

08004b18 <sbrk_aligned>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	4e0f      	ldr	r6, [pc, #60]	@ (8004b58 <sbrk_aligned+0x40>)
 8004b1c:	460c      	mov	r4, r1
 8004b1e:	6831      	ldr	r1, [r6, #0]
 8004b20:	4605      	mov	r5, r0
 8004b22:	b911      	cbnz	r1, 8004b2a <sbrk_aligned+0x12>
 8004b24:	f000 fc70 	bl	8005408 <_sbrk_r>
 8004b28:	6030      	str	r0, [r6, #0]
 8004b2a:	4621      	mov	r1, r4
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	f000 fc6b 	bl	8005408 <_sbrk_r>
 8004b32:	1c43      	adds	r3, r0, #1
 8004b34:	d103      	bne.n	8004b3e <sbrk_aligned+0x26>
 8004b36:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	bd70      	pop	{r4, r5, r6, pc}
 8004b3e:	1cc4      	adds	r4, r0, #3
 8004b40:	f024 0403 	bic.w	r4, r4, #3
 8004b44:	42a0      	cmp	r0, r4
 8004b46:	d0f8      	beq.n	8004b3a <sbrk_aligned+0x22>
 8004b48:	1a21      	subs	r1, r4, r0
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	f000 fc5c 	bl	8005408 <_sbrk_r>
 8004b50:	3001      	adds	r0, #1
 8004b52:	d1f2      	bne.n	8004b3a <sbrk_aligned+0x22>
 8004b54:	e7ef      	b.n	8004b36 <sbrk_aligned+0x1e>
 8004b56:	bf00      	nop
 8004b58:	20000804 	.word	0x20000804

08004b5c <_malloc_r>:
 8004b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b60:	1ccd      	adds	r5, r1, #3
 8004b62:	f025 0503 	bic.w	r5, r5, #3
 8004b66:	3508      	adds	r5, #8
 8004b68:	2d0c      	cmp	r5, #12
 8004b6a:	bf38      	it	cc
 8004b6c:	250c      	movcc	r5, #12
 8004b6e:	2d00      	cmp	r5, #0
 8004b70:	4606      	mov	r6, r0
 8004b72:	db01      	blt.n	8004b78 <_malloc_r+0x1c>
 8004b74:	42a9      	cmp	r1, r5
 8004b76:	d904      	bls.n	8004b82 <_malloc_r+0x26>
 8004b78:	230c      	movs	r3, #12
 8004b7a:	6033      	str	r3, [r6, #0]
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c58 <_malloc_r+0xfc>
 8004b86:	f000 faa3 	bl	80050d0 <__malloc_lock>
 8004b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b8e:	461c      	mov	r4, r3
 8004b90:	bb44      	cbnz	r4, 8004be4 <_malloc_r+0x88>
 8004b92:	4629      	mov	r1, r5
 8004b94:	4630      	mov	r0, r6
 8004b96:	f7ff ffbf 	bl	8004b18 <sbrk_aligned>
 8004b9a:	1c43      	adds	r3, r0, #1
 8004b9c:	4604      	mov	r4, r0
 8004b9e:	d158      	bne.n	8004c52 <_malloc_r+0xf6>
 8004ba0:	f8d8 4000 	ldr.w	r4, [r8]
 8004ba4:	4627      	mov	r7, r4
 8004ba6:	2f00      	cmp	r7, #0
 8004ba8:	d143      	bne.n	8004c32 <_malloc_r+0xd6>
 8004baa:	2c00      	cmp	r4, #0
 8004bac:	d04b      	beq.n	8004c46 <_malloc_r+0xea>
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	4639      	mov	r1, r7
 8004bb2:	4630      	mov	r0, r6
 8004bb4:	eb04 0903 	add.w	r9, r4, r3
 8004bb8:	f000 fc26 	bl	8005408 <_sbrk_r>
 8004bbc:	4581      	cmp	r9, r0
 8004bbe:	d142      	bne.n	8004c46 <_malloc_r+0xea>
 8004bc0:	6821      	ldr	r1, [r4, #0]
 8004bc2:	1a6d      	subs	r5, r5, r1
 8004bc4:	4629      	mov	r1, r5
 8004bc6:	4630      	mov	r0, r6
 8004bc8:	f7ff ffa6 	bl	8004b18 <sbrk_aligned>
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d03a      	beq.n	8004c46 <_malloc_r+0xea>
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	442b      	add	r3, r5
 8004bd4:	6023      	str	r3, [r4, #0]
 8004bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	bb62      	cbnz	r2, 8004c38 <_malloc_r+0xdc>
 8004bde:	f8c8 7000 	str.w	r7, [r8]
 8004be2:	e00f      	b.n	8004c04 <_malloc_r+0xa8>
 8004be4:	6822      	ldr	r2, [r4, #0]
 8004be6:	1b52      	subs	r2, r2, r5
 8004be8:	d420      	bmi.n	8004c2c <_malloc_r+0xd0>
 8004bea:	2a0b      	cmp	r2, #11
 8004bec:	d917      	bls.n	8004c1e <_malloc_r+0xc2>
 8004bee:	1961      	adds	r1, r4, r5
 8004bf0:	42a3      	cmp	r3, r4
 8004bf2:	6025      	str	r5, [r4, #0]
 8004bf4:	bf18      	it	ne
 8004bf6:	6059      	strne	r1, [r3, #4]
 8004bf8:	6863      	ldr	r3, [r4, #4]
 8004bfa:	bf08      	it	eq
 8004bfc:	f8c8 1000 	streq.w	r1, [r8]
 8004c00:	5162      	str	r2, [r4, r5]
 8004c02:	604b      	str	r3, [r1, #4]
 8004c04:	4630      	mov	r0, r6
 8004c06:	f000 fa69 	bl	80050dc <__malloc_unlock>
 8004c0a:	f104 000b 	add.w	r0, r4, #11
 8004c0e:	1d23      	adds	r3, r4, #4
 8004c10:	f020 0007 	bic.w	r0, r0, #7
 8004c14:	1ac2      	subs	r2, r0, r3
 8004c16:	bf1c      	itt	ne
 8004c18:	1a1b      	subne	r3, r3, r0
 8004c1a:	50a3      	strne	r3, [r4, r2]
 8004c1c:	e7af      	b.n	8004b7e <_malloc_r+0x22>
 8004c1e:	6862      	ldr	r2, [r4, #4]
 8004c20:	42a3      	cmp	r3, r4
 8004c22:	bf0c      	ite	eq
 8004c24:	f8c8 2000 	streq.w	r2, [r8]
 8004c28:	605a      	strne	r2, [r3, #4]
 8004c2a:	e7eb      	b.n	8004c04 <_malloc_r+0xa8>
 8004c2c:	4623      	mov	r3, r4
 8004c2e:	6864      	ldr	r4, [r4, #4]
 8004c30:	e7ae      	b.n	8004b90 <_malloc_r+0x34>
 8004c32:	463c      	mov	r4, r7
 8004c34:	687f      	ldr	r7, [r7, #4]
 8004c36:	e7b6      	b.n	8004ba6 <_malloc_r+0x4a>
 8004c38:	461a      	mov	r2, r3
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	42a3      	cmp	r3, r4
 8004c3e:	d1fb      	bne.n	8004c38 <_malloc_r+0xdc>
 8004c40:	2300      	movs	r3, #0
 8004c42:	6053      	str	r3, [r2, #4]
 8004c44:	e7de      	b.n	8004c04 <_malloc_r+0xa8>
 8004c46:	230c      	movs	r3, #12
 8004c48:	6033      	str	r3, [r6, #0]
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	f000 fa46 	bl	80050dc <__malloc_unlock>
 8004c50:	e794      	b.n	8004b7c <_malloc_r+0x20>
 8004c52:	6005      	str	r5, [r0, #0]
 8004c54:	e7d6      	b.n	8004c04 <_malloc_r+0xa8>
 8004c56:	bf00      	nop
 8004c58:	20000808 	.word	0x20000808

08004c5c <_printf_common>:
 8004c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c60:	4616      	mov	r6, r2
 8004c62:	4698      	mov	r8, r3
 8004c64:	688a      	ldr	r2, [r1, #8]
 8004c66:	690b      	ldr	r3, [r1, #16]
 8004c68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	bfb8      	it	lt
 8004c70:	4613      	movlt	r3, r2
 8004c72:	6033      	str	r3, [r6, #0]
 8004c74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c78:	4607      	mov	r7, r0
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	b10a      	cbz	r2, 8004c82 <_printf_common+0x26>
 8004c7e:	3301      	adds	r3, #1
 8004c80:	6033      	str	r3, [r6, #0]
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	0699      	lsls	r1, r3, #26
 8004c86:	bf42      	ittt	mi
 8004c88:	6833      	ldrmi	r3, [r6, #0]
 8004c8a:	3302      	addmi	r3, #2
 8004c8c:	6033      	strmi	r3, [r6, #0]
 8004c8e:	6825      	ldr	r5, [r4, #0]
 8004c90:	f015 0506 	ands.w	r5, r5, #6
 8004c94:	d106      	bne.n	8004ca4 <_printf_common+0x48>
 8004c96:	f104 0a19 	add.w	sl, r4, #25
 8004c9a:	68e3      	ldr	r3, [r4, #12]
 8004c9c:	6832      	ldr	r2, [r6, #0]
 8004c9e:	1a9b      	subs	r3, r3, r2
 8004ca0:	42ab      	cmp	r3, r5
 8004ca2:	dc26      	bgt.n	8004cf2 <_printf_common+0x96>
 8004ca4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ca8:	6822      	ldr	r2, [r4, #0]
 8004caa:	3b00      	subs	r3, #0
 8004cac:	bf18      	it	ne
 8004cae:	2301      	movne	r3, #1
 8004cb0:	0692      	lsls	r2, r2, #26
 8004cb2:	d42b      	bmi.n	8004d0c <_printf_common+0xb0>
 8004cb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004cb8:	4641      	mov	r1, r8
 8004cba:	4638      	mov	r0, r7
 8004cbc:	47c8      	blx	r9
 8004cbe:	3001      	adds	r0, #1
 8004cc0:	d01e      	beq.n	8004d00 <_printf_common+0xa4>
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	6922      	ldr	r2, [r4, #16]
 8004cc6:	f003 0306 	and.w	r3, r3, #6
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	bf02      	ittt	eq
 8004cce:	68e5      	ldreq	r5, [r4, #12]
 8004cd0:	6833      	ldreq	r3, [r6, #0]
 8004cd2:	1aed      	subeq	r5, r5, r3
 8004cd4:	68a3      	ldr	r3, [r4, #8]
 8004cd6:	bf0c      	ite	eq
 8004cd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cdc:	2500      	movne	r5, #0
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	bfc4      	itt	gt
 8004ce2:	1a9b      	subgt	r3, r3, r2
 8004ce4:	18ed      	addgt	r5, r5, r3
 8004ce6:	2600      	movs	r6, #0
 8004ce8:	341a      	adds	r4, #26
 8004cea:	42b5      	cmp	r5, r6
 8004cec:	d11a      	bne.n	8004d24 <_printf_common+0xc8>
 8004cee:	2000      	movs	r0, #0
 8004cf0:	e008      	b.n	8004d04 <_printf_common+0xa8>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	4652      	mov	r2, sl
 8004cf6:	4641      	mov	r1, r8
 8004cf8:	4638      	mov	r0, r7
 8004cfa:	47c8      	blx	r9
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d103      	bne.n	8004d08 <_printf_common+0xac>
 8004d00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d08:	3501      	adds	r5, #1
 8004d0a:	e7c6      	b.n	8004c9a <_printf_common+0x3e>
 8004d0c:	18e1      	adds	r1, r4, r3
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	2030      	movs	r0, #48	@ 0x30
 8004d12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d16:	4422      	add	r2, r4
 8004d18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d20:	3302      	adds	r3, #2
 8004d22:	e7c7      	b.n	8004cb4 <_printf_common+0x58>
 8004d24:	2301      	movs	r3, #1
 8004d26:	4622      	mov	r2, r4
 8004d28:	4641      	mov	r1, r8
 8004d2a:	4638      	mov	r0, r7
 8004d2c:	47c8      	blx	r9
 8004d2e:	3001      	adds	r0, #1
 8004d30:	d0e6      	beq.n	8004d00 <_printf_common+0xa4>
 8004d32:	3601      	adds	r6, #1
 8004d34:	e7d9      	b.n	8004cea <_printf_common+0x8e>
	...

08004d38 <_printf_i>:
 8004d38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d3c:	7e0f      	ldrb	r7, [r1, #24]
 8004d3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d40:	2f78      	cmp	r7, #120	@ 0x78
 8004d42:	4691      	mov	r9, r2
 8004d44:	4680      	mov	r8, r0
 8004d46:	460c      	mov	r4, r1
 8004d48:	469a      	mov	sl, r3
 8004d4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d4e:	d807      	bhi.n	8004d60 <_printf_i+0x28>
 8004d50:	2f62      	cmp	r7, #98	@ 0x62
 8004d52:	d80a      	bhi.n	8004d6a <_printf_i+0x32>
 8004d54:	2f00      	cmp	r7, #0
 8004d56:	f000 80d2 	beq.w	8004efe <_printf_i+0x1c6>
 8004d5a:	2f58      	cmp	r7, #88	@ 0x58
 8004d5c:	f000 80b9 	beq.w	8004ed2 <_printf_i+0x19a>
 8004d60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d68:	e03a      	b.n	8004de0 <_printf_i+0xa8>
 8004d6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d6e:	2b15      	cmp	r3, #21
 8004d70:	d8f6      	bhi.n	8004d60 <_printf_i+0x28>
 8004d72:	a101      	add	r1, pc, #4	@ (adr r1, 8004d78 <_printf_i+0x40>)
 8004d74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d78:	08004dd1 	.word	0x08004dd1
 8004d7c:	08004de5 	.word	0x08004de5
 8004d80:	08004d61 	.word	0x08004d61
 8004d84:	08004d61 	.word	0x08004d61
 8004d88:	08004d61 	.word	0x08004d61
 8004d8c:	08004d61 	.word	0x08004d61
 8004d90:	08004de5 	.word	0x08004de5
 8004d94:	08004d61 	.word	0x08004d61
 8004d98:	08004d61 	.word	0x08004d61
 8004d9c:	08004d61 	.word	0x08004d61
 8004da0:	08004d61 	.word	0x08004d61
 8004da4:	08004ee5 	.word	0x08004ee5
 8004da8:	08004e0f 	.word	0x08004e0f
 8004dac:	08004e9f 	.word	0x08004e9f
 8004db0:	08004d61 	.word	0x08004d61
 8004db4:	08004d61 	.word	0x08004d61
 8004db8:	08004f07 	.word	0x08004f07
 8004dbc:	08004d61 	.word	0x08004d61
 8004dc0:	08004e0f 	.word	0x08004e0f
 8004dc4:	08004d61 	.word	0x08004d61
 8004dc8:	08004d61 	.word	0x08004d61
 8004dcc:	08004ea7 	.word	0x08004ea7
 8004dd0:	6833      	ldr	r3, [r6, #0]
 8004dd2:	1d1a      	adds	r2, r3, #4
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6032      	str	r2, [r6, #0]
 8004dd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ddc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004de0:	2301      	movs	r3, #1
 8004de2:	e09d      	b.n	8004f20 <_printf_i+0x1e8>
 8004de4:	6833      	ldr	r3, [r6, #0]
 8004de6:	6820      	ldr	r0, [r4, #0]
 8004de8:	1d19      	adds	r1, r3, #4
 8004dea:	6031      	str	r1, [r6, #0]
 8004dec:	0606      	lsls	r6, r0, #24
 8004dee:	d501      	bpl.n	8004df4 <_printf_i+0xbc>
 8004df0:	681d      	ldr	r5, [r3, #0]
 8004df2:	e003      	b.n	8004dfc <_printf_i+0xc4>
 8004df4:	0645      	lsls	r5, r0, #25
 8004df6:	d5fb      	bpl.n	8004df0 <_printf_i+0xb8>
 8004df8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004dfc:	2d00      	cmp	r5, #0
 8004dfe:	da03      	bge.n	8004e08 <_printf_i+0xd0>
 8004e00:	232d      	movs	r3, #45	@ 0x2d
 8004e02:	426d      	negs	r5, r5
 8004e04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e08:	4859      	ldr	r0, [pc, #356]	@ (8004f70 <_printf_i+0x238>)
 8004e0a:	230a      	movs	r3, #10
 8004e0c:	e011      	b.n	8004e32 <_printf_i+0xfa>
 8004e0e:	6821      	ldr	r1, [r4, #0]
 8004e10:	6833      	ldr	r3, [r6, #0]
 8004e12:	0608      	lsls	r0, r1, #24
 8004e14:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e18:	d402      	bmi.n	8004e20 <_printf_i+0xe8>
 8004e1a:	0649      	lsls	r1, r1, #25
 8004e1c:	bf48      	it	mi
 8004e1e:	b2ad      	uxthmi	r5, r5
 8004e20:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e22:	4853      	ldr	r0, [pc, #332]	@ (8004f70 <_printf_i+0x238>)
 8004e24:	6033      	str	r3, [r6, #0]
 8004e26:	bf14      	ite	ne
 8004e28:	230a      	movne	r3, #10
 8004e2a:	2308      	moveq	r3, #8
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e32:	6866      	ldr	r6, [r4, #4]
 8004e34:	60a6      	str	r6, [r4, #8]
 8004e36:	2e00      	cmp	r6, #0
 8004e38:	bfa2      	ittt	ge
 8004e3a:	6821      	ldrge	r1, [r4, #0]
 8004e3c:	f021 0104 	bicge.w	r1, r1, #4
 8004e40:	6021      	strge	r1, [r4, #0]
 8004e42:	b90d      	cbnz	r5, 8004e48 <_printf_i+0x110>
 8004e44:	2e00      	cmp	r6, #0
 8004e46:	d04b      	beq.n	8004ee0 <_printf_i+0x1a8>
 8004e48:	4616      	mov	r6, r2
 8004e4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e4e:	fb03 5711 	mls	r7, r3, r1, r5
 8004e52:	5dc7      	ldrb	r7, [r0, r7]
 8004e54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e58:	462f      	mov	r7, r5
 8004e5a:	42bb      	cmp	r3, r7
 8004e5c:	460d      	mov	r5, r1
 8004e5e:	d9f4      	bls.n	8004e4a <_printf_i+0x112>
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d10b      	bne.n	8004e7c <_printf_i+0x144>
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	07df      	lsls	r7, r3, #31
 8004e68:	d508      	bpl.n	8004e7c <_printf_i+0x144>
 8004e6a:	6923      	ldr	r3, [r4, #16]
 8004e6c:	6861      	ldr	r1, [r4, #4]
 8004e6e:	4299      	cmp	r1, r3
 8004e70:	bfde      	ittt	le
 8004e72:	2330      	movle	r3, #48	@ 0x30
 8004e74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e78:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004e7c:	1b92      	subs	r2, r2, r6
 8004e7e:	6122      	str	r2, [r4, #16]
 8004e80:	f8cd a000 	str.w	sl, [sp]
 8004e84:	464b      	mov	r3, r9
 8004e86:	aa03      	add	r2, sp, #12
 8004e88:	4621      	mov	r1, r4
 8004e8a:	4640      	mov	r0, r8
 8004e8c:	f7ff fee6 	bl	8004c5c <_printf_common>
 8004e90:	3001      	adds	r0, #1
 8004e92:	d14a      	bne.n	8004f2a <_printf_i+0x1f2>
 8004e94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e98:	b004      	add	sp, #16
 8004e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	f043 0320 	orr.w	r3, r3, #32
 8004ea4:	6023      	str	r3, [r4, #0]
 8004ea6:	4833      	ldr	r0, [pc, #204]	@ (8004f74 <_printf_i+0x23c>)
 8004ea8:	2778      	movs	r7, #120	@ 0x78
 8004eaa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	6831      	ldr	r1, [r6, #0]
 8004eb2:	061f      	lsls	r7, r3, #24
 8004eb4:	f851 5b04 	ldr.w	r5, [r1], #4
 8004eb8:	d402      	bmi.n	8004ec0 <_printf_i+0x188>
 8004eba:	065f      	lsls	r7, r3, #25
 8004ebc:	bf48      	it	mi
 8004ebe:	b2ad      	uxthmi	r5, r5
 8004ec0:	6031      	str	r1, [r6, #0]
 8004ec2:	07d9      	lsls	r1, r3, #31
 8004ec4:	bf44      	itt	mi
 8004ec6:	f043 0320 	orrmi.w	r3, r3, #32
 8004eca:	6023      	strmi	r3, [r4, #0]
 8004ecc:	b11d      	cbz	r5, 8004ed6 <_printf_i+0x19e>
 8004ece:	2310      	movs	r3, #16
 8004ed0:	e7ac      	b.n	8004e2c <_printf_i+0xf4>
 8004ed2:	4827      	ldr	r0, [pc, #156]	@ (8004f70 <_printf_i+0x238>)
 8004ed4:	e7e9      	b.n	8004eaa <_printf_i+0x172>
 8004ed6:	6823      	ldr	r3, [r4, #0]
 8004ed8:	f023 0320 	bic.w	r3, r3, #32
 8004edc:	6023      	str	r3, [r4, #0]
 8004ede:	e7f6      	b.n	8004ece <_printf_i+0x196>
 8004ee0:	4616      	mov	r6, r2
 8004ee2:	e7bd      	b.n	8004e60 <_printf_i+0x128>
 8004ee4:	6833      	ldr	r3, [r6, #0]
 8004ee6:	6825      	ldr	r5, [r4, #0]
 8004ee8:	6961      	ldr	r1, [r4, #20]
 8004eea:	1d18      	adds	r0, r3, #4
 8004eec:	6030      	str	r0, [r6, #0]
 8004eee:	062e      	lsls	r6, r5, #24
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	d501      	bpl.n	8004ef8 <_printf_i+0x1c0>
 8004ef4:	6019      	str	r1, [r3, #0]
 8004ef6:	e002      	b.n	8004efe <_printf_i+0x1c6>
 8004ef8:	0668      	lsls	r0, r5, #25
 8004efa:	d5fb      	bpl.n	8004ef4 <_printf_i+0x1bc>
 8004efc:	8019      	strh	r1, [r3, #0]
 8004efe:	2300      	movs	r3, #0
 8004f00:	6123      	str	r3, [r4, #16]
 8004f02:	4616      	mov	r6, r2
 8004f04:	e7bc      	b.n	8004e80 <_printf_i+0x148>
 8004f06:	6833      	ldr	r3, [r6, #0]
 8004f08:	1d1a      	adds	r2, r3, #4
 8004f0a:	6032      	str	r2, [r6, #0]
 8004f0c:	681e      	ldr	r6, [r3, #0]
 8004f0e:	6862      	ldr	r2, [r4, #4]
 8004f10:	2100      	movs	r1, #0
 8004f12:	4630      	mov	r0, r6
 8004f14:	f7fb f984 	bl	8000220 <memchr>
 8004f18:	b108      	cbz	r0, 8004f1e <_printf_i+0x1e6>
 8004f1a:	1b80      	subs	r0, r0, r6
 8004f1c:	6060      	str	r0, [r4, #4]
 8004f1e:	6863      	ldr	r3, [r4, #4]
 8004f20:	6123      	str	r3, [r4, #16]
 8004f22:	2300      	movs	r3, #0
 8004f24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f28:	e7aa      	b.n	8004e80 <_printf_i+0x148>
 8004f2a:	6923      	ldr	r3, [r4, #16]
 8004f2c:	4632      	mov	r2, r6
 8004f2e:	4649      	mov	r1, r9
 8004f30:	4640      	mov	r0, r8
 8004f32:	47d0      	blx	sl
 8004f34:	3001      	adds	r0, #1
 8004f36:	d0ad      	beq.n	8004e94 <_printf_i+0x15c>
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	079b      	lsls	r3, r3, #30
 8004f3c:	d413      	bmi.n	8004f66 <_printf_i+0x22e>
 8004f3e:	68e0      	ldr	r0, [r4, #12]
 8004f40:	9b03      	ldr	r3, [sp, #12]
 8004f42:	4298      	cmp	r0, r3
 8004f44:	bfb8      	it	lt
 8004f46:	4618      	movlt	r0, r3
 8004f48:	e7a6      	b.n	8004e98 <_printf_i+0x160>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	4632      	mov	r2, r6
 8004f4e:	4649      	mov	r1, r9
 8004f50:	4640      	mov	r0, r8
 8004f52:	47d0      	blx	sl
 8004f54:	3001      	adds	r0, #1
 8004f56:	d09d      	beq.n	8004e94 <_printf_i+0x15c>
 8004f58:	3501      	adds	r5, #1
 8004f5a:	68e3      	ldr	r3, [r4, #12]
 8004f5c:	9903      	ldr	r1, [sp, #12]
 8004f5e:	1a5b      	subs	r3, r3, r1
 8004f60:	42ab      	cmp	r3, r5
 8004f62:	dcf2      	bgt.n	8004f4a <_printf_i+0x212>
 8004f64:	e7eb      	b.n	8004f3e <_printf_i+0x206>
 8004f66:	2500      	movs	r5, #0
 8004f68:	f104 0619 	add.w	r6, r4, #25
 8004f6c:	e7f5      	b.n	8004f5a <_printf_i+0x222>
 8004f6e:	bf00      	nop
 8004f70:	080056e9 	.word	0x080056e9
 8004f74:	080056fa 	.word	0x080056fa

08004f78 <__sflush_r>:
 8004f78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f80:	0716      	lsls	r6, r2, #28
 8004f82:	4605      	mov	r5, r0
 8004f84:	460c      	mov	r4, r1
 8004f86:	d454      	bmi.n	8005032 <__sflush_r+0xba>
 8004f88:	684b      	ldr	r3, [r1, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	dc02      	bgt.n	8004f94 <__sflush_r+0x1c>
 8004f8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	dd48      	ble.n	8005026 <__sflush_r+0xae>
 8004f94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f96:	2e00      	cmp	r6, #0
 8004f98:	d045      	beq.n	8005026 <__sflush_r+0xae>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004fa0:	682f      	ldr	r7, [r5, #0]
 8004fa2:	6a21      	ldr	r1, [r4, #32]
 8004fa4:	602b      	str	r3, [r5, #0]
 8004fa6:	d030      	beq.n	800500a <__sflush_r+0x92>
 8004fa8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004faa:	89a3      	ldrh	r3, [r4, #12]
 8004fac:	0759      	lsls	r1, r3, #29
 8004fae:	d505      	bpl.n	8004fbc <__sflush_r+0x44>
 8004fb0:	6863      	ldr	r3, [r4, #4]
 8004fb2:	1ad2      	subs	r2, r2, r3
 8004fb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004fb6:	b10b      	cbz	r3, 8004fbc <__sflush_r+0x44>
 8004fb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004fba:	1ad2      	subs	r2, r2, r3
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004fc0:	6a21      	ldr	r1, [r4, #32]
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	47b0      	blx	r6
 8004fc6:	1c43      	adds	r3, r0, #1
 8004fc8:	89a3      	ldrh	r3, [r4, #12]
 8004fca:	d106      	bne.n	8004fda <__sflush_r+0x62>
 8004fcc:	6829      	ldr	r1, [r5, #0]
 8004fce:	291d      	cmp	r1, #29
 8004fd0:	d82b      	bhi.n	800502a <__sflush_r+0xb2>
 8004fd2:	4a2a      	ldr	r2, [pc, #168]	@ (800507c <__sflush_r+0x104>)
 8004fd4:	410a      	asrs	r2, r1
 8004fd6:	07d6      	lsls	r6, r2, #31
 8004fd8:	d427      	bmi.n	800502a <__sflush_r+0xb2>
 8004fda:	2200      	movs	r2, #0
 8004fdc:	6062      	str	r2, [r4, #4]
 8004fde:	04d9      	lsls	r1, r3, #19
 8004fe0:	6922      	ldr	r2, [r4, #16]
 8004fe2:	6022      	str	r2, [r4, #0]
 8004fe4:	d504      	bpl.n	8004ff0 <__sflush_r+0x78>
 8004fe6:	1c42      	adds	r2, r0, #1
 8004fe8:	d101      	bne.n	8004fee <__sflush_r+0x76>
 8004fea:	682b      	ldr	r3, [r5, #0]
 8004fec:	b903      	cbnz	r3, 8004ff0 <__sflush_r+0x78>
 8004fee:	6560      	str	r0, [r4, #84]	@ 0x54
 8004ff0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ff2:	602f      	str	r7, [r5, #0]
 8004ff4:	b1b9      	cbz	r1, 8005026 <__sflush_r+0xae>
 8004ff6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ffa:	4299      	cmp	r1, r3
 8004ffc:	d002      	beq.n	8005004 <__sflush_r+0x8c>
 8004ffe:	4628      	mov	r0, r5
 8005000:	f000 fa24 	bl	800544c <_free_r>
 8005004:	2300      	movs	r3, #0
 8005006:	6363      	str	r3, [r4, #52]	@ 0x34
 8005008:	e00d      	b.n	8005026 <__sflush_r+0xae>
 800500a:	2301      	movs	r3, #1
 800500c:	4628      	mov	r0, r5
 800500e:	47b0      	blx	r6
 8005010:	4602      	mov	r2, r0
 8005012:	1c50      	adds	r0, r2, #1
 8005014:	d1c9      	bne.n	8004faa <__sflush_r+0x32>
 8005016:	682b      	ldr	r3, [r5, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0c6      	beq.n	8004faa <__sflush_r+0x32>
 800501c:	2b1d      	cmp	r3, #29
 800501e:	d001      	beq.n	8005024 <__sflush_r+0xac>
 8005020:	2b16      	cmp	r3, #22
 8005022:	d11e      	bne.n	8005062 <__sflush_r+0xea>
 8005024:	602f      	str	r7, [r5, #0]
 8005026:	2000      	movs	r0, #0
 8005028:	e022      	b.n	8005070 <__sflush_r+0xf8>
 800502a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800502e:	b21b      	sxth	r3, r3
 8005030:	e01b      	b.n	800506a <__sflush_r+0xf2>
 8005032:	690f      	ldr	r7, [r1, #16]
 8005034:	2f00      	cmp	r7, #0
 8005036:	d0f6      	beq.n	8005026 <__sflush_r+0xae>
 8005038:	0793      	lsls	r3, r2, #30
 800503a:	680e      	ldr	r6, [r1, #0]
 800503c:	bf08      	it	eq
 800503e:	694b      	ldreq	r3, [r1, #20]
 8005040:	600f      	str	r7, [r1, #0]
 8005042:	bf18      	it	ne
 8005044:	2300      	movne	r3, #0
 8005046:	eba6 0807 	sub.w	r8, r6, r7
 800504a:	608b      	str	r3, [r1, #8]
 800504c:	f1b8 0f00 	cmp.w	r8, #0
 8005050:	dde9      	ble.n	8005026 <__sflush_r+0xae>
 8005052:	6a21      	ldr	r1, [r4, #32]
 8005054:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005056:	4643      	mov	r3, r8
 8005058:	463a      	mov	r2, r7
 800505a:	4628      	mov	r0, r5
 800505c:	47b0      	blx	r6
 800505e:	2800      	cmp	r0, #0
 8005060:	dc08      	bgt.n	8005074 <__sflush_r+0xfc>
 8005062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800506a:	81a3      	strh	r3, [r4, #12]
 800506c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005074:	4407      	add	r7, r0
 8005076:	eba8 0800 	sub.w	r8, r8, r0
 800507a:	e7e7      	b.n	800504c <__sflush_r+0xd4>
 800507c:	dfbffffe 	.word	0xdfbffffe

08005080 <_fflush_r>:
 8005080:	b538      	push	{r3, r4, r5, lr}
 8005082:	690b      	ldr	r3, [r1, #16]
 8005084:	4605      	mov	r5, r0
 8005086:	460c      	mov	r4, r1
 8005088:	b913      	cbnz	r3, 8005090 <_fflush_r+0x10>
 800508a:	2500      	movs	r5, #0
 800508c:	4628      	mov	r0, r5
 800508e:	bd38      	pop	{r3, r4, r5, pc}
 8005090:	b118      	cbz	r0, 800509a <_fflush_r+0x1a>
 8005092:	6a03      	ldr	r3, [r0, #32]
 8005094:	b90b      	cbnz	r3, 800509a <_fflush_r+0x1a>
 8005096:	f7ff fb23 	bl	80046e0 <__sinit>
 800509a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0f3      	beq.n	800508a <_fflush_r+0xa>
 80050a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80050a4:	07d0      	lsls	r0, r2, #31
 80050a6:	d404      	bmi.n	80050b2 <_fflush_r+0x32>
 80050a8:	0599      	lsls	r1, r3, #22
 80050aa:	d402      	bmi.n	80050b2 <_fflush_r+0x32>
 80050ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050ae:	f7ff fbf0 	bl	8004892 <__retarget_lock_acquire_recursive>
 80050b2:	4628      	mov	r0, r5
 80050b4:	4621      	mov	r1, r4
 80050b6:	f7ff ff5f 	bl	8004f78 <__sflush_r>
 80050ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80050bc:	07da      	lsls	r2, r3, #31
 80050be:	4605      	mov	r5, r0
 80050c0:	d4e4      	bmi.n	800508c <_fflush_r+0xc>
 80050c2:	89a3      	ldrh	r3, [r4, #12]
 80050c4:	059b      	lsls	r3, r3, #22
 80050c6:	d4e1      	bmi.n	800508c <_fflush_r+0xc>
 80050c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050ca:	f7ff fbe3 	bl	8004894 <__retarget_lock_release_recursive>
 80050ce:	e7dd      	b.n	800508c <_fflush_r+0xc>

080050d0 <__malloc_lock>:
 80050d0:	4801      	ldr	r0, [pc, #4]	@ (80050d8 <__malloc_lock+0x8>)
 80050d2:	f7ff bbde 	b.w	8004892 <__retarget_lock_acquire_recursive>
 80050d6:	bf00      	nop
 80050d8:	20000800 	.word	0x20000800

080050dc <__malloc_unlock>:
 80050dc:	4801      	ldr	r0, [pc, #4]	@ (80050e4 <__malloc_unlock+0x8>)
 80050de:	f7ff bbd9 	b.w	8004894 <__retarget_lock_release_recursive>
 80050e2:	bf00      	nop
 80050e4:	20000800 	.word	0x20000800

080050e8 <__sread>:
 80050e8:	b510      	push	{r4, lr}
 80050ea:	460c      	mov	r4, r1
 80050ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050f0:	f000 f978 	bl	80053e4 <_read_r>
 80050f4:	2800      	cmp	r0, #0
 80050f6:	bfab      	itete	ge
 80050f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80050fa:	89a3      	ldrhlt	r3, [r4, #12]
 80050fc:	181b      	addge	r3, r3, r0
 80050fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005102:	bfac      	ite	ge
 8005104:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005106:	81a3      	strhlt	r3, [r4, #12]
 8005108:	bd10      	pop	{r4, pc}

0800510a <__swrite>:
 800510a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800510e:	461f      	mov	r7, r3
 8005110:	898b      	ldrh	r3, [r1, #12]
 8005112:	05db      	lsls	r3, r3, #23
 8005114:	4605      	mov	r5, r0
 8005116:	460c      	mov	r4, r1
 8005118:	4616      	mov	r6, r2
 800511a:	d505      	bpl.n	8005128 <__swrite+0x1e>
 800511c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005120:	2302      	movs	r3, #2
 8005122:	2200      	movs	r2, #0
 8005124:	f000 f94c 	bl	80053c0 <_lseek_r>
 8005128:	89a3      	ldrh	r3, [r4, #12]
 800512a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800512e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005132:	81a3      	strh	r3, [r4, #12]
 8005134:	4632      	mov	r2, r6
 8005136:	463b      	mov	r3, r7
 8005138:	4628      	mov	r0, r5
 800513a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800513e:	f000 b973 	b.w	8005428 <_write_r>

08005142 <__sseek>:
 8005142:	b510      	push	{r4, lr}
 8005144:	460c      	mov	r4, r1
 8005146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800514a:	f000 f939 	bl	80053c0 <_lseek_r>
 800514e:	1c43      	adds	r3, r0, #1
 8005150:	89a3      	ldrh	r3, [r4, #12]
 8005152:	bf15      	itete	ne
 8005154:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005156:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800515a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800515e:	81a3      	strheq	r3, [r4, #12]
 8005160:	bf18      	it	ne
 8005162:	81a3      	strhne	r3, [r4, #12]
 8005164:	bd10      	pop	{r4, pc}

08005166 <__sclose>:
 8005166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800516a:	f000 b8f7 	b.w	800535c <_close_r>

0800516e <__swbuf_r>:
 800516e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005170:	460e      	mov	r6, r1
 8005172:	4614      	mov	r4, r2
 8005174:	4605      	mov	r5, r0
 8005176:	b118      	cbz	r0, 8005180 <__swbuf_r+0x12>
 8005178:	6a03      	ldr	r3, [r0, #32]
 800517a:	b90b      	cbnz	r3, 8005180 <__swbuf_r+0x12>
 800517c:	f7ff fab0 	bl	80046e0 <__sinit>
 8005180:	69a3      	ldr	r3, [r4, #24]
 8005182:	60a3      	str	r3, [r4, #8]
 8005184:	89a3      	ldrh	r3, [r4, #12]
 8005186:	071a      	lsls	r2, r3, #28
 8005188:	d501      	bpl.n	800518e <__swbuf_r+0x20>
 800518a:	6923      	ldr	r3, [r4, #16]
 800518c:	b943      	cbnz	r3, 80051a0 <__swbuf_r+0x32>
 800518e:	4621      	mov	r1, r4
 8005190:	4628      	mov	r0, r5
 8005192:	f000 f82b 	bl	80051ec <__swsetup_r>
 8005196:	b118      	cbz	r0, 80051a0 <__swbuf_r+0x32>
 8005198:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800519c:	4638      	mov	r0, r7
 800519e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051a0:	6823      	ldr	r3, [r4, #0]
 80051a2:	6922      	ldr	r2, [r4, #16]
 80051a4:	1a98      	subs	r0, r3, r2
 80051a6:	6963      	ldr	r3, [r4, #20]
 80051a8:	b2f6      	uxtb	r6, r6
 80051aa:	4283      	cmp	r3, r0
 80051ac:	4637      	mov	r7, r6
 80051ae:	dc05      	bgt.n	80051bc <__swbuf_r+0x4e>
 80051b0:	4621      	mov	r1, r4
 80051b2:	4628      	mov	r0, r5
 80051b4:	f7ff ff64 	bl	8005080 <_fflush_r>
 80051b8:	2800      	cmp	r0, #0
 80051ba:	d1ed      	bne.n	8005198 <__swbuf_r+0x2a>
 80051bc:	68a3      	ldr	r3, [r4, #8]
 80051be:	3b01      	subs	r3, #1
 80051c0:	60a3      	str	r3, [r4, #8]
 80051c2:	6823      	ldr	r3, [r4, #0]
 80051c4:	1c5a      	adds	r2, r3, #1
 80051c6:	6022      	str	r2, [r4, #0]
 80051c8:	701e      	strb	r6, [r3, #0]
 80051ca:	6962      	ldr	r2, [r4, #20]
 80051cc:	1c43      	adds	r3, r0, #1
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d004      	beq.n	80051dc <__swbuf_r+0x6e>
 80051d2:	89a3      	ldrh	r3, [r4, #12]
 80051d4:	07db      	lsls	r3, r3, #31
 80051d6:	d5e1      	bpl.n	800519c <__swbuf_r+0x2e>
 80051d8:	2e0a      	cmp	r6, #10
 80051da:	d1df      	bne.n	800519c <__swbuf_r+0x2e>
 80051dc:	4621      	mov	r1, r4
 80051de:	4628      	mov	r0, r5
 80051e0:	f7ff ff4e 	bl	8005080 <_fflush_r>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	d0d9      	beq.n	800519c <__swbuf_r+0x2e>
 80051e8:	e7d6      	b.n	8005198 <__swbuf_r+0x2a>
	...

080051ec <__swsetup_r>:
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	4b29      	ldr	r3, [pc, #164]	@ (8005294 <__swsetup_r+0xa8>)
 80051f0:	4605      	mov	r5, r0
 80051f2:	6818      	ldr	r0, [r3, #0]
 80051f4:	460c      	mov	r4, r1
 80051f6:	b118      	cbz	r0, 8005200 <__swsetup_r+0x14>
 80051f8:	6a03      	ldr	r3, [r0, #32]
 80051fa:	b90b      	cbnz	r3, 8005200 <__swsetup_r+0x14>
 80051fc:	f7ff fa70 	bl	80046e0 <__sinit>
 8005200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005204:	0719      	lsls	r1, r3, #28
 8005206:	d422      	bmi.n	800524e <__swsetup_r+0x62>
 8005208:	06da      	lsls	r2, r3, #27
 800520a:	d407      	bmi.n	800521c <__swsetup_r+0x30>
 800520c:	2209      	movs	r2, #9
 800520e:	602a      	str	r2, [r5, #0]
 8005210:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005214:	81a3      	strh	r3, [r4, #12]
 8005216:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800521a:	e033      	b.n	8005284 <__swsetup_r+0x98>
 800521c:	0758      	lsls	r0, r3, #29
 800521e:	d512      	bpl.n	8005246 <__swsetup_r+0x5a>
 8005220:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005222:	b141      	cbz	r1, 8005236 <__swsetup_r+0x4a>
 8005224:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005228:	4299      	cmp	r1, r3
 800522a:	d002      	beq.n	8005232 <__swsetup_r+0x46>
 800522c:	4628      	mov	r0, r5
 800522e:	f000 f90d 	bl	800544c <_free_r>
 8005232:	2300      	movs	r3, #0
 8005234:	6363      	str	r3, [r4, #52]	@ 0x34
 8005236:	89a3      	ldrh	r3, [r4, #12]
 8005238:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800523c:	81a3      	strh	r3, [r4, #12]
 800523e:	2300      	movs	r3, #0
 8005240:	6063      	str	r3, [r4, #4]
 8005242:	6923      	ldr	r3, [r4, #16]
 8005244:	6023      	str	r3, [r4, #0]
 8005246:	89a3      	ldrh	r3, [r4, #12]
 8005248:	f043 0308 	orr.w	r3, r3, #8
 800524c:	81a3      	strh	r3, [r4, #12]
 800524e:	6923      	ldr	r3, [r4, #16]
 8005250:	b94b      	cbnz	r3, 8005266 <__swsetup_r+0x7a>
 8005252:	89a3      	ldrh	r3, [r4, #12]
 8005254:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800525c:	d003      	beq.n	8005266 <__swsetup_r+0x7a>
 800525e:	4621      	mov	r1, r4
 8005260:	4628      	mov	r0, r5
 8005262:	f000 f83f 	bl	80052e4 <__smakebuf_r>
 8005266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800526a:	f013 0201 	ands.w	r2, r3, #1
 800526e:	d00a      	beq.n	8005286 <__swsetup_r+0x9a>
 8005270:	2200      	movs	r2, #0
 8005272:	60a2      	str	r2, [r4, #8]
 8005274:	6962      	ldr	r2, [r4, #20]
 8005276:	4252      	negs	r2, r2
 8005278:	61a2      	str	r2, [r4, #24]
 800527a:	6922      	ldr	r2, [r4, #16]
 800527c:	b942      	cbnz	r2, 8005290 <__swsetup_r+0xa4>
 800527e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005282:	d1c5      	bne.n	8005210 <__swsetup_r+0x24>
 8005284:	bd38      	pop	{r3, r4, r5, pc}
 8005286:	0799      	lsls	r1, r3, #30
 8005288:	bf58      	it	pl
 800528a:	6962      	ldrpl	r2, [r4, #20]
 800528c:	60a2      	str	r2, [r4, #8]
 800528e:	e7f4      	b.n	800527a <__swsetup_r+0x8e>
 8005290:	2000      	movs	r0, #0
 8005292:	e7f7      	b.n	8005284 <__swsetup_r+0x98>
 8005294:	20000018 	.word	0x20000018

08005298 <__swhatbuf_r>:
 8005298:	b570      	push	{r4, r5, r6, lr}
 800529a:	460c      	mov	r4, r1
 800529c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052a0:	2900      	cmp	r1, #0
 80052a2:	b096      	sub	sp, #88	@ 0x58
 80052a4:	4615      	mov	r5, r2
 80052a6:	461e      	mov	r6, r3
 80052a8:	da0d      	bge.n	80052c6 <__swhatbuf_r+0x2e>
 80052aa:	89a3      	ldrh	r3, [r4, #12]
 80052ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80052b0:	f04f 0100 	mov.w	r1, #0
 80052b4:	bf14      	ite	ne
 80052b6:	2340      	movne	r3, #64	@ 0x40
 80052b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80052bc:	2000      	movs	r0, #0
 80052be:	6031      	str	r1, [r6, #0]
 80052c0:	602b      	str	r3, [r5, #0]
 80052c2:	b016      	add	sp, #88	@ 0x58
 80052c4:	bd70      	pop	{r4, r5, r6, pc}
 80052c6:	466a      	mov	r2, sp
 80052c8:	f000 f858 	bl	800537c <_fstat_r>
 80052cc:	2800      	cmp	r0, #0
 80052ce:	dbec      	blt.n	80052aa <__swhatbuf_r+0x12>
 80052d0:	9901      	ldr	r1, [sp, #4]
 80052d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80052d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80052da:	4259      	negs	r1, r3
 80052dc:	4159      	adcs	r1, r3
 80052de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052e2:	e7eb      	b.n	80052bc <__swhatbuf_r+0x24>

080052e4 <__smakebuf_r>:
 80052e4:	898b      	ldrh	r3, [r1, #12]
 80052e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052e8:	079d      	lsls	r5, r3, #30
 80052ea:	4606      	mov	r6, r0
 80052ec:	460c      	mov	r4, r1
 80052ee:	d507      	bpl.n	8005300 <__smakebuf_r+0x1c>
 80052f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80052f4:	6023      	str	r3, [r4, #0]
 80052f6:	6123      	str	r3, [r4, #16]
 80052f8:	2301      	movs	r3, #1
 80052fa:	6163      	str	r3, [r4, #20]
 80052fc:	b003      	add	sp, #12
 80052fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005300:	ab01      	add	r3, sp, #4
 8005302:	466a      	mov	r2, sp
 8005304:	f7ff ffc8 	bl	8005298 <__swhatbuf_r>
 8005308:	9f00      	ldr	r7, [sp, #0]
 800530a:	4605      	mov	r5, r0
 800530c:	4639      	mov	r1, r7
 800530e:	4630      	mov	r0, r6
 8005310:	f7ff fc24 	bl	8004b5c <_malloc_r>
 8005314:	b948      	cbnz	r0, 800532a <__smakebuf_r+0x46>
 8005316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800531a:	059a      	lsls	r2, r3, #22
 800531c:	d4ee      	bmi.n	80052fc <__smakebuf_r+0x18>
 800531e:	f023 0303 	bic.w	r3, r3, #3
 8005322:	f043 0302 	orr.w	r3, r3, #2
 8005326:	81a3      	strh	r3, [r4, #12]
 8005328:	e7e2      	b.n	80052f0 <__smakebuf_r+0xc>
 800532a:	89a3      	ldrh	r3, [r4, #12]
 800532c:	6020      	str	r0, [r4, #0]
 800532e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005332:	81a3      	strh	r3, [r4, #12]
 8005334:	9b01      	ldr	r3, [sp, #4]
 8005336:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800533a:	b15b      	cbz	r3, 8005354 <__smakebuf_r+0x70>
 800533c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005340:	4630      	mov	r0, r6
 8005342:	f000 f82d 	bl	80053a0 <_isatty_r>
 8005346:	b128      	cbz	r0, 8005354 <__smakebuf_r+0x70>
 8005348:	89a3      	ldrh	r3, [r4, #12]
 800534a:	f023 0303 	bic.w	r3, r3, #3
 800534e:	f043 0301 	orr.w	r3, r3, #1
 8005352:	81a3      	strh	r3, [r4, #12]
 8005354:	89a3      	ldrh	r3, [r4, #12]
 8005356:	431d      	orrs	r5, r3
 8005358:	81a5      	strh	r5, [r4, #12]
 800535a:	e7cf      	b.n	80052fc <__smakebuf_r+0x18>

0800535c <_close_r>:
 800535c:	b538      	push	{r3, r4, r5, lr}
 800535e:	4d06      	ldr	r5, [pc, #24]	@ (8005378 <_close_r+0x1c>)
 8005360:	2300      	movs	r3, #0
 8005362:	4604      	mov	r4, r0
 8005364:	4608      	mov	r0, r1
 8005366:	602b      	str	r3, [r5, #0]
 8005368:	f7fc fddd 	bl	8001f26 <_close>
 800536c:	1c43      	adds	r3, r0, #1
 800536e:	d102      	bne.n	8005376 <_close_r+0x1a>
 8005370:	682b      	ldr	r3, [r5, #0]
 8005372:	b103      	cbz	r3, 8005376 <_close_r+0x1a>
 8005374:	6023      	str	r3, [r4, #0]
 8005376:	bd38      	pop	{r3, r4, r5, pc}
 8005378:	2000080c 	.word	0x2000080c

0800537c <_fstat_r>:
 800537c:	b538      	push	{r3, r4, r5, lr}
 800537e:	4d07      	ldr	r5, [pc, #28]	@ (800539c <_fstat_r+0x20>)
 8005380:	2300      	movs	r3, #0
 8005382:	4604      	mov	r4, r0
 8005384:	4608      	mov	r0, r1
 8005386:	4611      	mov	r1, r2
 8005388:	602b      	str	r3, [r5, #0]
 800538a:	f7fc fdd8 	bl	8001f3e <_fstat>
 800538e:	1c43      	adds	r3, r0, #1
 8005390:	d102      	bne.n	8005398 <_fstat_r+0x1c>
 8005392:	682b      	ldr	r3, [r5, #0]
 8005394:	b103      	cbz	r3, 8005398 <_fstat_r+0x1c>
 8005396:	6023      	str	r3, [r4, #0]
 8005398:	bd38      	pop	{r3, r4, r5, pc}
 800539a:	bf00      	nop
 800539c:	2000080c 	.word	0x2000080c

080053a0 <_isatty_r>:
 80053a0:	b538      	push	{r3, r4, r5, lr}
 80053a2:	4d06      	ldr	r5, [pc, #24]	@ (80053bc <_isatty_r+0x1c>)
 80053a4:	2300      	movs	r3, #0
 80053a6:	4604      	mov	r4, r0
 80053a8:	4608      	mov	r0, r1
 80053aa:	602b      	str	r3, [r5, #0]
 80053ac:	f7fc fdd7 	bl	8001f5e <_isatty>
 80053b0:	1c43      	adds	r3, r0, #1
 80053b2:	d102      	bne.n	80053ba <_isatty_r+0x1a>
 80053b4:	682b      	ldr	r3, [r5, #0]
 80053b6:	b103      	cbz	r3, 80053ba <_isatty_r+0x1a>
 80053b8:	6023      	str	r3, [r4, #0]
 80053ba:	bd38      	pop	{r3, r4, r5, pc}
 80053bc:	2000080c 	.word	0x2000080c

080053c0 <_lseek_r>:
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	4d07      	ldr	r5, [pc, #28]	@ (80053e0 <_lseek_r+0x20>)
 80053c4:	4604      	mov	r4, r0
 80053c6:	4608      	mov	r0, r1
 80053c8:	4611      	mov	r1, r2
 80053ca:	2200      	movs	r2, #0
 80053cc:	602a      	str	r2, [r5, #0]
 80053ce:	461a      	mov	r2, r3
 80053d0:	f7fc fdd0 	bl	8001f74 <_lseek>
 80053d4:	1c43      	adds	r3, r0, #1
 80053d6:	d102      	bne.n	80053de <_lseek_r+0x1e>
 80053d8:	682b      	ldr	r3, [r5, #0]
 80053da:	b103      	cbz	r3, 80053de <_lseek_r+0x1e>
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	bd38      	pop	{r3, r4, r5, pc}
 80053e0:	2000080c 	.word	0x2000080c

080053e4 <_read_r>:
 80053e4:	b538      	push	{r3, r4, r5, lr}
 80053e6:	4d07      	ldr	r5, [pc, #28]	@ (8005404 <_read_r+0x20>)
 80053e8:	4604      	mov	r4, r0
 80053ea:	4608      	mov	r0, r1
 80053ec:	4611      	mov	r1, r2
 80053ee:	2200      	movs	r2, #0
 80053f0:	602a      	str	r2, [r5, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	f7fc fd5e 	bl	8001eb4 <_read>
 80053f8:	1c43      	adds	r3, r0, #1
 80053fa:	d102      	bne.n	8005402 <_read_r+0x1e>
 80053fc:	682b      	ldr	r3, [r5, #0]
 80053fe:	b103      	cbz	r3, 8005402 <_read_r+0x1e>
 8005400:	6023      	str	r3, [r4, #0]
 8005402:	bd38      	pop	{r3, r4, r5, pc}
 8005404:	2000080c 	.word	0x2000080c

08005408 <_sbrk_r>:
 8005408:	b538      	push	{r3, r4, r5, lr}
 800540a:	4d06      	ldr	r5, [pc, #24]	@ (8005424 <_sbrk_r+0x1c>)
 800540c:	2300      	movs	r3, #0
 800540e:	4604      	mov	r4, r0
 8005410:	4608      	mov	r0, r1
 8005412:	602b      	str	r3, [r5, #0]
 8005414:	f7fc fdbc 	bl	8001f90 <_sbrk>
 8005418:	1c43      	adds	r3, r0, #1
 800541a:	d102      	bne.n	8005422 <_sbrk_r+0x1a>
 800541c:	682b      	ldr	r3, [r5, #0]
 800541e:	b103      	cbz	r3, 8005422 <_sbrk_r+0x1a>
 8005420:	6023      	str	r3, [r4, #0]
 8005422:	bd38      	pop	{r3, r4, r5, pc}
 8005424:	2000080c 	.word	0x2000080c

08005428 <_write_r>:
 8005428:	b538      	push	{r3, r4, r5, lr}
 800542a:	4d07      	ldr	r5, [pc, #28]	@ (8005448 <_write_r+0x20>)
 800542c:	4604      	mov	r4, r0
 800542e:	4608      	mov	r0, r1
 8005430:	4611      	mov	r1, r2
 8005432:	2200      	movs	r2, #0
 8005434:	602a      	str	r2, [r5, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	f7fc fd59 	bl	8001eee <_write>
 800543c:	1c43      	adds	r3, r0, #1
 800543e:	d102      	bne.n	8005446 <_write_r+0x1e>
 8005440:	682b      	ldr	r3, [r5, #0]
 8005442:	b103      	cbz	r3, 8005446 <_write_r+0x1e>
 8005444:	6023      	str	r3, [r4, #0]
 8005446:	bd38      	pop	{r3, r4, r5, pc}
 8005448:	2000080c 	.word	0x2000080c

0800544c <_free_r>:
 800544c:	b538      	push	{r3, r4, r5, lr}
 800544e:	4605      	mov	r5, r0
 8005450:	2900      	cmp	r1, #0
 8005452:	d041      	beq.n	80054d8 <_free_r+0x8c>
 8005454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005458:	1f0c      	subs	r4, r1, #4
 800545a:	2b00      	cmp	r3, #0
 800545c:	bfb8      	it	lt
 800545e:	18e4      	addlt	r4, r4, r3
 8005460:	f7ff fe36 	bl	80050d0 <__malloc_lock>
 8005464:	4a1d      	ldr	r2, [pc, #116]	@ (80054dc <_free_r+0x90>)
 8005466:	6813      	ldr	r3, [r2, #0]
 8005468:	b933      	cbnz	r3, 8005478 <_free_r+0x2c>
 800546a:	6063      	str	r3, [r4, #4]
 800546c:	6014      	str	r4, [r2, #0]
 800546e:	4628      	mov	r0, r5
 8005470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005474:	f7ff be32 	b.w	80050dc <__malloc_unlock>
 8005478:	42a3      	cmp	r3, r4
 800547a:	d908      	bls.n	800548e <_free_r+0x42>
 800547c:	6820      	ldr	r0, [r4, #0]
 800547e:	1821      	adds	r1, r4, r0
 8005480:	428b      	cmp	r3, r1
 8005482:	bf01      	itttt	eq
 8005484:	6819      	ldreq	r1, [r3, #0]
 8005486:	685b      	ldreq	r3, [r3, #4]
 8005488:	1809      	addeq	r1, r1, r0
 800548a:	6021      	streq	r1, [r4, #0]
 800548c:	e7ed      	b.n	800546a <_free_r+0x1e>
 800548e:	461a      	mov	r2, r3
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	b10b      	cbz	r3, 8005498 <_free_r+0x4c>
 8005494:	42a3      	cmp	r3, r4
 8005496:	d9fa      	bls.n	800548e <_free_r+0x42>
 8005498:	6811      	ldr	r1, [r2, #0]
 800549a:	1850      	adds	r0, r2, r1
 800549c:	42a0      	cmp	r0, r4
 800549e:	d10b      	bne.n	80054b8 <_free_r+0x6c>
 80054a0:	6820      	ldr	r0, [r4, #0]
 80054a2:	4401      	add	r1, r0
 80054a4:	1850      	adds	r0, r2, r1
 80054a6:	4283      	cmp	r3, r0
 80054a8:	6011      	str	r1, [r2, #0]
 80054aa:	d1e0      	bne.n	800546e <_free_r+0x22>
 80054ac:	6818      	ldr	r0, [r3, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	6053      	str	r3, [r2, #4]
 80054b2:	4408      	add	r0, r1
 80054b4:	6010      	str	r0, [r2, #0]
 80054b6:	e7da      	b.n	800546e <_free_r+0x22>
 80054b8:	d902      	bls.n	80054c0 <_free_r+0x74>
 80054ba:	230c      	movs	r3, #12
 80054bc:	602b      	str	r3, [r5, #0]
 80054be:	e7d6      	b.n	800546e <_free_r+0x22>
 80054c0:	6820      	ldr	r0, [r4, #0]
 80054c2:	1821      	adds	r1, r4, r0
 80054c4:	428b      	cmp	r3, r1
 80054c6:	bf04      	itt	eq
 80054c8:	6819      	ldreq	r1, [r3, #0]
 80054ca:	685b      	ldreq	r3, [r3, #4]
 80054cc:	6063      	str	r3, [r4, #4]
 80054ce:	bf04      	itt	eq
 80054d0:	1809      	addeq	r1, r1, r0
 80054d2:	6021      	streq	r1, [r4, #0]
 80054d4:	6054      	str	r4, [r2, #4]
 80054d6:	e7ca      	b.n	800546e <_free_r+0x22>
 80054d8:	bd38      	pop	{r3, r4, r5, pc}
 80054da:	bf00      	nop
 80054dc:	20000808 	.word	0x20000808

080054e0 <round>:
 80054e0:	ec51 0b10 	vmov	r0, r1, d0
 80054e4:	b570      	push	{r4, r5, r6, lr}
 80054e6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80054ea:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 80054ee:	2a13      	cmp	r2, #19
 80054f0:	460b      	mov	r3, r1
 80054f2:	4605      	mov	r5, r0
 80054f4:	dc1b      	bgt.n	800552e <round+0x4e>
 80054f6:	2a00      	cmp	r2, #0
 80054f8:	da0b      	bge.n	8005512 <round+0x32>
 80054fa:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 80054fe:	3201      	adds	r2, #1
 8005500:	bf04      	itt	eq
 8005502:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8005506:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800550a:	2200      	movs	r2, #0
 800550c:	4619      	mov	r1, r3
 800550e:	4610      	mov	r0, r2
 8005510:	e015      	b.n	800553e <round+0x5e>
 8005512:	4c15      	ldr	r4, [pc, #84]	@ (8005568 <round+0x88>)
 8005514:	4114      	asrs	r4, r2
 8005516:	ea04 0601 	and.w	r6, r4, r1
 800551a:	4306      	orrs	r6, r0
 800551c:	d00f      	beq.n	800553e <round+0x5e>
 800551e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8005522:	fa41 f202 	asr.w	r2, r1, r2
 8005526:	4413      	add	r3, r2
 8005528:	ea23 0304 	bic.w	r3, r3, r4
 800552c:	e7ed      	b.n	800550a <round+0x2a>
 800552e:	2a33      	cmp	r2, #51	@ 0x33
 8005530:	dd08      	ble.n	8005544 <round+0x64>
 8005532:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005536:	d102      	bne.n	800553e <round+0x5e>
 8005538:	4602      	mov	r2, r0
 800553a:	f7fa fec7 	bl	80002cc <__adddf3>
 800553e:	ec41 0b10 	vmov	d0, r0, r1
 8005542:	bd70      	pop	{r4, r5, r6, pc}
 8005544:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8005548:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800554c:	40f4      	lsrs	r4, r6
 800554e:	4204      	tst	r4, r0
 8005550:	d0f5      	beq.n	800553e <round+0x5e>
 8005552:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8005556:	2201      	movs	r2, #1
 8005558:	408a      	lsls	r2, r1
 800555a:	1952      	adds	r2, r2, r5
 800555c:	bf28      	it	cs
 800555e:	3301      	addcs	r3, #1
 8005560:	ea22 0204 	bic.w	r2, r2, r4
 8005564:	e7d2      	b.n	800550c <round+0x2c>
 8005566:	bf00      	nop
 8005568:	000fffff 	.word	0x000fffff

0800556c <_init>:
 800556c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556e:	bf00      	nop
 8005570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005572:	bc08      	pop	{r3}
 8005574:	469e      	mov	lr, r3
 8005576:	4770      	bx	lr

08005578 <_fini>:
 8005578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557a:	bf00      	nop
 800557c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800557e:	bc08      	pop	{r3}
 8005580:	469e      	mov	lr, r3
 8005582:	4770      	bx	lr
